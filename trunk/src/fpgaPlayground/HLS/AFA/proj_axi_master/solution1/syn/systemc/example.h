// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _example_HH_
#define _example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_buff.h"
#include "example_a_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_A_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_A_ID_WIDTH = 1,
         unsigned int C_M_AXI_A_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_DATA_WIDTH = 32,
         unsigned int C_M_AXI_A_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUSER_WIDTH = 1>
struct example : public sc_module {
    // Port declarations 51
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_a_AWVALID;
    sc_in< sc_logic > m_axi_a_AWREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_AWADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_AWID;
    sc_out< sc_lv<8> > m_axi_a_AWLEN;
    sc_out< sc_lv<3> > m_axi_a_AWSIZE;
    sc_out< sc_lv<2> > m_axi_a_AWBURST;
    sc_out< sc_lv<2> > m_axi_a_AWLOCK;
    sc_out< sc_lv<4> > m_axi_a_AWCACHE;
    sc_out< sc_lv<3> > m_axi_a_AWPROT;
    sc_out< sc_lv<4> > m_axi_a_AWQOS;
    sc_out< sc_lv<4> > m_axi_a_AWREGION;
    sc_out< sc_uint<C_M_AXI_A_AWUSER_WIDTH> > m_axi_a_AWUSER;
    sc_out< sc_logic > m_axi_a_WVALID;
    sc_in< sc_logic > m_axi_a_WREADY;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_WDATA;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH/8> > m_axi_a_WSTRB;
    sc_out< sc_logic > m_axi_a_WLAST;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_WID;
    sc_out< sc_uint<C_M_AXI_A_WUSER_WIDTH> > m_axi_a_WUSER;
    sc_out< sc_logic > m_axi_a_ARVALID;
    sc_in< sc_logic > m_axi_a_ARREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_ARADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_ARID;
    sc_out< sc_lv<8> > m_axi_a_ARLEN;
    sc_out< sc_lv<3> > m_axi_a_ARSIZE;
    sc_out< sc_lv<2> > m_axi_a_ARBURST;
    sc_out< sc_lv<2> > m_axi_a_ARLOCK;
    sc_out< sc_lv<4> > m_axi_a_ARCACHE;
    sc_out< sc_lv<3> > m_axi_a_ARPROT;
    sc_out< sc_lv<4> > m_axi_a_ARQOS;
    sc_out< sc_lv<4> > m_axi_a_ARREGION;
    sc_out< sc_uint<C_M_AXI_A_ARUSER_WIDTH> > m_axi_a_ARUSER;
    sc_in< sc_logic > m_axi_a_RVALID;
    sc_out< sc_logic > m_axi_a_RREADY;
    sc_in< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_RDATA;
    sc_in< sc_logic > m_axi_a_RLAST;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_RID;
    sc_in< sc_uint<C_M_AXI_A_RUSER_WIDTH> > m_axi_a_RUSER;
    sc_in< sc_lv<2> > m_axi_a_RRESP;
    sc_in< sc_logic > m_axi_a_BVALID;
    sc_out< sc_logic > m_axi_a_BREADY;
    sc_in< sc_lv<2> > m_axi_a_BRESP;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_BID;
    sc_in< sc_uint<C_M_AXI_A_BUSER_WIDTH> > m_axi_a_BUSER;


    // Module declarations
    example(sc_module_name name);
    SC_HAS_PROCESS(example);

    ~example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    example_a_m_axi<32,32,5,C_M_AXI_A_ID_WIDTH,C_M_AXI_A_ADDR_WIDTH,C_M_AXI_A_DATA_WIDTH,C_M_AXI_A_AWUSER_WIDTH,C_M_AXI_A_ARUSER_WIDTH,C_M_AXI_A_WUSER_WIDTH,C_M_AXI_A_RUSER_WIDTH,C_M_AXI_A_BUSER_WIDTH,C_M_AXI_A_TARGET_ADDR,C_M_AXI_A_USER_VALUE,C_M_AXI_A_PROT_VALUE,C_M_AXI_A_CACHE_VALUE>* example_a_m_axi_U;
    example_buff* buff_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_31;
    sc_signal< sc_logic > a_AWVALID;
    sc_signal< sc_logic > a_AWREADY;
    sc_signal< sc_lv<32> > a_AWADDR;
    sc_signal< sc_lv<1> > a_AWID;
    sc_signal< sc_lv<32> > a_AWLEN;
    sc_signal< sc_lv<3> > a_AWSIZE;
    sc_signal< sc_lv<2> > a_AWBURST;
    sc_signal< sc_lv<2> > a_AWLOCK;
    sc_signal< sc_lv<4> > a_AWCACHE;
    sc_signal< sc_lv<3> > a_AWPROT;
    sc_signal< sc_lv<4> > a_AWQOS;
    sc_signal< sc_lv<4> > a_AWREGION;
    sc_signal< sc_lv<1> > a_AWUSER;
    sc_signal< sc_logic > a_WVALID;
    sc_signal< sc_logic > a_WREADY;
    sc_signal< sc_lv<32> > a_WDATA;
    sc_signal< sc_lv<4> > a_WSTRB;
    sc_signal< sc_logic > a_WLAST;
    sc_signal< sc_lv<1> > a_WID;
    sc_signal< sc_lv<1> > a_WUSER;
    sc_signal< sc_logic > a_ARVALID;
    sc_signal< sc_logic > a_ARREADY;
    sc_signal< sc_lv<32> > a_ARADDR;
    sc_signal< sc_lv<1> > a_ARID;
    sc_signal< sc_lv<32> > a_ARLEN;
    sc_signal< sc_lv<3> > a_ARSIZE;
    sc_signal< sc_lv<2> > a_ARBURST;
    sc_signal< sc_lv<2> > a_ARLOCK;
    sc_signal< sc_lv<4> > a_ARCACHE;
    sc_signal< sc_lv<3> > a_ARPROT;
    sc_signal< sc_lv<4> > a_ARQOS;
    sc_signal< sc_lv<4> > a_ARREGION;
    sc_signal< sc_lv<1> > a_ARUSER;
    sc_signal< sc_logic > a_RVALID;
    sc_signal< sc_logic > a_RREADY;
    sc_signal< sc_lv<32> > a_RDATA;
    sc_signal< sc_logic > a_RLAST;
    sc_signal< sc_lv<1> > a_RID;
    sc_signal< sc_lv<1> > a_RUSER;
    sc_signal< sc_lv<2> > a_RRESP;
    sc_signal< sc_logic > a_BVALID;
    sc_signal< sc_logic > a_BREADY;
    sc_signal< sc_lv<2> > a_BRESP;
    sc_signal< sc_lv<1> > a_BID;
    sc_signal< sc_lv<1> > a_BUSER;
    sc_signal< sc_logic > example_a_m_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<6> > indvar_reg_116;
    sc_signal< sc_lv<6> > ap_reg_ppstg_indvar_reg_116_pp0_it1;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_6;
    sc_signal< bool > ap_sig_bdd_176;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_lv<1> > exitcond1_reg_209;
    sc_signal< bool > ap_sig_bdd_185;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<6> > indvar5_reg_139;
    sc_signal< sc_lv<1> > exitcond1_fu_151_p2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond1_reg_209_pp0_it1;
    sc_signal< sc_lv<6> > indvar_next_fu_157_p2;
    sc_signal< sc_lv<6> > indvar_next_reg_213;
    sc_signal< sc_lv<32> > a_read_reg_218;
    sc_signal< sc_lv<1> > exitcond_fu_168_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_7;
    sc_signal< bool > ap_sig_bdd_212;
    sc_signal< sc_logic > ap_sig_ioackin_a_AWREADY;
    sc_signal< sc_lv<6> > i_1_fu_174_p2;
    sc_signal< sc_lv<6> > i_1_reg_227;
    sc_signal< sc_lv<6> > buff_addr_1_reg_232;
    sc_signal< sc_lv<1> > exitcond7_fu_192_p2;
    sc_signal< sc_lv<1> > exitcond7_reg_237;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp1_stg0_fsm_9;
    sc_signal< bool > ap_sig_bdd_233;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond7_reg_237_pp1_it1;
    sc_signal< sc_logic > ap_sig_ioackin_a_WREADY;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it2;
    sc_signal< sc_lv<6> > indvar_next6_fu_198_p2;
    sc_signal< sc_lv<32> > buff_q0;
    sc_signal< sc_lv<32> > buff_load_1_reg_251;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_267;
    sc_signal< sc_lv<6> > buff_address0;
    sc_signal< sc_logic > buff_ce0;
    sc_signal< sc_logic > buff_we0;
    sc_signal< sc_lv<32> > buff_d0;
    sc_signal< sc_lv<6> > indvar_phi_fu_120_p4;
    sc_signal< sc_lv<6> > i_reg_128;
    sc_signal< sc_logic > ap_sig_cseq_ST_st11_fsm_8;
    sc_signal< bool > ap_sig_bdd_300;
    sc_signal< sc_lv<64> > tmp_fu_163_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_180_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_204_p1;
    sc_signal< sc_logic > ap_reg_ioackin_a_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_a_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_WREADY;
    sc_signal< sc_logic > ap_sig_cseq_ST_st17_fsm_12;
    sc_signal< bool > ap_sig_bdd_353;
    sc_signal< sc_lv<32> > tmp_2_fu_185_p2;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_454;
    sc_signal< bool > ap_sig_bdd_334;
    sc_signal< bool > ap_sig_bdd_341;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_st1_fsm_0;
    static const sc_lv<13> ap_ST_st2_fsm_1;
    static const sc_lv<13> ap_ST_st3_fsm_2;
    static const sc_lv<13> ap_ST_st4_fsm_3;
    static const sc_lv<13> ap_ST_st5_fsm_4;
    static const sc_lv<13> ap_ST_st6_fsm_5;
    static const sc_lv<13> ap_ST_pp0_stg0_fsm_6;
    static const sc_lv<13> ap_ST_st10_fsm_7;
    static const sc_lv<13> ap_ST_st11_fsm_8;
    static const sc_lv<13> ap_ST_pp1_stg0_fsm_9;
    static const sc_lv<13> ap_ST_st15_fsm_10;
    static const sc_lv<13> ap_ST_st16_fsm_11;
    static const sc_lv<13> ap_ST_st17_fsm_12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_DATA_WIDTH;
    static const int C_M_AXI_A_TARGET_ADDR;
    static const int C_M_AXI_A_USER_VALUE;
    static const int C_M_AXI_A_PROT_VALUE;
    static const int C_M_AXI_A_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_64;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_ARADDR();
    void thread_a_ARBURST();
    void thread_a_ARCACHE();
    void thread_a_ARID();
    void thread_a_ARLEN();
    void thread_a_ARLOCK();
    void thread_a_ARPROT();
    void thread_a_ARQOS();
    void thread_a_ARREGION();
    void thread_a_ARSIZE();
    void thread_a_ARUSER();
    void thread_a_ARVALID();
    void thread_a_AWADDR();
    void thread_a_AWBURST();
    void thread_a_AWCACHE();
    void thread_a_AWID();
    void thread_a_AWLEN();
    void thread_a_AWLOCK();
    void thread_a_AWPROT();
    void thread_a_AWQOS();
    void thread_a_AWREGION();
    void thread_a_AWSIZE();
    void thread_a_AWUSER();
    void thread_a_AWVALID();
    void thread_a_BREADY();
    void thread_a_RREADY();
    void thread_a_WDATA();
    void thread_a_WID();
    void thread_a_WLAST();
    void thread_a_WSTRB();
    void thread_a_WUSER();
    void thread_a_WVALID();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_176();
    void thread_ap_sig_bdd_185();
    void thread_ap_sig_bdd_212();
    void thread_ap_sig_bdd_233();
    void thread_ap_sig_bdd_267();
    void thread_ap_sig_bdd_300();
    void thread_ap_sig_bdd_31();
    void thread_ap_sig_bdd_334();
    void thread_ap_sig_bdd_341();
    void thread_ap_sig_bdd_353();
    void thread_ap_sig_bdd_454();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_6();
    void thread_ap_sig_cseq_ST_pp1_stg0_fsm_9();
    void thread_ap_sig_cseq_ST_st10_fsm_7();
    void thread_ap_sig_cseq_ST_st11_fsm_8();
    void thread_ap_sig_cseq_ST_st17_fsm_12();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_ioackin_a_ARREADY();
    void thread_ap_sig_ioackin_a_AWREADY();
    void thread_ap_sig_ioackin_a_WREADY();
    void thread_buff_address0();
    void thread_buff_ce0();
    void thread_buff_d0();
    void thread_buff_we0();
    void thread_example_a_m_axi_U_ap_dummy_ce();
    void thread_exitcond1_fu_151_p2();
    void thread_exitcond7_fu_192_p2();
    void thread_exitcond_fu_168_p2();
    void thread_i_1_fu_174_p2();
    void thread_indvar_next6_fu_198_p2();
    void thread_indvar_next_fu_157_p2();
    void thread_indvar_phi_fu_120_p4();
    void thread_tmp_1_fu_180_p1();
    void thread_tmp_2_fu_185_p2();
    void thread_tmp_4_fu_204_p1();
    void thread_tmp_fu_163_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
