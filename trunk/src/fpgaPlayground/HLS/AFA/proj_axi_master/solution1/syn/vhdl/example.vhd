-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_a_AWVALID : OUT STD_LOGIC;
    m_axi_a_AWREADY : IN STD_LOGIC;
    m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_a_WVALID : OUT STD_LOGIC;
    m_axi_a_WREADY : IN STD_LOGIC;
    m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_a_WLAST : OUT STD_LOGIC;
    m_axi_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_a_ARVALID : OUT STD_LOGIC;
    m_axi_a_ARREADY : IN STD_LOGIC;
    m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_a_RVALID : IN STD_LOGIC;
    m_axi_a_RREADY : OUT STD_LOGIC;
    m_axi_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_RLAST : IN STD_LOGIC;
    m_axi_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BVALID : IN STD_LOGIC;
    m_axi_a_BREADY : OUT STD_LOGIC;
    m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.666637,HLS_SYN_LAT=213,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=644,HLS_SYN_LUT=722}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_pp0_stg0_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_pp1_stg0_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st15_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_st16_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st17_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal a_AWVALID : STD_LOGIC;
    signal a_AWREADY : STD_LOGIC;
    signal a_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_WVALID : STD_LOGIC;
    signal a_WREADY : STD_LOGIC;
    signal a_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal a_WLAST : STD_LOGIC;
    signal a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ARVALID : STD_LOGIC;
    signal a_ARREADY : STD_LOGIC;
    signal a_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RVALID : STD_LOGIC;
    signal a_RREADY : STD_LOGIC;
    signal a_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_RLAST : STD_LOGIC;
    signal a_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BVALID : STD_LOGIC;
    signal a_BREADY : STD_LOGIC;
    signal a_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal example_a_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_116_pp0_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_185 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar5_reg_139 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_209_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_157_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_read_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal ap_sig_ioackin_a_AWREADY : STD_LOGIC;
    signal i_1_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_227 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_addr_1_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond7_reg_237_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_a_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar_next6_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_load_1_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_267 : BOOLEAN;
    signal buff_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_120_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_300 : BOOLEAN;
    signal tmp_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_a_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_a_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_a_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_a_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st17_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal tmp_2_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_bdd_454 : BOOLEAN;
    signal ap_sig_bdd_334 : BOOLEAN;
    signal ap_sig_bdd_341 : BOOLEAN;

    component example_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_a_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    example_a_m_axi_U : component example_a_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_A_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_AWVALID,
        AWREADY => m_axi_a_AWREADY,
        AWADDR => m_axi_a_AWADDR,
        AWID => m_axi_a_AWID,
        AWLEN => m_axi_a_AWLEN,
        AWSIZE => m_axi_a_AWSIZE,
        AWBURST => m_axi_a_AWBURST,
        AWLOCK => m_axi_a_AWLOCK,
        AWCACHE => m_axi_a_AWCACHE,
        AWPROT => m_axi_a_AWPROT,
        AWQOS => m_axi_a_AWQOS,
        AWREGION => m_axi_a_AWREGION,
        AWUSER => m_axi_a_AWUSER,
        WVALID => m_axi_a_WVALID,
        WREADY => m_axi_a_WREADY,
        WDATA => m_axi_a_WDATA,
        WSTRB => m_axi_a_WSTRB,
        WLAST => m_axi_a_WLAST,
        WID => m_axi_a_WID,
        WUSER => m_axi_a_WUSER,
        ARVALID => m_axi_a_ARVALID,
        ARREADY => m_axi_a_ARREADY,
        ARADDR => m_axi_a_ARADDR,
        ARID => m_axi_a_ARID,
        ARLEN => m_axi_a_ARLEN,
        ARSIZE => m_axi_a_ARSIZE,
        ARBURST => m_axi_a_ARBURST,
        ARLOCK => m_axi_a_ARLOCK,
        ARCACHE => m_axi_a_ARCACHE,
        ARPROT => m_axi_a_ARPROT,
        ARQOS => m_axi_a_ARQOS,
        ARREGION => m_axi_a_ARREGION,
        ARUSER => m_axi_a_ARUSER,
        RVALID => m_axi_a_RVALID,
        RREADY => m_axi_a_RREADY,
        RDATA => m_axi_a_RDATA,
        RLAST => m_axi_a_RLAST,
        RID => m_axi_a_RID,
        RUSER => m_axi_a_RUSER,
        RRESP => m_axi_a_RRESP,
        BVALID => m_axi_a_BVALID,
        BREADY => m_axi_a_BREADY,
        BRESP => m_axi_a_BRESP,
        BID => m_axi_a_BID,
        BUSER => m_axi_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => example_a_m_axi_U_ap_dummy_ce,
        I_ARVALID => a_ARVALID,
        I_ARREADY => a_ARREADY,
        I_ARADDR => a_ARADDR,
        I_ARID => a_ARID,
        I_ARLEN => a_ARLEN,
        I_ARSIZE => a_ARSIZE,
        I_ARLOCK => a_ARLOCK,
        I_ARCACHE => a_ARCACHE,
        I_ARQOS => a_ARQOS,
        I_ARPROT => a_ARPROT,
        I_ARUSER => a_ARUSER,
        I_ARBURST => a_ARBURST,
        I_ARREGION => a_ARREGION,
        I_RVALID => a_RVALID,
        I_RREADY => a_RREADY,
        I_RDATA => a_RDATA,
        I_RID => a_RID,
        I_RUSER => a_RUSER,
        I_RRESP => a_RRESP,
        I_RLAST => a_RLAST,
        I_AWVALID => a_AWVALID,
        I_AWREADY => a_AWREADY,
        I_AWADDR => a_AWADDR,
        I_AWID => a_AWID,
        I_AWLEN => a_AWLEN,
        I_AWSIZE => a_AWSIZE,
        I_AWLOCK => a_AWLOCK,
        I_AWCACHE => a_AWCACHE,
        I_AWQOS => a_AWQOS,
        I_AWPROT => a_AWPROT,
        I_AWUSER => a_AWUSER,
        I_AWBURST => a_AWBURST,
        I_AWREGION => a_AWREGION,
        I_WVALID => a_WVALID,
        I_WREADY => a_WREADY,
        I_WDATA => a_WDATA,
        I_WID => a_WID,
        I_WUSER => a_WUSER,
        I_WLAST => a_WLAST,
        I_WSTRB => a_WSTRB,
        I_BVALID => a_BVALID,
        I_BREADY => a_BREADY,
        I_BRESP => a_BRESP,
        I_BID => a_BID,
        I_BUSER => a_BUSER);

    buff_U : component example_buff
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_ARREADY assign process. --
    ap_reg_ioackin_a_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_a_ARREADY)))) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_454) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_AWREADY assign process. --
    ap_reg_ioackin_a_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_334) then
                    if (not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) then 
                        ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_AWREADY)) then 
                        ap_reg_ioackin_a_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_WREADY assign process. --
    ap_reg_ioackin_a_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_341) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                        ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_WREADY)) then 
                        ap_reg_ioackin_a_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_151_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_151_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_151_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond7_fu_192_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond7_fu_192_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond7_fu_192_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_128 assign process. --
    i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_151_p2)))) then 
                i_reg_128 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
                i_reg_128 <= i_1_reg_227;
            end if; 
        end if;
    end process;

    -- indvar5_reg_139 assign process. --
    indvar5_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                indvar5_reg_139 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond7_fu_192_p2))) then 
                indvar5_reg_139 <= indvar_next6_fu_198_p2;
            end if; 
        end if;
    end process;

    -- indvar_reg_116 assign process. --
    indvar_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_209 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_116 <= indvar_next_reg_213;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                indvar_reg_116 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_209 = ap_const_lv1_0) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                a_read_reg_218 <= a_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond1_reg_209_pp0_it1 <= exitcond1_reg_209;
                ap_reg_ppstg_indvar_reg_116_pp0_it1 <= indvar_reg_116;
                exitcond1_reg_209 <= exitcond1_fu_151_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond7_reg_237_pp1_it1 <= exitcond7_reg_237;
                exitcond7_reg_237 <= exitcond7_fu_192_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_lv1_0 = exitcond_fu_168_p2) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                buff_addr_1_reg_232 <= tmp_1_fu_180_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond7_reg_237))) then
                buff_load_1_reg_251 <= buff_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                i_1_reg_227 <= i_1_fu_174_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_213 <= indvar_next_fu_157_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, a_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_185, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond1_fu_151_p2, exitcond_fu_168_p2, ap_sig_ioackin_a_AWREADY, exitcond7_fu_192_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond7_reg_237_pp1_it1, ap_sig_ioackin_a_WREADY, ap_reg_ppiten_pp1_it2, ap_sig_ioackin_a_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_a_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
            when ap_ST_pp0_stg0_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_151_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_151_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                end if;
            when ap_ST_st10_fsm_7 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                elsif (((ap_const_lv1_0 = exitcond_fu_168_p2) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_7;
            when ap_ST_pp1_stg0_fsm_9 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond7_fu_192_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond7_fu_192_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                end if;
            when ap_ST_st15_fsm_10 => 
                ap_NS_fsm <= ap_ST_st16_fsm_11;
            when ap_ST_st16_fsm_11 => 
                ap_NS_fsm <= ap_ST_st17_fsm_12;
            when ap_ST_st17_fsm_12 => 
                if (not((a_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    a_ARADDR <= ap_const_lv32_0;
    a_ARBURST <= ap_const_lv2_0;
    a_ARCACHE <= ap_const_lv4_0;
    a_ARID <= ap_const_lv1_0;
    a_ARLEN <= ap_const_lv32_32;
    a_ARLOCK <= ap_const_lv2_0;
    a_ARPROT <= ap_const_lv3_0;
    a_ARQOS <= ap_const_lv4_0;
    a_ARREGION <= ap_const_lv4_0;
    a_ARSIZE <= ap_const_lv3_0;
    a_ARUSER <= ap_const_lv1_0;

    -- a_ARVALID assign process. --
    a_ARVALID_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ioackin_a_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_a_ARREADY))) then 
            a_ARVALID <= ap_const_logic_1;
        else 
            a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    a_AWADDR <= ap_const_lv32_0;
    a_AWBURST <= ap_const_lv2_0;
    a_AWCACHE <= ap_const_lv4_0;
    a_AWID <= ap_const_lv1_0;
    a_AWLEN <= ap_const_lv32_32;
    a_AWLOCK <= ap_const_lv2_0;
    a_AWPROT <= ap_const_lv3_0;
    a_AWQOS <= ap_const_lv4_0;
    a_AWREGION <= ap_const_lv4_0;
    a_AWSIZE <= ap_const_lv3_0;
    a_AWUSER <= ap_const_lv1_0;

    -- a_AWVALID assign process. --
    a_AWVALID_assign_proc : process(exitcond_fu_168_p2, ap_sig_cseq_ST_st10_fsm_7, ap_reg_ioackin_a_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_reg_ioackin_a_AWREADY))) then 
            a_AWVALID <= ap_const_logic_1;
        else 
            a_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- a_BREADY assign process. --
    a_BREADY_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((a_BVALID = ap_const_logic_0)))) then 
            a_BREADY <= ap_const_logic_1;
        else 
            a_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- a_RREADY assign process. --
    a_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond1_reg_209, ap_sig_bdd_185, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_209 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            a_RREADY <= ap_const_logic_1;
        else 
            a_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    a_WDATA <= buff_load_1_reg_251;
    a_WID <= ap_const_lv1_0;
    a_WLAST <= ap_const_logic_0;
    a_WSTRB <= ap_const_lv4_F;
    a_WUSER <= ap_const_lv1_0;

    -- a_WVALID assign process. --
    a_WVALID_assign_proc : process(ap_reg_ppstg_exitcond7_reg_237_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ioackin_a_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_0 = ap_reg_ioackin_a_WREADY))) then 
            a_WVALID <= ap_const_logic_1;
        else 
            a_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((a_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((a_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(a_RVALID, exitcond1_reg_209)
    begin
                ap_sig_bdd_185 <= ((a_RVALID = ap_const_logic_0) and (exitcond1_reg_209 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_267 assign process. --
    ap_sig_bdd_267_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_267 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_300 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_334 assign process. --
    ap_sig_bdd_334_assign_proc : process(exitcond_fu_168_p2, ap_sig_cseq_ST_st10_fsm_7)
    begin
                ap_sig_bdd_334 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_168_p2)));
    end process;


    -- ap_sig_bdd_341 assign process. --
    ap_sig_bdd_341_assign_proc : process(ap_reg_ppstg_exitcond7_reg_237_pp1_it1, ap_reg_ppiten_pp1_it2)
    begin
                ap_sig_bdd_341 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_454 assign process. --
    ap_sig_bdd_454_assign_proc : process(ap_start, a_ARREADY)
    begin
                ap_sig_bdd_454 <= ((ap_const_logic_1 = a_ARREADY) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_6_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_9 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_9_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_8 assign process. --
    ap_sig_cseq_ST_st11_fsm_8_assign_proc : process(ap_sig_bdd_300)
    begin
        if (ap_sig_bdd_300) then 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_12 assign process. --
    ap_sig_cseq_ST_st17_fsm_12_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_267)
    begin
        if (ap_sig_bdd_267) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_a_ARREADY assign process. --
    ap_sig_ioackin_a_ARREADY_assign_proc : process(a_ARREADY, ap_reg_ioackin_a_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_ARREADY)) then 
            ap_sig_ioackin_a_ARREADY <= a_ARREADY;
        else 
            ap_sig_ioackin_a_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_a_AWREADY assign process. --
    ap_sig_ioackin_a_AWREADY_assign_proc : process(a_AWREADY, ap_reg_ioackin_a_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_AWREADY)) then 
            ap_sig_ioackin_a_AWREADY <= a_AWREADY;
        else 
            ap_sig_ioackin_a_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_a_WREADY assign process. --
    ap_sig_ioackin_a_WREADY_assign_proc : process(a_WREADY, ap_reg_ioackin_a_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_WREADY)) then 
            ap_sig_ioackin_a_WREADY <= a_WREADY;
        else 
            ap_sig_ioackin_a_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- buff_address0 assign process. --
    buff_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st10_fsm_7, buff_addr_1_reg_232, ap_sig_cseq_ST_pp1_stg0_fsm_9, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st11_fsm_8, tmp_fu_163_p1, tmp_1_fu_180_p1, tmp_4_fu_204_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
            buff_address0 <= buff_addr_1_reg_232;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            buff_address0 <= tmp_fu_163_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            buff_address0 <= tmp_4_fu_204_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then 
            buff_address0 <= tmp_1_fu_180_p1(6 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXX";
        end if; 
    end process;


    -- buff_ce0 assign process. --
    buff_ce0_assign_proc : process(ap_sig_bdd_185, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_fu_168_p2, ap_sig_cseq_ST_st10_fsm_7, ap_sig_ioackin_a_AWREADY, ap_sig_cseq_ST_pp1_stg0_fsm_9, ap_reg_ppiten_pp1_it0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1, ap_sig_ioackin_a_WREADY, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st11_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((not((ap_const_lv1_0 = exitcond_fu_168_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_9) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_237_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_d0 assign process. --
    buff_d0_assign_proc : process(ap_reg_ppiten_pp0_it2, a_read_reg_218, ap_sig_cseq_ST_st11_fsm_8, tmp_2_fu_185_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
            buff_d0 <= tmp_2_fu_185_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            buff_d0 <= a_read_reg_218;
        else 
            buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- buff_we0 assign process. --
    buff_we0_assign_proc : process(ap_sig_bdd_185, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_reg_209_pp0_it1, ap_sig_cseq_ST_st11_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_185 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_209_pp0_it1)))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    example_a_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond1_fu_151_p2 <= "1" when (indvar_phi_fu_120_p4 = ap_const_lv6_32) else "0";
    exitcond7_fu_192_p2 <= "1" when (indvar5_reg_139 = ap_const_lv6_32) else "0";
    exitcond_fu_168_p2 <= "1" when (i_reg_128 = ap_const_lv6_32) else "0";
    i_1_fu_174_p2 <= std_logic_vector(unsigned(i_reg_128) + unsigned(ap_const_lv6_1));
    indvar_next6_fu_198_p2 <= std_logic_vector(unsigned(indvar5_reg_139) + unsigned(ap_const_lv6_1));
    indvar_next_fu_157_p2 <= std_logic_vector(unsigned(indvar_phi_fu_120_p4) + unsigned(ap_const_lv6_1));

    -- indvar_phi_fu_120_p4 assign process. --
    indvar_phi_fu_120_p4_assign_proc : process(indvar_reg_116, ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond1_reg_209, ap_reg_ppiten_pp0_it1, indvar_next_reg_213)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_209 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_120_p4 <= indvar_next_reg_213;
        else 
            indvar_phi_fu_120_p4 <= indvar_reg_116;
        end if; 
    end process;

    tmp_1_fu_180_p1 <= std_logic_vector(resize(unsigned(i_reg_128),64));
    tmp_2_fu_185_p2 <= std_logic_vector(unsigned(buff_q0) + unsigned(ap_const_lv32_64));
    tmp_4_fu_204_p1 <= std_logic_vector(resize(unsigned(indvar5_reg_139),64));
    tmp_fu_163_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_116_pp0_it1),64));
end behav;
