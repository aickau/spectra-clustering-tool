// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> example::ap_ST_st1_fsm_0 = "1";
const sc_lv<13> example::ap_ST_st2_fsm_1 = "10";
const sc_lv<13> example::ap_ST_st3_fsm_2 = "100";
const sc_lv<13> example::ap_ST_st4_fsm_3 = "1000";
const sc_lv<13> example::ap_ST_st5_fsm_4 = "10000";
const sc_lv<13> example::ap_ST_st6_fsm_5 = "100000";
const sc_lv<13> example::ap_ST_pp0_stg0_fsm_6 = "1000000";
const sc_lv<13> example::ap_ST_st10_fsm_7 = "10000000";
const sc_lv<13> example::ap_ST_st11_fsm_8 = "100000000";
const sc_lv<13> example::ap_ST_pp1_stg0_fsm_9 = "1000000000";
const sc_lv<13> example::ap_ST_st15_fsm_10 = "10000000000";
const sc_lv<13> example::ap_ST_st16_fsm_11 = "100000000000";
const sc_lv<13> example::ap_ST_st17_fsm_12 = "1000000000000";
const sc_lv<32> example::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> example::ap_const_lv1_1 = "1";
const int example::C_DATA_WIDTH = "100000";
const int example::C_M_AXI_A_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int example::C_M_AXI_A_CACHE_VALUE = "11";
const sc_lv<32> example::ap_const_lv32_6 = "110";
const sc_lv<1> example::ap_const_lv1_0 = "0";
const sc_lv<32> example::ap_const_lv32_7 = "111";
const sc_lv<32> example::ap_const_lv32_9 = "1001";
const sc_lv<32> example::ap_const_lv32_5 = "101";
const sc_lv<6> example::ap_const_lv6_0 = "000000";
const sc_lv<32> example::ap_const_lv32_8 = "1000";
const sc_lv<32> example::ap_const_lv32_32 = "110010";
const sc_lv<3> example::ap_const_lv3_0 = "000";
const sc_lv<2> example::ap_const_lv2_0 = "00";
const sc_lv<4> example::ap_const_lv4_0 = "0000";
const sc_lv<4> example::ap_const_lv4_F = "1111";
const sc_lv<32> example::ap_const_lv32_C = "1100";
const sc_lv<6> example::ap_const_lv6_32 = "110010";
const sc_lv<6> example::ap_const_lv6_1 = "1";
const sc_lv<32> example::ap_const_lv32_64 = "1100100";

example::example(sc_module_name name) : sc_module(name), mVcdFile(0) {
    example_a_m_axi_U = new example_a_m_axi<32,32,5,C_M_AXI_A_ID_WIDTH,C_M_AXI_A_ADDR_WIDTH,C_M_AXI_A_DATA_WIDTH,C_M_AXI_A_AWUSER_WIDTH,C_M_AXI_A_ARUSER_WIDTH,C_M_AXI_A_WUSER_WIDTH,C_M_AXI_A_RUSER_WIDTH,C_M_AXI_A_BUSER_WIDTH,C_M_AXI_A_TARGET_ADDR,C_M_AXI_A_USER_VALUE,C_M_AXI_A_PROT_VALUE,C_M_AXI_A_CACHE_VALUE>("example_a_m_axi_U");
    example_a_m_axi_U->AWVALID(m_axi_a_AWVALID);
    example_a_m_axi_U->AWREADY(m_axi_a_AWREADY);
    example_a_m_axi_U->AWADDR(m_axi_a_AWADDR);
    example_a_m_axi_U->AWID(m_axi_a_AWID);
    example_a_m_axi_U->AWLEN(m_axi_a_AWLEN);
    example_a_m_axi_U->AWSIZE(m_axi_a_AWSIZE);
    example_a_m_axi_U->AWBURST(m_axi_a_AWBURST);
    example_a_m_axi_U->AWLOCK(m_axi_a_AWLOCK);
    example_a_m_axi_U->AWCACHE(m_axi_a_AWCACHE);
    example_a_m_axi_U->AWPROT(m_axi_a_AWPROT);
    example_a_m_axi_U->AWQOS(m_axi_a_AWQOS);
    example_a_m_axi_U->AWREGION(m_axi_a_AWREGION);
    example_a_m_axi_U->AWUSER(m_axi_a_AWUSER);
    example_a_m_axi_U->WVALID(m_axi_a_WVALID);
    example_a_m_axi_U->WREADY(m_axi_a_WREADY);
    example_a_m_axi_U->WDATA(m_axi_a_WDATA);
    example_a_m_axi_U->WSTRB(m_axi_a_WSTRB);
    example_a_m_axi_U->WLAST(m_axi_a_WLAST);
    example_a_m_axi_U->WID(m_axi_a_WID);
    example_a_m_axi_U->WUSER(m_axi_a_WUSER);
    example_a_m_axi_U->ARVALID(m_axi_a_ARVALID);
    example_a_m_axi_U->ARREADY(m_axi_a_ARREADY);
    example_a_m_axi_U->ARADDR(m_axi_a_ARADDR);
    example_a_m_axi_U->ARID(m_axi_a_ARID);
    example_a_m_axi_U->ARLEN(m_axi_a_ARLEN);
    example_a_m_axi_U->ARSIZE(m_axi_a_ARSIZE);
    example_a_m_axi_U->ARBURST(m_axi_a_ARBURST);
    example_a_m_axi_U->ARLOCK(m_axi_a_ARLOCK);
    example_a_m_axi_U->ARCACHE(m_axi_a_ARCACHE);
    example_a_m_axi_U->ARPROT(m_axi_a_ARPROT);
    example_a_m_axi_U->ARQOS(m_axi_a_ARQOS);
    example_a_m_axi_U->ARREGION(m_axi_a_ARREGION);
    example_a_m_axi_U->ARUSER(m_axi_a_ARUSER);
    example_a_m_axi_U->RVALID(m_axi_a_RVALID);
    example_a_m_axi_U->RREADY(m_axi_a_RREADY);
    example_a_m_axi_U->RDATA(m_axi_a_RDATA);
    example_a_m_axi_U->RLAST(m_axi_a_RLAST);
    example_a_m_axi_U->RID(m_axi_a_RID);
    example_a_m_axi_U->RUSER(m_axi_a_RUSER);
    example_a_m_axi_U->RRESP(m_axi_a_RRESP);
    example_a_m_axi_U->BVALID(m_axi_a_BVALID);
    example_a_m_axi_U->BREADY(m_axi_a_BREADY);
    example_a_m_axi_U->BRESP(m_axi_a_BRESP);
    example_a_m_axi_U->BID(m_axi_a_BID);
    example_a_m_axi_U->BUSER(m_axi_a_BUSER);
    example_a_m_axi_U->ACLK(ap_clk);
    example_a_m_axi_U->ARESET(ap_rst_n_inv);
    example_a_m_axi_U->ACLK_EN(example_a_m_axi_U_ap_dummy_ce);
    example_a_m_axi_U->I_ARVALID(a_ARVALID);
    example_a_m_axi_U->I_ARREADY(a_ARREADY);
    example_a_m_axi_U->I_ARADDR(a_ARADDR);
    example_a_m_axi_U->I_ARID(a_ARID);
    example_a_m_axi_U->I_ARLEN(a_ARLEN);
    example_a_m_axi_U->I_ARSIZE(a_ARSIZE);
    example_a_m_axi_U->I_ARLOCK(a_ARLOCK);
    example_a_m_axi_U->I_ARCACHE(a_ARCACHE);
    example_a_m_axi_U->I_ARQOS(a_ARQOS);
    example_a_m_axi_U->I_ARPROT(a_ARPROT);
    example_a_m_axi_U->I_ARUSER(a_ARUSER);
    example_a_m_axi_U->I_ARBURST(a_ARBURST);
    example_a_m_axi_U->I_ARREGION(a_ARREGION);
    example_a_m_axi_U->I_RVALID(a_RVALID);
    example_a_m_axi_U->I_RREADY(a_RREADY);
    example_a_m_axi_U->I_RDATA(a_RDATA);
    example_a_m_axi_U->I_RID(a_RID);
    example_a_m_axi_U->I_RUSER(a_RUSER);
    example_a_m_axi_U->I_RRESP(a_RRESP);
    example_a_m_axi_U->I_RLAST(a_RLAST);
    example_a_m_axi_U->I_AWVALID(a_AWVALID);
    example_a_m_axi_U->I_AWREADY(a_AWREADY);
    example_a_m_axi_U->I_AWADDR(a_AWADDR);
    example_a_m_axi_U->I_AWID(a_AWID);
    example_a_m_axi_U->I_AWLEN(a_AWLEN);
    example_a_m_axi_U->I_AWSIZE(a_AWSIZE);
    example_a_m_axi_U->I_AWLOCK(a_AWLOCK);
    example_a_m_axi_U->I_AWCACHE(a_AWCACHE);
    example_a_m_axi_U->I_AWQOS(a_AWQOS);
    example_a_m_axi_U->I_AWPROT(a_AWPROT);
    example_a_m_axi_U->I_AWUSER(a_AWUSER);
    example_a_m_axi_U->I_AWBURST(a_AWBURST);
    example_a_m_axi_U->I_AWREGION(a_AWREGION);
    example_a_m_axi_U->I_WVALID(a_WVALID);
    example_a_m_axi_U->I_WREADY(a_WREADY);
    example_a_m_axi_U->I_WDATA(a_WDATA);
    example_a_m_axi_U->I_WID(a_WID);
    example_a_m_axi_U->I_WUSER(a_WUSER);
    example_a_m_axi_U->I_WLAST(a_WLAST);
    example_a_m_axi_U->I_WSTRB(a_WSTRB);
    example_a_m_axi_U->I_BVALID(a_BVALID);
    example_a_m_axi_U->I_BREADY(a_BREADY);
    example_a_m_axi_U->I_BRESP(a_BRESP);
    example_a_m_axi_U->I_BID(a_BID);
    example_a_m_axi_U->I_BUSER(a_BUSER);
    buff_U = new example_buff("buff_U");
    buff_U->clk(ap_clk);
    buff_U->reset(ap_rst_n_inv);
    buff_U->address0(buff_address0);
    buff_U->ce0(buff_ce0);
    buff_U->we0(buff_we0);
    buff_U->d0(buff_d0);
    buff_U->q0(buff_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_a_ARBURST);

    SC_METHOD(thread_a_ARCACHE);

    SC_METHOD(thread_a_ARID);

    SC_METHOD(thread_a_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_a_ARLOCK);

    SC_METHOD(thread_a_ARPROT);

    SC_METHOD(thread_a_ARQOS);

    SC_METHOD(thread_a_ARREGION);

    SC_METHOD(thread_a_ARSIZE);

    SC_METHOD(thread_a_ARUSER);

    SC_METHOD(thread_a_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_a_AWADDR);
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_a_AWBURST);

    SC_METHOD(thread_a_AWCACHE);

    SC_METHOD(thread_a_AWID);

    SC_METHOD(thread_a_AWLEN);
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_a_AWLOCK);

    SC_METHOD(thread_a_AWPROT);

    SC_METHOD(thread_a_AWQOS);

    SC_METHOD(thread_a_AWREGION);

    SC_METHOD(thread_a_AWSIZE);

    SC_METHOD(thread_a_AWUSER);

    SC_METHOD(thread_a_AWVALID);
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_a_BREADY);
    sensitive << ( a_BVALID );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_12 );

    SC_METHOD(thread_a_RREADY);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_6 );
    sensitive << ( exitcond1_reg_209 );
    sensitive << ( ap_sig_bdd_185 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_a_WDATA);
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( buff_load_1_reg_251 );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_a_WID);

    SC_METHOD(thread_a_WLAST);

    SC_METHOD(thread_a_WSTRB);
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_a_WUSER);

    SC_METHOD(thread_a_WVALID);
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( a_BVALID );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( a_BVALID );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_12 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_176);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_185);
    sensitive << ( a_RVALID );
    sensitive << ( exitcond1_reg_209 );

    SC_METHOD(thread_ap_sig_bdd_212);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_233);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_267);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_300);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_334);
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );

    SC_METHOD(thread_ap_sig_bdd_341);
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_ap_sig_bdd_353);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_454);
    sensitive << ( ap_start );
    sensitive << ( a_ARREADY );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_6);
    sensitive << ( ap_sig_bdd_176 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp1_stg0_fsm_9);
    sensitive << ( ap_sig_bdd_233 );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_7);
    sensitive << ( ap_sig_bdd_212 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_8);
    sensitive << ( ap_sig_bdd_300 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_12);
    sensitive << ( ap_sig_bdd_353 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_31 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_267 );

    SC_METHOD(thread_ap_sig_ioackin_a_ARREADY);
    sensitive << ( a_ARREADY );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_AWREADY);
    sensitive << ( a_AWREADY );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_WREADY);
    sensitive << ( a_WREADY );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_buff_address0);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( buff_addr_1_reg_232 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_9 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_8 );
    sensitive << ( tmp_fu_163_p1 );
    sensitive << ( tmp_1_fu_180_p1 );
    sensitive << ( tmp_4_fu_204_p1 );

    SC_METHOD(thread_buff_ce0);
    sensitive << ( ap_sig_bdd_185 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( ap_sig_ioackin_a_AWREADY );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_9 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_sig_ioackin_a_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_8 );

    SC_METHOD(thread_buff_d0);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( a_read_reg_218 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_8 );
    sensitive << ( tmp_2_fu_185_p2 );

    SC_METHOD(thread_buff_we0);
    sensitive << ( ap_sig_bdd_185 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_exitcond1_reg_209_pp0_it1 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_8 );

    SC_METHOD(thread_example_a_m_axi_U_ap_dummy_ce);

    SC_METHOD(thread_exitcond1_fu_151_p2);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_185 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indvar_phi_fu_120_p4 );

    SC_METHOD(thread_exitcond7_fu_192_p2);
    sensitive << ( indvar5_reg_139 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_9 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_sig_ioackin_a_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_exitcond_fu_168_p2);
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( ap_sig_ioackin_a_AWREADY );
    sensitive << ( i_reg_128 );

    SC_METHOD(thread_i_1_fu_174_p2);
    sensitive << ( i_reg_128 );

    SC_METHOD(thread_indvar_next6_fu_198_p2);
    sensitive << ( indvar5_reg_139 );

    SC_METHOD(thread_indvar_next_fu_157_p2);
    sensitive << ( indvar_phi_fu_120_p4 );

    SC_METHOD(thread_indvar_phi_fu_120_p4);
    sensitive << ( indvar_reg_116 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_6 );
    sensitive << ( exitcond1_reg_209 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indvar_next_reg_213 );

    SC_METHOD(thread_tmp_1_fu_180_p1);
    sensitive << ( i_reg_128 );

    SC_METHOD(thread_tmp_2_fu_185_p2);
    sensitive << ( buff_q0 );

    SC_METHOD(thread_tmp_4_fu_204_p1);
    sensitive << ( indvar5_reg_139 );

    SC_METHOD(thread_tmp_fu_163_p1);
    sensitive << ( ap_reg_ppstg_indvar_reg_116_pp0_it1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_BVALID );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_185 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( exitcond1_fu_151_p2 );
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( ap_sig_ioackin_a_AWREADY );
    sensitive << ( exitcond7_fu_192_p2 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_reg_ppstg_exitcond7_reg_237_pp1_it1 );
    sensitive << ( ap_sig_ioackin_a_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_sig_ioackin_a_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it2 = SC_LOGIC_0;
    ap_reg_ioackin_a_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_a_AWVALID, "(port)m_axi_a_AWVALID");
    sc_trace(mVcdFile, m_axi_a_AWREADY, "(port)m_axi_a_AWREADY");
    sc_trace(mVcdFile, m_axi_a_AWADDR, "(port)m_axi_a_AWADDR");
    sc_trace(mVcdFile, m_axi_a_AWID, "(port)m_axi_a_AWID");
    sc_trace(mVcdFile, m_axi_a_AWLEN, "(port)m_axi_a_AWLEN");
    sc_trace(mVcdFile, m_axi_a_AWSIZE, "(port)m_axi_a_AWSIZE");
    sc_trace(mVcdFile, m_axi_a_AWBURST, "(port)m_axi_a_AWBURST");
    sc_trace(mVcdFile, m_axi_a_AWLOCK, "(port)m_axi_a_AWLOCK");
    sc_trace(mVcdFile, m_axi_a_AWCACHE, "(port)m_axi_a_AWCACHE");
    sc_trace(mVcdFile, m_axi_a_AWPROT, "(port)m_axi_a_AWPROT");
    sc_trace(mVcdFile, m_axi_a_AWQOS, "(port)m_axi_a_AWQOS");
    sc_trace(mVcdFile, m_axi_a_AWREGION, "(port)m_axi_a_AWREGION");
    sc_trace(mVcdFile, m_axi_a_AWUSER, "(port)m_axi_a_AWUSER");
    sc_trace(mVcdFile, m_axi_a_WVALID, "(port)m_axi_a_WVALID");
    sc_trace(mVcdFile, m_axi_a_WREADY, "(port)m_axi_a_WREADY");
    sc_trace(mVcdFile, m_axi_a_WDATA, "(port)m_axi_a_WDATA");
    sc_trace(mVcdFile, m_axi_a_WSTRB, "(port)m_axi_a_WSTRB");
    sc_trace(mVcdFile, m_axi_a_WLAST, "(port)m_axi_a_WLAST");
    sc_trace(mVcdFile, m_axi_a_WID, "(port)m_axi_a_WID");
    sc_trace(mVcdFile, m_axi_a_WUSER, "(port)m_axi_a_WUSER");
    sc_trace(mVcdFile, m_axi_a_ARVALID, "(port)m_axi_a_ARVALID");
    sc_trace(mVcdFile, m_axi_a_ARREADY, "(port)m_axi_a_ARREADY");
    sc_trace(mVcdFile, m_axi_a_ARADDR, "(port)m_axi_a_ARADDR");
    sc_trace(mVcdFile, m_axi_a_ARID, "(port)m_axi_a_ARID");
    sc_trace(mVcdFile, m_axi_a_ARLEN, "(port)m_axi_a_ARLEN");
    sc_trace(mVcdFile, m_axi_a_ARSIZE, "(port)m_axi_a_ARSIZE");
    sc_trace(mVcdFile, m_axi_a_ARBURST, "(port)m_axi_a_ARBURST");
    sc_trace(mVcdFile, m_axi_a_ARLOCK, "(port)m_axi_a_ARLOCK");
    sc_trace(mVcdFile, m_axi_a_ARCACHE, "(port)m_axi_a_ARCACHE");
    sc_trace(mVcdFile, m_axi_a_ARPROT, "(port)m_axi_a_ARPROT");
    sc_trace(mVcdFile, m_axi_a_ARQOS, "(port)m_axi_a_ARQOS");
    sc_trace(mVcdFile, m_axi_a_ARREGION, "(port)m_axi_a_ARREGION");
    sc_trace(mVcdFile, m_axi_a_ARUSER, "(port)m_axi_a_ARUSER");
    sc_trace(mVcdFile, m_axi_a_RVALID, "(port)m_axi_a_RVALID");
    sc_trace(mVcdFile, m_axi_a_RREADY, "(port)m_axi_a_RREADY");
    sc_trace(mVcdFile, m_axi_a_RDATA, "(port)m_axi_a_RDATA");
    sc_trace(mVcdFile, m_axi_a_RLAST, "(port)m_axi_a_RLAST");
    sc_trace(mVcdFile, m_axi_a_RID, "(port)m_axi_a_RID");
    sc_trace(mVcdFile, m_axi_a_RUSER, "(port)m_axi_a_RUSER");
    sc_trace(mVcdFile, m_axi_a_RRESP, "(port)m_axi_a_RRESP");
    sc_trace(mVcdFile, m_axi_a_BVALID, "(port)m_axi_a_BVALID");
    sc_trace(mVcdFile, m_axi_a_BREADY, "(port)m_axi_a_BREADY");
    sc_trace(mVcdFile, m_axi_a_BRESP, "(port)m_axi_a_BRESP");
    sc_trace(mVcdFile, m_axi_a_BID, "(port)m_axi_a_BID");
    sc_trace(mVcdFile, m_axi_a_BUSER, "(port)m_axi_a_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_31, "ap_sig_bdd_31");
    sc_trace(mVcdFile, a_AWVALID, "a_AWVALID");
    sc_trace(mVcdFile, a_AWREADY, "a_AWREADY");
    sc_trace(mVcdFile, a_AWADDR, "a_AWADDR");
    sc_trace(mVcdFile, a_AWID, "a_AWID");
    sc_trace(mVcdFile, a_AWLEN, "a_AWLEN");
    sc_trace(mVcdFile, a_AWSIZE, "a_AWSIZE");
    sc_trace(mVcdFile, a_AWBURST, "a_AWBURST");
    sc_trace(mVcdFile, a_AWLOCK, "a_AWLOCK");
    sc_trace(mVcdFile, a_AWCACHE, "a_AWCACHE");
    sc_trace(mVcdFile, a_AWPROT, "a_AWPROT");
    sc_trace(mVcdFile, a_AWQOS, "a_AWQOS");
    sc_trace(mVcdFile, a_AWREGION, "a_AWREGION");
    sc_trace(mVcdFile, a_AWUSER, "a_AWUSER");
    sc_trace(mVcdFile, a_WVALID, "a_WVALID");
    sc_trace(mVcdFile, a_WREADY, "a_WREADY");
    sc_trace(mVcdFile, a_WDATA, "a_WDATA");
    sc_trace(mVcdFile, a_WSTRB, "a_WSTRB");
    sc_trace(mVcdFile, a_WLAST, "a_WLAST");
    sc_trace(mVcdFile, a_WID, "a_WID");
    sc_trace(mVcdFile, a_WUSER, "a_WUSER");
    sc_trace(mVcdFile, a_ARVALID, "a_ARVALID");
    sc_trace(mVcdFile, a_ARREADY, "a_ARREADY");
    sc_trace(mVcdFile, a_ARADDR, "a_ARADDR");
    sc_trace(mVcdFile, a_ARID, "a_ARID");
    sc_trace(mVcdFile, a_ARLEN, "a_ARLEN");
    sc_trace(mVcdFile, a_ARSIZE, "a_ARSIZE");
    sc_trace(mVcdFile, a_ARBURST, "a_ARBURST");
    sc_trace(mVcdFile, a_ARLOCK, "a_ARLOCK");
    sc_trace(mVcdFile, a_ARCACHE, "a_ARCACHE");
    sc_trace(mVcdFile, a_ARPROT, "a_ARPROT");
    sc_trace(mVcdFile, a_ARQOS, "a_ARQOS");
    sc_trace(mVcdFile, a_ARREGION, "a_ARREGION");
    sc_trace(mVcdFile, a_ARUSER, "a_ARUSER");
    sc_trace(mVcdFile, a_RVALID, "a_RVALID");
    sc_trace(mVcdFile, a_RREADY, "a_RREADY");
    sc_trace(mVcdFile, a_RDATA, "a_RDATA");
    sc_trace(mVcdFile, a_RLAST, "a_RLAST");
    sc_trace(mVcdFile, a_RID, "a_RID");
    sc_trace(mVcdFile, a_RUSER, "a_RUSER");
    sc_trace(mVcdFile, a_RRESP, "a_RRESP");
    sc_trace(mVcdFile, a_BVALID, "a_BVALID");
    sc_trace(mVcdFile, a_BREADY, "a_BREADY");
    sc_trace(mVcdFile, a_BRESP, "a_BRESP");
    sc_trace(mVcdFile, a_BID, "a_BID");
    sc_trace(mVcdFile, a_BUSER, "a_BUSER");
    sc_trace(mVcdFile, example_a_m_axi_U_ap_dummy_ce, "example_a_m_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, indvar_reg_116, "indvar_reg_116");
    sc_trace(mVcdFile, ap_reg_ppstg_indvar_reg_116_pp0_it1, "ap_reg_ppstg_indvar_reg_116_pp0_it1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_6, "ap_sig_cseq_ST_pp0_stg0_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_176, "ap_sig_bdd_176");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, exitcond1_reg_209, "exitcond1_reg_209");
    sc_trace(mVcdFile, ap_sig_bdd_185, "ap_sig_bdd_185");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, indvar5_reg_139, "indvar5_reg_139");
    sc_trace(mVcdFile, exitcond1_fu_151_p2, "exitcond1_fu_151_p2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond1_reg_209_pp0_it1, "ap_reg_ppstg_exitcond1_reg_209_pp0_it1");
    sc_trace(mVcdFile, indvar_next_fu_157_p2, "indvar_next_fu_157_p2");
    sc_trace(mVcdFile, indvar_next_reg_213, "indvar_next_reg_213");
    sc_trace(mVcdFile, a_read_reg_218, "a_read_reg_218");
    sc_trace(mVcdFile, exitcond_fu_168_p2, "exitcond_fu_168_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_7, "ap_sig_cseq_ST_st10_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_212, "ap_sig_bdd_212");
    sc_trace(mVcdFile, ap_sig_ioackin_a_AWREADY, "ap_sig_ioackin_a_AWREADY");
    sc_trace(mVcdFile, i_1_fu_174_p2, "i_1_fu_174_p2");
    sc_trace(mVcdFile, i_1_reg_227, "i_1_reg_227");
    sc_trace(mVcdFile, buff_addr_1_reg_232, "buff_addr_1_reg_232");
    sc_trace(mVcdFile, exitcond7_fu_192_p2, "exitcond7_fu_192_p2");
    sc_trace(mVcdFile, exitcond7_reg_237, "exitcond7_reg_237");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp1_stg0_fsm_9, "ap_sig_cseq_ST_pp1_stg0_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_233, "ap_sig_bdd_233");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it0, "ap_reg_ppiten_pp1_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it1, "ap_reg_ppiten_pp1_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond7_reg_237_pp1_it1, "ap_reg_ppstg_exitcond7_reg_237_pp1_it1");
    sc_trace(mVcdFile, ap_sig_ioackin_a_WREADY, "ap_sig_ioackin_a_WREADY");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it2, "ap_reg_ppiten_pp1_it2");
    sc_trace(mVcdFile, indvar_next6_fu_198_p2, "indvar_next6_fu_198_p2");
    sc_trace(mVcdFile, buff_q0, "buff_q0");
    sc_trace(mVcdFile, buff_load_1_reg_251, "buff_load_1_reg_251");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_267, "ap_sig_bdd_267");
    sc_trace(mVcdFile, buff_address0, "buff_address0");
    sc_trace(mVcdFile, buff_ce0, "buff_ce0");
    sc_trace(mVcdFile, buff_we0, "buff_we0");
    sc_trace(mVcdFile, buff_d0, "buff_d0");
    sc_trace(mVcdFile, indvar_phi_fu_120_p4, "indvar_phi_fu_120_p4");
    sc_trace(mVcdFile, i_reg_128, "i_reg_128");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_8, "ap_sig_cseq_ST_st11_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_300, "ap_sig_bdd_300");
    sc_trace(mVcdFile, tmp_fu_163_p1, "tmp_fu_163_p1");
    sc_trace(mVcdFile, tmp_1_fu_180_p1, "tmp_1_fu_180_p1");
    sc_trace(mVcdFile, tmp_4_fu_204_p1, "tmp_4_fu_204_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_a_ARREADY, "ap_reg_ioackin_a_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_a_ARREADY, "ap_sig_ioackin_a_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_AWREADY, "ap_reg_ioackin_a_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_WREADY, "ap_reg_ioackin_a_WREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_12, "ap_sig_cseq_ST_st17_fsm_12");
    sc_trace(mVcdFile, ap_sig_bdd_353, "ap_sig_bdd_353");
    sc_trace(mVcdFile, tmp_2_fu_185_p2, "tmp_2_fu_185_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_454, "ap_sig_bdd_454");
    sc_trace(mVcdFile, ap_sig_bdd_334, "ap_sig_bdd_334");
    sc_trace(mVcdFile, ap_sig_bdd_341, "ap_sig_bdd_341");
#endif

    }
    mHdltvinHandle.open("example.hdltvin.dat");
    mHdltvoutHandle.open("example.hdltvout.dat");
}

example::~example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete example_a_m_axi_U;
    delete buff_U;
}

void example::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
            if (!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_ARREADY.read()))) {
                ap_reg_ioackin_a_ARREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_454.read()) {
                ap_reg_ioackin_a_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_AWREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_334.read()) {
            if (!(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read()))) {
                ap_reg_ioackin_a_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_AWREADY.read())) {
                ap_reg_ioackin_a_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_WREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_341.read()) {
            if (!(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) {
                ap_reg_ioackin_a_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_WREADY.read())) {
                ap_reg_ioackin_a_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
             !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
             !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
                     !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
            ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
             !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read()))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && 
                    !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
             !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read()))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && 
                     !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read()))) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read())))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) {
            ap_reg_ppiten_pp1_it2 = ap_reg_ppiten_pp1_it1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && 
                    !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
            ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read()))) {
        i_reg_128 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read())) {
        i_reg_128 = i_1_reg_227.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && 
         !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
        indvar5_reg_139 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read()))) {
        indvar5_reg_139 = indvar_next6_fu_198_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_209.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        indvar_reg_116 = indvar_next_reg_213.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        indvar_reg_116 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && esl_seteq<1,1,1>(exitcond1_reg_209.read(), ap_const_lv1_0) && !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        a_read_reg_218 = a_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        ap_reg_ppstg_exitcond1_reg_209_pp0_it1 = exitcond1_reg_209.read();
        ap_reg_ppstg_indvar_reg_116_pp0_it1 = indvar_reg_116.read();
        exitcond1_reg_209 = exitcond1_fu_151_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())))) {
        ap_reg_ppstg_exitcond7_reg_237_pp1_it1 = exitcond7_reg_237.read();
        exitcond7_reg_237 = exitcond7_fu_192_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
        buff_addr_1_reg_232 =  (sc_lv<6>) (tmp_1_fu_180_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_237.read()))) {
        buff_load_1_reg_251 = buff_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
        i_1_reg_227 = i_1_fu_174_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        indvar_next_reg_213 = indvar_next_fu_157_p2.read();
    }
}

void example::thread_a_ARADDR() {
    a_ARADDR = ap_const_lv32_0;
}

void example::thread_a_ARBURST() {
    a_ARBURST = ap_const_lv2_0;
}

void example::thread_a_ARCACHE() {
    a_ARCACHE = ap_const_lv4_0;
}

void example::thread_a_ARID() {
    a_ARID = ap_const_lv1_0;
}

void example::thread_a_ARLEN() {
    a_ARLEN = ap_const_lv32_32;
}

void example::thread_a_ARLOCK() {
    a_ARLOCK = ap_const_lv2_0;
}

void example::thread_a_ARPROT() {
    a_ARPROT = ap_const_lv3_0;
}

void example::thread_a_ARQOS() {
    a_ARQOS = ap_const_lv4_0;
}

void example::thread_a_ARREGION() {
    a_ARREGION = ap_const_lv4_0;
}

void example::thread_a_ARSIZE() {
    a_ARSIZE = ap_const_lv3_0;
}

void example::thread_a_ARUSER() {
    a_ARUSER = ap_const_lv1_0;
}

void example::thread_a_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_ARREADY.read()))) {
        a_ARVALID = ap_const_logic_1;
    } else {
        a_ARVALID = ap_const_logic_0;
    }
}

void example::thread_a_AWADDR() {
    a_AWADDR = ap_const_lv32_0;
}

void example::thread_a_AWBURST() {
    a_AWBURST = ap_const_lv2_0;
}

void example::thread_a_AWCACHE() {
    a_AWCACHE = ap_const_lv4_0;
}

void example::thread_a_AWID() {
    a_AWID = ap_const_lv1_0;
}

void example::thread_a_AWLEN() {
    a_AWLEN = ap_const_lv32_32;
}

void example::thread_a_AWLOCK() {
    a_AWLOCK = ap_const_lv2_0;
}

void example::thread_a_AWPROT() {
    a_AWPROT = ap_const_lv3_0;
}

void example::thread_a_AWQOS() {
    a_AWQOS = ap_const_lv4_0;
}

void example::thread_a_AWREGION() {
    a_AWREGION = ap_const_lv4_0;
}

void example::thread_a_AWSIZE() {
    a_AWSIZE = ap_const_lv3_0;
}

void example::thread_a_AWUSER() {
    a_AWUSER = ap_const_lv1_0;
}

void example::thread_a_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_AWREADY.read()))) {
        a_AWVALID = ap_const_logic_1;
    } else {
        a_AWVALID = ap_const_logic_0;
    }
}

void example::thread_a_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_12.read()) && 
         !esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_0))) {
        a_BREADY = ap_const_logic_1;
    } else {
        a_BREADY = ap_const_logic_0;
    }
}

void example::thread_a_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_209.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        a_RREADY = ap_const_logic_1;
    } else {
        a_RREADY = ap_const_logic_0;
    }
}

void example::thread_a_WDATA() {
    a_WDATA = buff_load_1_reg_251.read();
}

void example::thread_a_WID() {
    a_WID = ap_const_lv1_0;
}

void example::thread_a_WLAST() {
    a_WLAST = ap_const_logic_0;
}

void example::thread_a_WSTRB() {
    a_WSTRB = ap_const_lv4_F;
}

void example::thread_a_WUSER() {
    a_WUSER = ap_const_lv1_0;
}

void example::thread_a_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_WREADY.read()))) {
        a_WVALID = ap_const_logic_1;
    } else {
        a_WVALID = ap_const_logic_0;
    }
}

void example::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_12.read()) && 
         !esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void example::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_12.read()) && 
         !esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example::thread_ap_sig_bdd_176() {
    ap_sig_bdd_176 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void example::thread_ap_sig_bdd_185() {
    ap_sig_bdd_185 = (esl_seteq<1,1,1>(a_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond1_reg_209.read(), ap_const_lv1_0));
}

void example::thread_ap_sig_bdd_212() {
    ap_sig_bdd_212 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void example::thread_ap_sig_bdd_233() {
    ap_sig_bdd_233 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void example::thread_ap_sig_bdd_267() {
    ap_sig_bdd_267 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void example::thread_ap_sig_bdd_300() {
    ap_sig_bdd_300 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void example::thread_ap_sig_bdd_31() {
    ap_sig_bdd_31 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void example::thread_ap_sig_bdd_334() {
    ap_sig_bdd_334 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()));
}

void example::thread_ap_sig_bdd_341() {
    ap_sig_bdd_341 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()));
}

void example::thread_ap_sig_bdd_353() {
    ap_sig_bdd_353 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(12, 12));
}

void example::thread_ap_sig_bdd_454() {
    ap_sig_bdd_454 = (esl_seteq<1,1,1>(ap_const_logic_1, a_ARREADY.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void example::thread_ap_sig_cseq_ST_pp0_stg0_fsm_6() {
    if (ap_sig_bdd_176.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_pp1_stg0_fsm_9() {
    if (ap_sig_bdd_233.read()) {
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st10_fsm_7() {
    if (ap_sig_bdd_212.read()) {
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st11_fsm_8() {
    if (ap_sig_bdd_300.read()) {
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st17_fsm_12() {
    if (ap_sig_bdd_353.read()) {
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_31.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_267.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_ioackin_a_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_ARREADY.read())) {
        ap_sig_ioackin_a_ARREADY = a_ARREADY.read();
    } else {
        ap_sig_ioackin_a_ARREADY = ap_const_logic_1;
    }
}

void example::thread_ap_sig_ioackin_a_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_AWREADY.read())) {
        ap_sig_ioackin_a_AWREADY = a_AWREADY.read();
    } else {
        ap_sig_ioackin_a_AWREADY = ap_const_logic_1;
    }
}

void example::thread_ap_sig_ioackin_a_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_WREADY.read())) {
        ap_sig_ioackin_a_WREADY = a_WREADY.read();
    } else {
        ap_sig_ioackin_a_WREADY = ap_const_logic_1;
    }
}

void example::thread_buff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read())) {
        buff_address0 = buff_addr_1_reg_232.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) {
        buff_address0 =  (sc_lv<6>) (tmp_fu_163_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()))) {
        buff_address0 =  (sc_lv<6>) (tmp_4_fu_204_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read())) {
        buff_address0 =  (sc_lv<6>) (tmp_1_fu_180_p1.read());
    } else {
        buff_address0 = "XXXXXX";
    }
}

void example::thread_buff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
          !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_9.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
        buff_ce0 = ap_const_logic_1;
    } else {
        buff_ce0 = ap_const_logic_0;
    }
}

void example::thread_buff_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read())) {
        buff_d0 = tmp_2_fu_185_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) {
        buff_d0 = a_read_reg_218.read();
    } else {
        buff_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void example::thread_buff_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond1_reg_209_pp0_it1.read())))) {
        buff_we0 = ap_const_logic_1;
    } else {
        buff_we0 = ap_const_logic_0;
    }
}

void example::thread_example_a_m_axi_U_ap_dummy_ce() {
    example_a_m_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void example::thread_exitcond1_fu_151_p2() {
    exitcond1_fu_151_p2 = (!indvar_phi_fu_120_p4.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(indvar_phi_fu_120_p4.read() == ap_const_lv6_32);
}

void example::thread_exitcond7_fu_192_p2() {
    exitcond7_fu_192_p2 = (!indvar5_reg_139.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(indvar5_reg_139.read() == ap_const_lv6_32);
}

void example::thread_exitcond_fu_168_p2() {
    exitcond_fu_168_p2 = (!i_reg_128.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_128.read() == ap_const_lv6_32);
}

void example::thread_i_1_fu_174_p2() {
    i_1_fu_174_p2 = (!i_reg_128.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_128.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void example::thread_indvar_next6_fu_198_p2() {
    indvar_next6_fu_198_p2 = (!indvar5_reg_139.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar5_reg_139.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void example::thread_indvar_next_fu_157_p2() {
    indvar_next_fu_157_p2 = (!indvar_phi_fu_120_p4.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar_phi_fu_120_p4.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void example::thread_indvar_phi_fu_120_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_209.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
        indvar_phi_fu_120_p4 = indvar_next_reg_213.read();
    } else {
        indvar_phi_fu_120_p4 = indvar_reg_116.read();
    }
}

void example::thread_tmp_1_fu_180_p1() {
    tmp_1_fu_180_p1 = esl_zext<64,6>(i_reg_128.read());
}

void example::thread_tmp_2_fu_185_p2() {
    tmp_2_fu_185_p2 = (!buff_q0.read().is_01() || !ap_const_lv32_64.is_01())? sc_lv<32>(): (sc_biguint<32>(buff_q0.read()) + sc_biguint<32>(ap_const_lv32_64));
}

void example::thread_tmp_4_fu_204_p1() {
    tmp_4_fu_204_p1 = esl_zext<64,6>(indvar5_reg_139.read());
}

void example::thread_tmp_fu_163_p1() {
    tmp_fu_163_p1 = esl_zext<64,6>(ap_reg_ppstg_indvar_reg_116_pp0_it1.read());
}

void example::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_ARREADY.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !(ap_sig_bdd_185.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_151_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st10_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            }
            break;
        case 128 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && !(!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_st11_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_7;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_7;
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
  !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond7_reg_237_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_192_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_st15_fsm_10;
            } else {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st16_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st17_fsm_12;
            break;
        case 4096 : 
            if (!esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st17_fsm_12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWVALID\" :  \"" << m_axi_a_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_AWREADY\" :  \"" << m_axi_a_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWADDR\" :  \"" << m_axi_a_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWID\" :  \"" << m_axi_a_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWLEN\" :  \"" << m_axi_a_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWSIZE\" :  \"" << m_axi_a_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWBURST\" :  \"" << m_axi_a_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWLOCK\" :  \"" << m_axi_a_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWCACHE\" :  \"" << m_axi_a_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWPROT\" :  \"" << m_axi_a_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWQOS\" :  \"" << m_axi_a_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWREGION\" :  \"" << m_axi_a_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWUSER\" :  \"" << m_axi_a_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WVALID\" :  \"" << m_axi_a_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_WREADY\" :  \"" << m_axi_a_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WDATA\" :  \"" << m_axi_a_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WSTRB\" :  \"" << m_axi_a_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WLAST\" :  \"" << m_axi_a_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WID\" :  \"" << m_axi_a_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WUSER\" :  \"" << m_axi_a_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARVALID\" :  \"" << m_axi_a_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_ARREADY\" :  \"" << m_axi_a_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARADDR\" :  \"" << m_axi_a_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARID\" :  \"" << m_axi_a_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARLEN\" :  \"" << m_axi_a_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARSIZE\" :  \"" << m_axi_a_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARBURST\" :  \"" << m_axi_a_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARLOCK\" :  \"" << m_axi_a_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARCACHE\" :  \"" << m_axi_a_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARPROT\" :  \"" << m_axi_a_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARQOS\" :  \"" << m_axi_a_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARREGION\" :  \"" << m_axi_a_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARUSER\" :  \"" << m_axi_a_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RVALID\" :  \"" << m_axi_a_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_RREADY\" :  \"" << m_axi_a_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RDATA\" :  \"" << m_axi_a_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RLAST\" :  \"" << m_axi_a_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RID\" :  \"" << m_axi_a_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RUSER\" :  \"" << m_axi_a_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RRESP\" :  \"" << m_axi_a_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BVALID\" :  \"" << m_axi_a_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_BREADY\" :  \"" << m_axi_a_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BRESP\" :  \"" << m_axi_a_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BID\" :  \"" << m_axi_a_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BUSER\" :  \"" << m_axi_a_BUSER.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

