// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.666637,HLS_SYN_LAT=213,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=644,HLS_SYN_LUT=722}" *)

module example (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_a_AWVALID,
        m_axi_a_AWREADY,
        m_axi_a_AWADDR,
        m_axi_a_AWID,
        m_axi_a_AWLEN,
        m_axi_a_AWSIZE,
        m_axi_a_AWBURST,
        m_axi_a_AWLOCK,
        m_axi_a_AWCACHE,
        m_axi_a_AWPROT,
        m_axi_a_AWQOS,
        m_axi_a_AWREGION,
        m_axi_a_AWUSER,
        m_axi_a_WVALID,
        m_axi_a_WREADY,
        m_axi_a_WDATA,
        m_axi_a_WSTRB,
        m_axi_a_WLAST,
        m_axi_a_WID,
        m_axi_a_WUSER,
        m_axi_a_ARVALID,
        m_axi_a_ARREADY,
        m_axi_a_ARADDR,
        m_axi_a_ARID,
        m_axi_a_ARLEN,
        m_axi_a_ARSIZE,
        m_axi_a_ARBURST,
        m_axi_a_ARLOCK,
        m_axi_a_ARCACHE,
        m_axi_a_ARPROT,
        m_axi_a_ARQOS,
        m_axi_a_ARREGION,
        m_axi_a_ARUSER,
        m_axi_a_RVALID,
        m_axi_a_RREADY,
        m_axi_a_RDATA,
        m_axi_a_RLAST,
        m_axi_a_RID,
        m_axi_a_RUSER,
        m_axi_a_RRESP,
        m_axi_a_BVALID,
        m_axi_a_BREADY,
        m_axi_a_BRESP,
        m_axi_a_BID,
        m_axi_a_BUSER
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 13'b1;
parameter    ap_ST_st2_fsm_1 = 13'b10;
parameter    ap_ST_st3_fsm_2 = 13'b100;
parameter    ap_ST_st4_fsm_3 = 13'b1000;
parameter    ap_ST_st5_fsm_4 = 13'b10000;
parameter    ap_ST_st6_fsm_5 = 13'b100000;
parameter    ap_ST_pp0_stg0_fsm_6 = 13'b1000000;
parameter    ap_ST_st10_fsm_7 = 13'b10000000;
parameter    ap_ST_st11_fsm_8 = 13'b100000000;
parameter    ap_ST_pp1_stg0_fsm_9 = 13'b1000000000;
parameter    ap_ST_st15_fsm_10 = 13'b10000000000;
parameter    ap_ST_st16_fsm_11 = 13'b100000000000;
parameter    ap_ST_st17_fsm_12 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_M_AXI_A_ID_WIDTH = 1;
parameter    C_M_AXI_A_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUSER_WIDTH = 1;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_A_TARGET_ADDR = 0;
parameter    C_M_AXI_A_USER_VALUE = 0;
parameter    C_M_AXI_A_PROT_VALUE = 0;
parameter    C_M_AXI_A_CACHE_VALUE = 3;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_true = 1'b1;
parameter    C_M_AXI_A_WSTRB_WIDTH = (C_M_AXI_A_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_a_AWVALID;
input   m_axi_a_AWREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1 : 0] m_axi_a_AWADDR;
output  [C_M_AXI_A_ID_WIDTH - 1 : 0] m_axi_a_AWID;
output  [7:0] m_axi_a_AWLEN;
output  [2:0] m_axi_a_AWSIZE;
output  [1:0] m_axi_a_AWBURST;
output  [1:0] m_axi_a_AWLOCK;
output  [3:0] m_axi_a_AWCACHE;
output  [2:0] m_axi_a_AWPROT;
output  [3:0] m_axi_a_AWQOS;
output  [3:0] m_axi_a_AWREGION;
output  [C_M_AXI_A_AWUSER_WIDTH - 1 : 0] m_axi_a_AWUSER;
output   m_axi_a_WVALID;
input   m_axi_a_WREADY;
output  [C_M_AXI_A_DATA_WIDTH - 1 : 0] m_axi_a_WDATA;
output  [C_M_AXI_A_WSTRB_WIDTH - 1 : 0] m_axi_a_WSTRB;
output   m_axi_a_WLAST;
output  [C_M_AXI_A_ID_WIDTH - 1 : 0] m_axi_a_WID;
output  [C_M_AXI_A_WUSER_WIDTH - 1 : 0] m_axi_a_WUSER;
output   m_axi_a_ARVALID;
input   m_axi_a_ARREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1 : 0] m_axi_a_ARADDR;
output  [C_M_AXI_A_ID_WIDTH - 1 : 0] m_axi_a_ARID;
output  [7:0] m_axi_a_ARLEN;
output  [2:0] m_axi_a_ARSIZE;
output  [1:0] m_axi_a_ARBURST;
output  [1:0] m_axi_a_ARLOCK;
output  [3:0] m_axi_a_ARCACHE;
output  [2:0] m_axi_a_ARPROT;
output  [3:0] m_axi_a_ARQOS;
output  [3:0] m_axi_a_ARREGION;
output  [C_M_AXI_A_ARUSER_WIDTH - 1 : 0] m_axi_a_ARUSER;
input   m_axi_a_RVALID;
output   m_axi_a_RREADY;
input  [C_M_AXI_A_DATA_WIDTH - 1 : 0] m_axi_a_RDATA;
input   m_axi_a_RLAST;
input  [C_M_AXI_A_ID_WIDTH - 1 : 0] m_axi_a_RID;
input  [C_M_AXI_A_RUSER_WIDTH - 1 : 0] m_axi_a_RUSER;
input  [1:0] m_axi_a_RRESP;
input   m_axi_a_BVALID;
output   m_axi_a_BREADY;
input  [1:0] m_axi_a_BRESP;
input  [C_M_AXI_A_ID_WIDTH - 1 : 0] m_axi_a_BID;
input  [C_M_AXI_A_BUSER_WIDTH - 1 : 0] m_axi_a_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm = 13'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_31;
reg    a_AWVALID;
wire    a_AWREADY;
wire   [31:0] a_AWADDR;
wire   [0:0] a_AWID;
wire   [31:0] a_AWLEN;
wire   [2:0] a_AWSIZE;
wire   [1:0] a_AWBURST;
wire   [1:0] a_AWLOCK;
wire   [3:0] a_AWCACHE;
wire   [2:0] a_AWPROT;
wire   [3:0] a_AWQOS;
wire   [3:0] a_AWREGION;
wire   [0:0] a_AWUSER;
reg    a_WVALID;
wire    a_WREADY;
wire   [31:0] a_WDATA;
wire   [3:0] a_WSTRB;
wire    a_WLAST;
wire   [0:0] a_WID;
wire   [0:0] a_WUSER;
reg    a_ARVALID;
wire    a_ARREADY;
wire   [31:0] a_ARADDR;
wire   [0:0] a_ARID;
wire   [31:0] a_ARLEN;
wire   [2:0] a_ARSIZE;
wire   [1:0] a_ARBURST;
wire   [1:0] a_ARLOCK;
wire   [3:0] a_ARCACHE;
wire   [2:0] a_ARPROT;
wire   [3:0] a_ARQOS;
wire   [3:0] a_ARREGION;
wire   [0:0] a_ARUSER;
wire    a_RVALID;
reg    a_RREADY;
wire   [31:0] a_RDATA;
wire    a_RLAST;
wire   [0:0] a_RID;
wire   [0:0] a_RUSER;
wire   [1:0] a_RRESP;
wire    a_BVALID;
reg    a_BREADY;
wire   [1:0] a_BRESP;
wire   [0:0] a_BID;
wire   [0:0] a_BUSER;
wire    example_a_m_axi_U_ap_dummy_ce;
reg   [5:0] indvar_reg_116;
reg   [5:0] ap_reg_ppstg_indvar_reg_116_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_6;
reg    ap_sig_bdd_176;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg   [0:0] exitcond1_reg_209;
reg    ap_sig_bdd_185;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [5:0] indvar5_reg_139;
wire   [0:0] exitcond1_fu_151_p2;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_209_pp0_it1;
wire   [5:0] indvar_next_fu_157_p2;
reg   [5:0] indvar_next_reg_213;
reg   [31:0] a_read_reg_218;
wire   [0:0] exitcond_fu_168_p2;
reg    ap_sig_cseq_ST_st10_fsm_7;
reg    ap_sig_bdd_212;
reg    ap_sig_ioackin_a_AWREADY;
wire   [5:0] i_1_fu_174_p2;
reg   [5:0] i_1_reg_227;
reg   [5:0] buff_addr_1_reg_232;
wire   [0:0] exitcond7_fu_192_p2;
reg   [0:0] exitcond7_reg_237;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_9;
reg    ap_sig_bdd_233;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond7_reg_237_pp1_it1;
reg    ap_sig_ioackin_a_WREADY;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
wire   [5:0] indvar_next6_fu_198_p2;
wire   [31:0] buff_q0;
reg   [31:0] buff_load_1_reg_251;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_267;
reg   [5:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
reg   [31:0] buff_d0;
reg   [5:0] indvar_phi_fu_120_p4;
reg   [5:0] i_reg_128;
reg    ap_sig_cseq_ST_st11_fsm_8;
reg    ap_sig_bdd_300;
wire   [63:0] tmp_fu_163_p1;
wire   [63:0] tmp_1_fu_180_p1;
wire   [63:0] tmp_4_fu_204_p1;
reg    ap_reg_ioackin_a_ARREADY = 1'b0;
reg    ap_sig_ioackin_a_ARREADY;
reg    ap_reg_ioackin_a_AWREADY = 1'b0;
reg    ap_reg_ioackin_a_WREADY = 1'b0;
reg    ap_sig_cseq_ST_st17_fsm_12;
reg    ap_sig_bdd_353;
wire   [31:0] tmp_2_fu_185_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_sig_bdd_454;
reg    ap_sig_bdd_334;
reg    ap_sig_bdd_341;


example_a_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_ID_WIDTH( C_M_AXI_A_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_A_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_A_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_A_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_A_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_A_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_A_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_A_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_A_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_CACHE_VALUE ))
example_a_m_axi_U(
    .AWVALID( m_axi_a_AWVALID ),
    .AWREADY( m_axi_a_AWREADY ),
    .AWADDR( m_axi_a_AWADDR ),
    .AWID( m_axi_a_AWID ),
    .AWLEN( m_axi_a_AWLEN ),
    .AWSIZE( m_axi_a_AWSIZE ),
    .AWBURST( m_axi_a_AWBURST ),
    .AWLOCK( m_axi_a_AWLOCK ),
    .AWCACHE( m_axi_a_AWCACHE ),
    .AWPROT( m_axi_a_AWPROT ),
    .AWQOS( m_axi_a_AWQOS ),
    .AWREGION( m_axi_a_AWREGION ),
    .AWUSER( m_axi_a_AWUSER ),
    .WVALID( m_axi_a_WVALID ),
    .WREADY( m_axi_a_WREADY ),
    .WDATA( m_axi_a_WDATA ),
    .WSTRB( m_axi_a_WSTRB ),
    .WLAST( m_axi_a_WLAST ),
    .WID( m_axi_a_WID ),
    .WUSER( m_axi_a_WUSER ),
    .ARVALID( m_axi_a_ARVALID ),
    .ARREADY( m_axi_a_ARREADY ),
    .ARADDR( m_axi_a_ARADDR ),
    .ARID( m_axi_a_ARID ),
    .ARLEN( m_axi_a_ARLEN ),
    .ARSIZE( m_axi_a_ARSIZE ),
    .ARBURST( m_axi_a_ARBURST ),
    .ARLOCK( m_axi_a_ARLOCK ),
    .ARCACHE( m_axi_a_ARCACHE ),
    .ARPROT( m_axi_a_ARPROT ),
    .ARQOS( m_axi_a_ARQOS ),
    .ARREGION( m_axi_a_ARREGION ),
    .ARUSER( m_axi_a_ARUSER ),
    .RVALID( m_axi_a_RVALID ),
    .RREADY( m_axi_a_RREADY ),
    .RDATA( m_axi_a_RDATA ),
    .RLAST( m_axi_a_RLAST ),
    .RID( m_axi_a_RID ),
    .RUSER( m_axi_a_RUSER ),
    .RRESP( m_axi_a_RRESP ),
    .BVALID( m_axi_a_BVALID ),
    .BREADY( m_axi_a_BREADY ),
    .BRESP( m_axi_a_BRESP ),
    .BID( m_axi_a_BID ),
    .BUSER( m_axi_a_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( example_a_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( a_ARVALID ),
    .I_ARREADY( a_ARREADY ),
    .I_ARADDR( a_ARADDR ),
    .I_ARID( a_ARID ),
    .I_ARLEN( a_ARLEN ),
    .I_ARSIZE( a_ARSIZE ),
    .I_ARLOCK( a_ARLOCK ),
    .I_ARCACHE( a_ARCACHE ),
    .I_ARQOS( a_ARQOS ),
    .I_ARPROT( a_ARPROT ),
    .I_ARUSER( a_ARUSER ),
    .I_ARBURST( a_ARBURST ),
    .I_ARREGION( a_ARREGION ),
    .I_RVALID( a_RVALID ),
    .I_RREADY( a_RREADY ),
    .I_RDATA( a_RDATA ),
    .I_RID( a_RID ),
    .I_RUSER( a_RUSER ),
    .I_RRESP( a_RRESP ),
    .I_RLAST( a_RLAST ),
    .I_AWVALID( a_AWVALID ),
    .I_AWREADY( a_AWREADY ),
    .I_AWADDR( a_AWADDR ),
    .I_AWID( a_AWID ),
    .I_AWLEN( a_AWLEN ),
    .I_AWSIZE( a_AWSIZE ),
    .I_AWLOCK( a_AWLOCK ),
    .I_AWCACHE( a_AWCACHE ),
    .I_AWQOS( a_AWQOS ),
    .I_AWPROT( a_AWPROT ),
    .I_AWUSER( a_AWUSER ),
    .I_AWBURST( a_AWBURST ),
    .I_AWREGION( a_AWREGION ),
    .I_WVALID( a_WVALID ),
    .I_WREADY( a_WREADY ),
    .I_WDATA( a_WDATA ),
    .I_WID( a_WID ),
    .I_WUSER( a_WUSER ),
    .I_WLAST( a_WLAST ),
    .I_WSTRB( a_WSTRB ),
    .I_BVALID( a_BVALID ),
    .I_BREADY( a_BREADY ),
    .I_BRESP( a_BRESP ),
    .I_BID( a_BID ),
    .I_BUSER( a_BUSER )
);

example_buff #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
buff_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( buff_address0 ),
    .ce0( buff_ce0 ),
    .we0( buff_we0 ),
    .d0( buff_d0 ),
    .q0( buff_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_a_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_a_ARREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_a_ARREADY))) begin
                ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_454) begin
                ap_reg_ioackin_a_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_a_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_a_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_334) begin
            if (~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY))) begin
                ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == a_AWREADY)) begin
                ap_reg_ioackin_a_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_a_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_a_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_341) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
                ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == a_WREADY)) begin
                ap_reg_ioackin_a_WREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond1_fu_151_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond7_fu_192_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond7_fu_192_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY))) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond7_fu_192_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
            ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2))) begin
        i_reg_128 <= ap_const_lv6_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8)) begin
        i_reg_128 <= i_1_reg_227;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
        indvar5_reg_139 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond7_fu_192_p2))) begin
        indvar5_reg_139 <= indvar_next6_fu_198_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond1_reg_209 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_reg_116 <= indvar_next_reg_213;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        indvar_reg_116 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond1_reg_209 == ap_const_lv1_0) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_read_reg_218 <= a_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_reg_ppstg_exitcond1_reg_209_pp0_it1 <= exitcond1_reg_209;
        ap_reg_ppstg_indvar_reg_116_pp0_it1 <= indvar_reg_116;
        exitcond1_reg_209 <= exitcond1_fu_151_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        ap_reg_ppstg_exitcond7_reg_237_pp1_it1 <= exitcond7_reg_237;
        exitcond7_reg_237 <= exitcond7_fu_192_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & (ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
        buff_addr_1_reg_232 <= tmp_1_fu_180_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond7_reg_237))) begin
        buff_load_1_reg_251 <= buff_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
        i_1_reg_227 <= i_1_fu_174_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_next_reg_213 <= indvar_next_fu_157_p2;
    end
end

/// a_ARVALID assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_reg_ioackin_a_ARREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_a_ARREADY))) begin
        a_ARVALID = ap_const_logic_1;
    end else begin
        a_ARVALID = ap_const_logic_0;
    end
end

/// a_AWVALID assign process. ///
always @ (exitcond_fu_168_p2 or ap_sig_cseq_ST_st10_fsm_7 or ap_reg_ioackin_a_AWREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_reg_ioackin_a_AWREADY))) begin
        a_AWVALID = ap_const_logic_1;
    end else begin
        a_AWVALID = ap_const_logic_0;
    end
end

/// a_BREADY assign process. ///
always @ (a_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(a_BVALID == ap_const_logic_0))) begin
        a_BREADY = ap_const_logic_1;
    end else begin
        a_BREADY = ap_const_logic_0;
    end
end

/// a_RREADY assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_6 or exitcond1_reg_209 or ap_sig_bdd_185 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond1_reg_209 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_RREADY = ap_const_logic_1;
    end else begin
        a_RREADY = ap_const_logic_0;
    end
end

/// a_WVALID assign process. ///
always @ (ap_reg_ppstg_exitcond7_reg_237_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ioackin_a_WREADY)
begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & (ap_const_logic_0 == ap_reg_ioackin_a_WREADY))) begin
        a_WVALID = ap_const_logic_1;
    end else begin
        a_WVALID = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (a_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(a_BVALID == ap_const_logic_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (a_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(a_BVALID == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. ///
always @ (ap_sig_bdd_176)
begin
    if (ap_sig_bdd_176) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp1_stg0_fsm_9 assign process. ///
always @ (ap_sig_bdd_233)
begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_7 assign process. ///
always @ (ap_sig_bdd_212)
begin
    if (ap_sig_bdd_212) begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_8 assign process. ///
always @ (ap_sig_bdd_300)
begin
    if (ap_sig_bdd_300) begin
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_12 assign process. ///
always @ (ap_sig_bdd_353)
begin
    if (ap_sig_bdd_353) begin
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_31)
begin
    if (ap_sig_bdd_31) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_267)
begin
    if (ap_sig_bdd_267) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_a_ARREADY assign process. ///
always @ (a_ARREADY or ap_reg_ioackin_a_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_a_ARREADY)) begin
        ap_sig_ioackin_a_ARREADY = a_ARREADY;
    end else begin
        ap_sig_ioackin_a_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_a_AWREADY assign process. ///
always @ (a_AWREADY or ap_reg_ioackin_a_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_a_AWREADY)) begin
        ap_sig_ioackin_a_AWREADY = a_AWREADY;
    end else begin
        ap_sig_ioackin_a_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_a_WREADY assign process. ///
always @ (a_WREADY or ap_reg_ioackin_a_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_a_WREADY)) begin
        ap_sig_ioackin_a_WREADY = a_WREADY;
    end else begin
        ap_sig_ioackin_a_WREADY = ap_const_logic_1;
    end
end

/// buff_address0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2 or ap_sig_cseq_ST_st10_fsm_7 or buff_addr_1_reg_232 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it0 or ap_sig_cseq_ST_st11_fsm_8 or tmp_fu_163_p1 or tmp_1_fu_180_p1 or tmp_4_fu_204_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8)) begin
        buff_address0 = buff_addr_1_reg_232;
    end else if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        buff_address0 = tmp_fu_163_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        buff_address0 = tmp_4_fu_204_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7)) begin
        buff_address0 = tmp_1_fu_180_p1;
    end else begin
        buff_address0 = 'bx;
    end
end

/// buff_ce0 assign process. ///
always @ (ap_sig_bdd_185 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or exitcond_fu_168_p2 or ap_sig_cseq_ST_st10_fsm_7 or ap_sig_ioackin_a_AWREADY or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it0 or ap_reg_ppstg_exitcond7_reg_237_pp1_it1 or ap_sig_ioackin_a_WREADY or ap_reg_ppiten_pp1_it2 or ap_sig_cseq_ST_st11_fsm_8)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY))) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        buff_ce0 = ap_const_logic_1;
    end else begin
        buff_ce0 = ap_const_logic_0;
    end
end

/// buff_d0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2 or a_read_reg_218 or ap_sig_cseq_ST_st11_fsm_8 or tmp_2_fu_185_p2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8)) begin
        buff_d0 = tmp_2_fu_185_p2;
    end else if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        buff_d0 = a_read_reg_218;
    end else begin
        buff_d0 = 'bx;
    end
end

/// buff_we0 assign process. ///
always @ (ap_sig_bdd_185 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond1_reg_209_pp0_it1 or ap_sig_cseq_ST_st11_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_209_pp0_it1)))) begin
        buff_we0 = ap_const_logic_1;
    end else begin
        buff_we0 = ap_const_logic_0;
    end
end

/// indvar_phi_fu_120_p4 assign process. ///
always @ (indvar_reg_116 or ap_sig_cseq_ST_pp0_stg0_fsm_6 or exitcond1_reg_209 or ap_reg_ppiten_pp0_it1 or indvar_next_reg_213)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond1_reg_209 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        indvar_phi_fu_120_p4 = indvar_next_reg_213;
    end else begin
        indvar_phi_fu_120_p4 = indvar_reg_116;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or a_BVALID or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_185 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or exitcond1_fu_151_p2 or exitcond_fu_168_p2 or ap_sig_ioackin_a_AWREADY or exitcond7_fu_192_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppstg_exitcond7_reg_237_pp1_it1 or ap_sig_ioackin_a_WREADY or ap_reg_ppiten_pp1_it2 or ap_sig_ioackin_a_ARREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_a_ARREADY))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
        end
        ap_ST_pp0_stg0_fsm_6 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_185 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            end
        end
        ap_ST_st10_fsm_7 : 
        begin
            if ((~(ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            end else if (((ap_const_lv1_0 == exitcond_fu_168_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_168_p2) & (ap_const_logic_0 == ap_sig_ioackin_a_AWREADY)))) begin
                ap_NS_fsm = ap_ST_st11_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end
        end
        ap_ST_st11_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_7;
        end
        ap_ST_pp1_stg0_fsm_9 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond7_fu_192_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_a_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond7_fu_192_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st15_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            end
        end
        ap_ST_st15_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_11;
        end
        ap_ST_st16_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_12;
        end
        ap_ST_st17_fsm_12 : 
        begin
            if (~(a_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_12;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_ARADDR = ap_const_lv32_0;
assign a_ARBURST = ap_const_lv2_0;
assign a_ARCACHE = ap_const_lv4_0;
assign a_ARID = ap_const_lv1_0;
assign a_ARLEN = ap_const_lv32_32;
assign a_ARLOCK = ap_const_lv2_0;
assign a_ARPROT = ap_const_lv3_0;
assign a_ARQOS = ap_const_lv4_0;
assign a_ARREGION = ap_const_lv4_0;
assign a_ARSIZE = ap_const_lv3_0;
assign a_ARUSER = ap_const_lv1_0;
assign a_AWADDR = ap_const_lv32_0;
assign a_AWBURST = ap_const_lv2_0;
assign a_AWCACHE = ap_const_lv4_0;
assign a_AWID = ap_const_lv1_0;
assign a_AWLEN = ap_const_lv32_32;
assign a_AWLOCK = ap_const_lv2_0;
assign a_AWPROT = ap_const_lv3_0;
assign a_AWQOS = ap_const_lv4_0;
assign a_AWREGION = ap_const_lv4_0;
assign a_AWSIZE = ap_const_lv3_0;
assign a_AWUSER = ap_const_lv1_0;
assign a_WDATA = buff_load_1_reg_251;
assign a_WID = ap_const_lv1_0;
assign a_WLAST = ap_const_logic_0;
assign a_WSTRB = ap_const_lv4_F;
assign a_WUSER = ap_const_lv1_0;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_176 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_176 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_185 assign process. ///
always @ (a_RVALID or exitcond1_reg_209)
begin
    ap_sig_bdd_185 = ((a_RVALID == ap_const_logic_0) & (exitcond1_reg_209 == ap_const_lv1_0));
end

/// ap_sig_bdd_212 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_212 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_233 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_267 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_267 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_300 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_300 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_31 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_31 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_334 assign process. ///
always @ (exitcond_fu_168_p2 or ap_sig_cseq_ST_st10_fsm_7)
begin
    ap_sig_bdd_334 = ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_lv1_0 == exitcond_fu_168_p2));
end

/// ap_sig_bdd_341 assign process. ///
always @ (ap_reg_ppstg_exitcond7_reg_237_pp1_it1 or ap_reg_ppiten_pp1_it2)
begin
    ap_sig_bdd_341 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond7_reg_237_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2));
end

/// ap_sig_bdd_353 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_353 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_454 assign process. ///
always @ (ap_start or a_ARREADY)
begin
    ap_sig_bdd_454 = ((ap_const_logic_1 == a_ARREADY) & ~(ap_start == ap_const_logic_0));
end
assign example_a_m_axi_U_ap_dummy_ce = ap_const_logic_1;
assign exitcond1_fu_151_p2 = (indvar_phi_fu_120_p4 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond7_fu_192_p2 = (indvar5_reg_139 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond_fu_168_p2 = (i_reg_128 == ap_const_lv6_32? 1'b1: 1'b0);
assign i_1_fu_174_p2 = (i_reg_128 + ap_const_lv6_1);
assign indvar_next6_fu_198_p2 = (indvar5_reg_139 + ap_const_lv6_1);
assign indvar_next_fu_157_p2 = (indvar_phi_fu_120_p4 + ap_const_lv6_1);
assign tmp_1_fu_180_p1 = i_reg_128;
assign tmp_2_fu_185_p2 = (buff_q0 + ap_const_lv32_64);
assign tmp_4_fu_204_p1 = indvar5_reg_139;
assign tmp_fu_163_p1 = ap_reg_ppstg_indvar_reg_116_pp0_it1;


endmodule //example

