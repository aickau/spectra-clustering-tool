-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_M_AXI_P_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_P_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_P_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_P_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_p_AWVALID : OUT STD_LOGIC;
    m_axi_p_AWREADY : IN STD_LOGIC;
    m_axi_p_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ADDR_WIDTH-1 downto 0);
    m_axi_p_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_AWUSER_WIDTH-1 downto 0);
    m_axi_p_WVALID : OUT STD_LOGIC;
    m_axi_p_WREADY : IN STD_LOGIC;
    m_axi_p_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH-1 downto 0);
    m_axi_p_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH/8-1 downto 0);
    m_axi_p_WLAST : OUT STD_LOGIC;
    m_axi_p_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_WUSER_WIDTH-1 downto 0);
    m_axi_p_ARVALID : OUT STD_LOGIC;
    m_axi_p_ARREADY : IN STD_LOGIC;
    m_axi_p_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ADDR_WIDTH-1 downto 0);
    m_axi_p_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ARUSER_WIDTH-1 downto 0);
    m_axi_p_RVALID : IN STD_LOGIC;
    m_axi_p_RREADY : OUT STD_LOGIC;
    m_axi_p_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH-1 downto 0);
    m_axi_p_RLAST : IN STD_LOGIC;
    m_axi_p_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P_RUSER_WIDTH-1 downto 0);
    m_axi_p_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_BVALID : IN STD_LOGIC;
    m_axi_p_BREADY : OUT STD_LOGIC;
    m_axi_p_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P_BUSER_WIDTH-1 downto 0);
    m_axi_a_AWVALID : OUT STD_LOGIC;
    m_axi_a_AWREADY : IN STD_LOGIC;
    m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_a_WVALID : OUT STD_LOGIC;
    m_axi_a_WREADY : IN STD_LOGIC;
    m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_a_WLAST : OUT STD_LOGIC;
    m_axi_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_a_ARVALID : OUT STD_LOGIC;
    m_axi_a_ARREADY : IN STD_LOGIC;
    m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_a_RVALID : IN STD_LOGIC;
    m_axi_a_RREADY : OUT STD_LOGIC;
    m_axi_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_RLAST : IN STD_LOGIC;
    m_axi_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BVALID : IN STD_LOGIC;
    m_axi_a_BREADY : OUT STD_LOGIC;
    m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=341,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1344,HLS_SYN_LUT=1396}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_pp0_stg0_fsm_6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_st14_fsm_11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_st15_fsm_12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_pp1_stg0_fsm_13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_st19_fsm_14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_st20_fsm_15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_st21_fsm_16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_st22_fsm_17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_st23_fsm_18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_st24_fsm_19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_st25_fsm_20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_st26_fsm_21 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_st27_fsm_22 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_st28_fsm_23 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_st29_fsm_24 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_25 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_st33_fsm_26 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_st34_fsm_27 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_st35_fsm_28 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_st36_fsm_29 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal p_AWVALID : STD_LOGIC;
    signal p_AWREADY : STD_LOGIC;
    signal p_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal p_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_WVALID : STD_LOGIC;
    signal p_WREADY : STD_LOGIC;
    signal p_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal p_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal p_WLAST : STD_LOGIC;
    signal p_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ARVALID : STD_LOGIC;
    signal p_ARREADY : STD_LOGIC;
    signal p_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RVALID : STD_LOGIC;
    signal p_RREADY : STD_LOGIC;
    signal p_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal p_RLAST : STD_LOGIC;
    signal p_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p_BVALID : STD_LOGIC;
    signal p_BREADY : STD_LOGIC;
    signal p_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal example_p_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal a_AWVALID : STD_LOGIC;
    signal a_AWREADY : STD_LOGIC;
    signal a_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_WVALID : STD_LOGIC;
    signal a_WREADY : STD_LOGIC;
    signal a_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal a_WLAST : STD_LOGIC;
    signal a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ARVALID : STD_LOGIC;
    signal a_ARREADY : STD_LOGIC;
    signal a_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RVALID : STD_LOGIC;
    signal a_RREADY : STD_LOGIC;
    signal a_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_RLAST : STD_LOGIC;
    signal a_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BVALID : STD_LOGIC;
    signal a_BREADY : STD_LOGIC;
    signal a_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal example_a_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_260 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_indvar_reg_260_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_312 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_321 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar8_reg_272 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar8_reg_272_pp1_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_337 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond2_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_345 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar1_reg_295 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_362 : BOOLEAN;
    signal ap_sig_cseq_ST_pp2_stg0_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_369 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal exitcond3_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_554_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_a_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal exitcond1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_412_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_next_reg_416 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_read_reg_421 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_426_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next9_fu_335_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next9_reg_430 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_read_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_416 : BOOLEAN;
    signal tmp_1_fu_346_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_425 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal paramBuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_load_1_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_load_2_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_load_3_reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_455 : BOOLEAN;
    signal paramBuf_load_4_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_471 : BOOLEAN;
    signal paramBuf_load_5_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_load_6_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_load_7_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_484 : BOOLEAN;
    signal paramBuf_load_8_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_v_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_v_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_495 : BOOLEAN;
    signal exitcond_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_504 : BOOLEAN;
    signal ap_sig_ioackin_a_AWREADY : STD_LOGIC;
    signal i_1_fu_379_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_539 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_addr_1_reg_544 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_525 : BOOLEAN;
    signal exitcond3_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_401_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_542 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_554 : BOOLEAN;
    signal buff_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal paramBuf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal paramBuf_ce0 : STD_LOGIC;
    signal paramBuf_we0 : STD_LOGIC;
    signal paramBuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal paramBuf_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal paramBuf_ce1 : STD_LOGIC;
    signal indvar_phi_fu_264_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar8_phi_fu_276_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_284 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_604 : BOOLEAN;
    signal tmp_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_p_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_p_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_a_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_a_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_653 : BOOLEAN;
    signal ap_reg_ioackin_a_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_a_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st36_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_685 : BOOLEAN;
    signal tmp_5_fu_350_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_358_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_bdd_666 : BOOLEAN;
    signal ap_sig_bdd_673 : BOOLEAN;
    signal ap_sig_bdd_870 : BOOLEAN;

    component example_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_paramBuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component example_p_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component example_a_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    example_p_m_axi_U : component example_p_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_P_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_P_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_P_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_P_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_P_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_P_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_P_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_P_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_P_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_P_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p_AWVALID,
        AWREADY => m_axi_p_AWREADY,
        AWADDR => m_axi_p_AWADDR,
        AWID => m_axi_p_AWID,
        AWLEN => m_axi_p_AWLEN,
        AWSIZE => m_axi_p_AWSIZE,
        AWBURST => m_axi_p_AWBURST,
        AWLOCK => m_axi_p_AWLOCK,
        AWCACHE => m_axi_p_AWCACHE,
        AWPROT => m_axi_p_AWPROT,
        AWQOS => m_axi_p_AWQOS,
        AWREGION => m_axi_p_AWREGION,
        AWUSER => m_axi_p_AWUSER,
        WVALID => m_axi_p_WVALID,
        WREADY => m_axi_p_WREADY,
        WDATA => m_axi_p_WDATA,
        WSTRB => m_axi_p_WSTRB,
        WLAST => m_axi_p_WLAST,
        WID => m_axi_p_WID,
        WUSER => m_axi_p_WUSER,
        ARVALID => m_axi_p_ARVALID,
        ARREADY => m_axi_p_ARREADY,
        ARADDR => m_axi_p_ARADDR,
        ARID => m_axi_p_ARID,
        ARLEN => m_axi_p_ARLEN,
        ARSIZE => m_axi_p_ARSIZE,
        ARBURST => m_axi_p_ARBURST,
        ARLOCK => m_axi_p_ARLOCK,
        ARCACHE => m_axi_p_ARCACHE,
        ARPROT => m_axi_p_ARPROT,
        ARQOS => m_axi_p_ARQOS,
        ARREGION => m_axi_p_ARREGION,
        ARUSER => m_axi_p_ARUSER,
        RVALID => m_axi_p_RVALID,
        RREADY => m_axi_p_RREADY,
        RDATA => m_axi_p_RDATA,
        RLAST => m_axi_p_RLAST,
        RID => m_axi_p_RID,
        RUSER => m_axi_p_RUSER,
        RRESP => m_axi_p_RRESP,
        BVALID => m_axi_p_BVALID,
        BREADY => m_axi_p_BREADY,
        BRESP => m_axi_p_BRESP,
        BID => m_axi_p_BID,
        BUSER => m_axi_p_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => example_p_m_axi_U_ap_dummy_ce,
        I_ARVALID => p_ARVALID,
        I_ARREADY => p_ARREADY,
        I_ARADDR => p_ARADDR,
        I_ARID => p_ARID,
        I_ARLEN => p_ARLEN,
        I_ARSIZE => p_ARSIZE,
        I_ARLOCK => p_ARLOCK,
        I_ARCACHE => p_ARCACHE,
        I_ARQOS => p_ARQOS,
        I_ARPROT => p_ARPROT,
        I_ARUSER => p_ARUSER,
        I_ARBURST => p_ARBURST,
        I_ARREGION => p_ARREGION,
        I_RVALID => p_RVALID,
        I_RREADY => p_RREADY,
        I_RDATA => p_RDATA,
        I_RID => p_RID,
        I_RUSER => p_RUSER,
        I_RRESP => p_RRESP,
        I_RLAST => p_RLAST,
        I_AWVALID => p_AWVALID,
        I_AWREADY => p_AWREADY,
        I_AWADDR => p_AWADDR,
        I_AWID => p_AWID,
        I_AWLEN => p_AWLEN,
        I_AWSIZE => p_AWSIZE,
        I_AWLOCK => p_AWLOCK,
        I_AWCACHE => p_AWCACHE,
        I_AWQOS => p_AWQOS,
        I_AWPROT => p_AWPROT,
        I_AWUSER => p_AWUSER,
        I_AWBURST => p_AWBURST,
        I_AWREGION => p_AWREGION,
        I_WVALID => p_WVALID,
        I_WREADY => p_WREADY,
        I_WDATA => p_WDATA,
        I_WID => p_WID,
        I_WUSER => p_WUSER,
        I_WLAST => p_WLAST,
        I_WSTRB => p_WSTRB,
        I_BVALID => p_BVALID,
        I_BREADY => p_BREADY,
        I_BRESP => p_BRESP,
        I_BID => p_BID,
        I_BUSER => p_BUSER);

    example_a_m_axi_U : component example_a_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_A_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_AWVALID,
        AWREADY => m_axi_a_AWREADY,
        AWADDR => m_axi_a_AWADDR,
        AWID => m_axi_a_AWID,
        AWLEN => m_axi_a_AWLEN,
        AWSIZE => m_axi_a_AWSIZE,
        AWBURST => m_axi_a_AWBURST,
        AWLOCK => m_axi_a_AWLOCK,
        AWCACHE => m_axi_a_AWCACHE,
        AWPROT => m_axi_a_AWPROT,
        AWQOS => m_axi_a_AWQOS,
        AWREGION => m_axi_a_AWREGION,
        AWUSER => m_axi_a_AWUSER,
        WVALID => m_axi_a_WVALID,
        WREADY => m_axi_a_WREADY,
        WDATA => m_axi_a_WDATA,
        WSTRB => m_axi_a_WSTRB,
        WLAST => m_axi_a_WLAST,
        WID => m_axi_a_WID,
        WUSER => m_axi_a_WUSER,
        ARVALID => m_axi_a_ARVALID,
        ARREADY => m_axi_a_ARREADY,
        ARADDR => m_axi_a_ARADDR,
        ARID => m_axi_a_ARID,
        ARLEN => m_axi_a_ARLEN,
        ARSIZE => m_axi_a_ARSIZE,
        ARBURST => m_axi_a_ARBURST,
        ARLOCK => m_axi_a_ARLOCK,
        ARCACHE => m_axi_a_ARCACHE,
        ARPROT => m_axi_a_ARPROT,
        ARQOS => m_axi_a_ARQOS,
        ARREGION => m_axi_a_ARREGION,
        ARUSER => m_axi_a_ARUSER,
        RVALID => m_axi_a_RVALID,
        RREADY => m_axi_a_RREADY,
        RDATA => m_axi_a_RDATA,
        RLAST => m_axi_a_RLAST,
        RID => m_axi_a_RID,
        RUSER => m_axi_a_RUSER,
        RRESP => m_axi_a_RRESP,
        BVALID => m_axi_a_BVALID,
        BREADY => m_axi_a_BREADY,
        BRESP => m_axi_a_BRESP,
        BID => m_axi_a_BID,
        BUSER => m_axi_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => example_a_m_axi_U_ap_dummy_ce,
        I_ARVALID => a_ARVALID,
        I_ARREADY => a_ARREADY,
        I_ARADDR => a_ARADDR,
        I_ARID => a_ARID,
        I_ARLEN => a_ARLEN,
        I_ARSIZE => a_ARSIZE,
        I_ARLOCK => a_ARLOCK,
        I_ARCACHE => a_ARCACHE,
        I_ARQOS => a_ARQOS,
        I_ARPROT => a_ARPROT,
        I_ARUSER => a_ARUSER,
        I_ARBURST => a_ARBURST,
        I_ARREGION => a_ARREGION,
        I_RVALID => a_RVALID,
        I_RREADY => a_RREADY,
        I_RDATA => a_RDATA,
        I_RID => a_RID,
        I_RUSER => a_RUSER,
        I_RRESP => a_RRESP,
        I_RLAST => a_RLAST,
        I_AWVALID => a_AWVALID,
        I_AWREADY => a_AWREADY,
        I_AWADDR => a_AWADDR,
        I_AWID => a_AWID,
        I_AWLEN => a_AWLEN,
        I_AWSIZE => a_AWSIZE,
        I_AWLOCK => a_AWLOCK,
        I_AWCACHE => a_AWCACHE,
        I_AWQOS => a_AWQOS,
        I_AWPROT => a_AWPROT,
        I_AWUSER => a_AWUSER,
        I_AWBURST => a_AWBURST,
        I_AWREGION => a_AWREGION,
        I_WVALID => a_WVALID,
        I_WREADY => a_WREADY,
        I_WDATA => a_WDATA,
        I_WID => a_WID,
        I_WUSER => a_WUSER,
        I_WLAST => a_WLAST,
        I_WSTRB => a_WSTRB,
        I_BVALID => a_BVALID,
        I_BREADY => a_BREADY,
        I_BRESP => a_BRESP,
        I_BID => a_BID,
        I_BUSER => a_BUSER);

    buff_U : component example_buff
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0);

    paramBuf_U : component example_paramBuf
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => paramBuf_address0,
        ce0 => paramBuf_ce0,
        we0 => paramBuf_we0,
        d0 => paramBuf_d0,
        q0 => paramBuf_q0,
        address1 => paramBuf_address1,
        ce1 => paramBuf_ce1,
        q1 => paramBuf_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_ARREADY assign process. --
    ap_reg_ioackin_a_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_a_ARREADY))) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_ARREADY)) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_AWREADY assign process. --
    ap_reg_ioackin_a_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_666) then
                    if (not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) then 
                        ap_reg_ioackin_a_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_AWREADY)) then 
                        ap_reg_ioackin_a_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_a_WREADY assign process. --
    ap_reg_ioackin_a_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_673) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                        ap_reg_ioackin_a_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_WREADY)) then 
                        ap_reg_ioackin_a_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_p_ARREADY assign process. --
    ap_reg_ioackin_p_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_p_ARREADY)))) then 
                        ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_870) then 
                        ap_reg_ioackin_p_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_312_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_312_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_312_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_329_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond2_fu_329_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_329_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond3_fu_395_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond3_fu_395_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond3_fu_395_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_284 assign process. --
    i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
                i_reg_284 <= i_1_reg_539;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
                i_reg_284 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- indvar1_reg_295 assign process. --
    indvar1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then 
                indvar1_reg_295 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond3_fu_395_p2))) then 
                indvar1_reg_295 <= indvar_next1_fu_401_p2;
            end if; 
        end if;
    end process;

    -- indvar8_reg_272 assign process. --
    indvar8_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
                indvar8_reg_272 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_reg_426) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar8_reg_272 <= indvar_next9_reg_430;
            end if; 
        end if;
    end process;

    -- indvar_reg_260 assign process. --
    indvar_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_260 <= indvar_next_reg_416;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                indvar_reg_260 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_reg_426) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                a_read_reg_435 <= a_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond1_reg_412_pp0_it1 <= exitcond1_reg_412;
                ap_reg_ppstg_indvar_reg_260_pp0_it1 <= indvar_reg_260;
                exitcond1_reg_412 <= exitcond1_fu_312_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond2_reg_426_pp1_it1 <= exitcond2_reg_426;
                ap_reg_ppstg_indvar8_reg_272_pp1_it1 <= indvar8_reg_272;
                exitcond2_reg_426 <= exitcond2_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))))) then
                ap_reg_ppstg_exitcond3_reg_554_pp2_it1 <= exitcond3_reg_554;
                exitcond3_reg_554 <= exitcond3_fu_395_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and (ap_const_lv1_0 = exitcond_fu_373_p2) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                buff_addr_1_reg_544 <= tmp_3_fu_385_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                i_1_reg_539 <= i_1_fu_379_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next9_reg_430 <= indvar_next9_fu_335_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_416 <= indvar_next_fu_318_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_412 = ap_const_lv1_0) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                p_read_reg_421 <= p_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then
                paramBuf_load_1_reg_470 <= paramBuf_q0;
                paramBuf_load_2_reg_475 <= paramBuf_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_1_reg_445)) and (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17))) then
                paramBuf_load_3_reg_480 <= paramBuf_q1;
                paramBuf_load_4_reg_485 <= paramBuf_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_1_reg_445) and (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18))) then
                paramBuf_load_5_reg_510 <= paramBuf_q1;
                paramBuf_load_6_reg_515 <= paramBuf_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_1_reg_445) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_19))) then
                paramBuf_load_7_reg_520 <= paramBuf_q1;
                paramBuf_load_8_reg_525 <= paramBuf_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond3_reg_554)))) then
                reg_307 <= buff_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then
                tmp_1_reg_445 <= tmp_1_fu_346_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23)) then
                tmp_8_reg_549 <= tmp_8_fu_390_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then
                tmp_8_v_reg_530 <= tmp_8_v_fu_366_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, a_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_321, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppstg_exitcond3_reg_554_pp2_it1, ap_sig_ioackin_a_WREADY, ap_reg_ppiten_pp2_it2, exitcond1_fu_312_p2, exitcond2_fu_329_p2, exitcond_fu_373_p2, ap_sig_ioackin_a_AWREADY, exitcond3_fu_395_p2, ap_sig_ioackin_p_ARREADY, ap_sig_ioackin_a_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_p_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
            when ap_ST_pp0_stg0_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_312_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_312_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                end if;
            when ap_ST_st10_fsm_7 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_a_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st12_fsm_9;
            when ap_ST_st12_fsm_9 => 
                ap_NS_fsm <= ap_ST_st13_fsm_10;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st14_fsm_11;
            when ap_ST_st14_fsm_11 => 
                ap_NS_fsm <= ap_ST_st15_fsm_12;
            when ap_ST_st15_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
            when ap_ST_pp1_stg0_fsm_13 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_329_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_329_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
                end if;
            when ap_ST_st19_fsm_14 => 
                ap_NS_fsm <= ap_ST_st20_fsm_15;
            when ap_ST_st20_fsm_15 => 
                ap_NS_fsm <= ap_ST_st21_fsm_16;
            when ap_ST_st21_fsm_16 => 
                ap_NS_fsm <= ap_ST_st22_fsm_17;
            when ap_ST_st22_fsm_17 => 
                ap_NS_fsm <= ap_ST_st23_fsm_18;
            when ap_ST_st23_fsm_18 => 
                ap_NS_fsm <= ap_ST_st24_fsm_19;
            when ap_ST_st24_fsm_19 => 
                ap_NS_fsm <= ap_ST_st25_fsm_20;
            when ap_ST_st25_fsm_20 => 
                ap_NS_fsm <= ap_ST_st26_fsm_21;
            when ap_ST_st26_fsm_21 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_25;
                elsif (((ap_const_lv1_0 = exitcond_fu_373_p2) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_21;
                end if;
            when ap_ST_st27_fsm_22 => 
                ap_NS_fsm <= ap_ST_st28_fsm_23;
            when ap_ST_st28_fsm_23 => 
                ap_NS_fsm <= ap_ST_st29_fsm_24;
            when ap_ST_st29_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_21;
            when ap_ST_pp2_stg0_fsm_25 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond3_fu_395_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_25;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond3_fu_395_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_25;
                end if;
            when ap_ST_st33_fsm_26 => 
                ap_NS_fsm <= ap_ST_st34_fsm_27;
            when ap_ST_st34_fsm_27 => 
                ap_NS_fsm <= ap_ST_st35_fsm_28;
            when ap_ST_st35_fsm_28 => 
                ap_NS_fsm <= ap_ST_st36_fsm_29;
            when ap_ST_st36_fsm_29 => 
                if (not((a_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_ARADDR <= ap_const_lv32_0;
    a_ARBURST <= ap_const_lv2_0;
    a_ARCACHE <= ap_const_lv4_0;
    a_ARID <= ap_const_lv1_0;
    a_ARLEN <= ap_const_lv32_32;
    a_ARLOCK <= ap_const_lv2_0;
    a_ARPROT <= ap_const_lv3_0;
    a_ARQOS <= ap_const_lv4_0;
    a_ARREGION <= ap_const_lv4_0;
    a_ARSIZE <= ap_const_lv3_0;
    a_ARUSER <= ap_const_lv1_0;

    -- a_ARVALID assign process. --
    a_ARVALID_assign_proc : process(ap_reg_ioackin_a_ARREADY, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_logic_0 = ap_reg_ioackin_a_ARREADY))) then 
            a_ARVALID <= ap_const_logic_1;
        else 
            a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    a_AWADDR <= ap_const_lv32_0;
    a_AWBURST <= ap_const_lv2_0;
    a_AWCACHE <= ap_const_lv4_0;
    a_AWID <= ap_const_lv1_0;
    a_AWLEN <= ap_const_lv32_32;
    a_AWLOCK <= ap_const_lv2_0;
    a_AWPROT <= ap_const_lv3_0;
    a_AWQOS <= ap_const_lv4_0;
    a_AWREGION <= ap_const_lv4_0;
    a_AWSIZE <= ap_const_lv3_0;
    a_AWUSER <= ap_const_lv1_0;

    -- a_AWVALID assign process. --
    a_AWVALID_assign_proc : process(exitcond_fu_373_p2, ap_sig_cseq_ST_st26_fsm_21, ap_reg_ioackin_a_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_reg_ioackin_a_AWREADY))) then 
            a_AWVALID <= ap_const_logic_1;
        else 
            a_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- a_BREADY assign process. --
    a_BREADY_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st36_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) and not((a_BVALID = ap_const_logic_0)))) then 
            a_BREADY <= ap_const_logic_1;
        else 
            a_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- a_RREADY assign process. --
    a_RREADY_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_13, exitcond2_reg_426, ap_sig_bdd_345, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_reg_426) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            a_RREADY <= ap_const_logic_1;
        else 
            a_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    a_WDATA <= reg_307;
    a_WID <= ap_const_lv1_0;
    a_WLAST <= ap_const_logic_0;
    a_WSTRB <= ap_const_lv4_F;
    a_WUSER <= ap_const_lv1_0;

    -- a_WVALID assign process. --
    a_WVALID_assign_proc : process(ap_reg_ppstg_exitcond3_reg_554_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ioackin_a_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_0 = ap_reg_ioackin_a_WREADY))) then 
            a_WVALID <= ap_const_logic_1;
        else 
            a_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st36_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) and not((a_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(a_BVALID, ap_sig_cseq_ST_st36_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) and not((a_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_312 assign process. --
    ap_sig_bdd_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_312 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_321 assign process. --
    ap_sig_bdd_321_assign_proc : process(p_RVALID, exitcond1_reg_412)
    begin
                ap_sig_bdd_321 <= ((p_RVALID = ap_const_logic_0) and (exitcond1_reg_412 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_337 assign process. --
    ap_sig_bdd_337_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_337 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_345 assign process. --
    ap_sig_bdd_345_assign_proc : process(a_RVALID, exitcond2_reg_426)
    begin
                ap_sig_bdd_345 <= ((a_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_reg_426));
    end process;


    -- ap_sig_bdd_362 assign process. --
    ap_sig_bdd_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_362 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_369 assign process. --
    ap_sig_bdd_369_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_369 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_416 assign process. --
    ap_sig_bdd_416_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_416 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_425 assign process. --
    ap_sig_bdd_425_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_425 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_455 assign process. --
    ap_sig_bdd_455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_455 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_471 assign process. --
    ap_sig_bdd_471_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_471 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_484 assign process. --
    ap_sig_bdd_484_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_484 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_495 assign process. --
    ap_sig_bdd_495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_495 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_504 assign process. --
    ap_sig_bdd_504_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_504 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_525 assign process. --
    ap_sig_bdd_525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_525 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_542 assign process. --
    ap_sig_bdd_542_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_542 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_554 assign process. --
    ap_sig_bdd_554_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_554 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_604 assign process. --
    ap_sig_bdd_604_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_604 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_653 assign process. --
    ap_sig_bdd_653_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_653 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_666 assign process. --
    ap_sig_bdd_666_assign_proc : process(exitcond_fu_373_p2, ap_sig_cseq_ST_st26_fsm_21)
    begin
                ap_sig_bdd_666 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((ap_const_lv1_0 = exitcond_fu_373_p2)));
    end process;


    -- ap_sig_bdd_673 assign process. --
    ap_sig_bdd_673_assign_proc : process(ap_reg_ppstg_exitcond3_reg_554_pp2_it1, ap_reg_ppiten_pp2_it2)
    begin
                ap_sig_bdd_673 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2));
    end process;


    -- ap_sig_bdd_685 assign process. --
    ap_sig_bdd_685_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_685 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_870 assign process. --
    ap_sig_bdd_870_assign_proc : process(ap_start, p_ARREADY)
    begin
                ap_sig_bdd_870 <= ((ap_const_logic_1 = p_ARREADY) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_6_assign_proc : process(ap_sig_bdd_312)
    begin
        if (ap_sig_bdd_312) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_13 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_13_assign_proc : process(ap_sig_bdd_337)
    begin
        if (ap_sig_bdd_337) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_25 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_25_assign_proc : process(ap_sig_bdd_369)
    begin
        if (ap_sig_bdd_369) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_653)
    begin
        if (ap_sig_bdd_653) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_12 assign process. --
    ap_sig_cseq_ST_st15_fsm_12_assign_proc : process(ap_sig_bdd_554)
    begin
        if (ap_sig_bdd_554) then 
            ap_sig_cseq_ST_st15_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_14 assign process. --
    ap_sig_cseq_ST_st19_fsm_14_assign_proc : process(ap_sig_bdd_416)
    begin
        if (ap_sig_bdd_416) then 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_15 assign process. --
    ap_sig_cseq_ST_st20_fsm_15_assign_proc : process(ap_sig_bdd_425)
    begin
        if (ap_sig_bdd_425) then 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_16 assign process. --
    ap_sig_cseq_ST_st21_fsm_16_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_17 assign process. --
    ap_sig_cseq_ST_st22_fsm_17_assign_proc : process(ap_sig_bdd_455)
    begin
        if (ap_sig_bdd_455) then 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_18 assign process. --
    ap_sig_cseq_ST_st23_fsm_18_assign_proc : process(ap_sig_bdd_471)
    begin
        if (ap_sig_bdd_471) then 
            ap_sig_cseq_ST_st23_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_19 assign process. --
    ap_sig_cseq_ST_st24_fsm_19_assign_proc : process(ap_sig_bdd_484)
    begin
        if (ap_sig_bdd_484) then 
            ap_sig_cseq_ST_st24_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_20 assign process. --
    ap_sig_cseq_ST_st25_fsm_20_assign_proc : process(ap_sig_bdd_495)
    begin
        if (ap_sig_bdd_495) then 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_21 assign process. --
    ap_sig_cseq_ST_st26_fsm_21_assign_proc : process(ap_sig_bdd_504)
    begin
        if (ap_sig_bdd_504) then 
            ap_sig_cseq_ST_st26_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_22 assign process. --
    ap_sig_cseq_ST_st27_fsm_22_assign_proc : process(ap_sig_bdd_362)
    begin
        if (ap_sig_bdd_362) then 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_23 assign process. --
    ap_sig_cseq_ST_st28_fsm_23_assign_proc : process(ap_sig_bdd_525)
    begin
        if (ap_sig_bdd_525) then 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_24 assign process. --
    ap_sig_cseq_ST_st29_fsm_24_assign_proc : process(ap_sig_bdd_604)
    begin
        if (ap_sig_bdd_604) then 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_29 assign process. --
    ap_sig_cseq_ST_st36_fsm_29_assign_proc : process(ap_sig_bdd_685)
    begin
        if (ap_sig_bdd_685) then 
            ap_sig_cseq_ST_st36_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_542)
    begin
        if (ap_sig_bdd_542) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_a_ARREADY assign process. --
    ap_sig_ioackin_a_ARREADY_assign_proc : process(a_ARREADY, ap_reg_ioackin_a_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_ARREADY)) then 
            ap_sig_ioackin_a_ARREADY <= a_ARREADY;
        else 
            ap_sig_ioackin_a_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_a_AWREADY assign process. --
    ap_sig_ioackin_a_AWREADY_assign_proc : process(a_AWREADY, ap_reg_ioackin_a_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_AWREADY)) then 
            ap_sig_ioackin_a_AWREADY <= a_AWREADY;
        else 
            ap_sig_ioackin_a_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_a_WREADY assign process. --
    ap_sig_ioackin_a_WREADY_assign_proc : process(a_WREADY, ap_reg_ioackin_a_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_WREADY)) then 
            ap_sig_ioackin_a_WREADY <= a_WREADY;
        else 
            ap_sig_ioackin_a_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_p_ARREADY assign process. --
    ap_sig_ioackin_p_ARREADY_assign_proc : process(p_ARREADY, ap_reg_ioackin_p_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_p_ARREADY)) then 
            ap_sig_ioackin_p_ARREADY <= p_ARREADY;
        else 
            ap_sig_ioackin_p_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- buff_address0 assign process. --
    buff_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_25, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st26_fsm_21, buff_addr_1_reg_544, ap_sig_cseq_ST_st29_fsm_24, tmp_s_fu_341_p1, tmp_3_fu_385_p1, tmp_2_fu_407_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            buff_address0 <= buff_addr_1_reg_544;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            buff_address0 <= tmp_s_fu_341_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            buff_address0 <= tmp_2_fu_407_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21)) then 
            buff_address0 <= tmp_3_fu_385_p1(6 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXX";
        end if; 
    end process;


    -- buff_ce0 assign process. --
    buff_ce0_assign_proc : process(ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_25, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_exitcond3_reg_554_pp2_it1, ap_sig_ioackin_a_WREADY, ap_reg_ppiten_pp2_it2, exitcond_fu_373_p2, ap_sig_cseq_ST_st26_fsm_21, ap_sig_ioackin_a_AWREADY, ap_sig_cseq_ST_st29_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) and not((not((ap_const_lv1_0 = exitcond_fu_373_p2)) and (ap_const_logic_0 = ap_sig_ioackin_a_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_25) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_554_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_a_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_d0 assign process. --
    buff_d0_assign_proc : process(ap_reg_ppiten_pp1_it2, a_read_reg_435, tmp_8_reg_549, ap_sig_cseq_ST_st29_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            buff_d0 <= tmp_8_reg_549;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            buff_d0 <= a_read_reg_435;
        else 
            buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- buff_we0 assign process. --
    buff_we0_assign_proc : process(ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond2_reg_426_pp1_it1, ap_sig_cseq_ST_st29_fsm_24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_426_pp1_it1)))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    example_a_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    example_p_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond1_fu_312_p2 <= "1" when (indvar_phi_fu_264_p4 = ap_const_lv4_C) else "0";
    exitcond2_fu_329_p2 <= "1" when (indvar8_phi_fu_276_p4 = ap_const_lv6_32) else "0";
    exitcond3_fu_395_p2 <= "1" when (indvar1_reg_295 = ap_const_lv6_32) else "0";
    exitcond_fu_373_p2 <= "1" when (i_reg_284 = ap_const_lv6_32) else "0";
    i_1_fu_379_p2 <= std_logic_vector(unsigned(i_reg_284) + unsigned(ap_const_lv6_1));

    -- indvar8_phi_fu_276_p4 assign process. --
    indvar8_phi_fu_276_p4_assign_proc : process(indvar8_reg_272, ap_sig_cseq_ST_pp1_stg0_fsm_13, exitcond2_reg_426, ap_reg_ppiten_pp1_it1, indvar_next9_reg_430)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_reg_426) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar8_phi_fu_276_p4 <= indvar_next9_reg_430;
        else 
            indvar8_phi_fu_276_p4 <= indvar8_reg_272;
        end if; 
    end process;

    indvar_next1_fu_401_p2 <= std_logic_vector(unsigned(indvar1_reg_295) + unsigned(ap_const_lv6_1));
    indvar_next9_fu_335_p2 <= std_logic_vector(unsigned(indvar8_phi_fu_276_p4) + unsigned(ap_const_lv6_1));
    indvar_next_fu_318_p2 <= std_logic_vector(unsigned(indvar_phi_fu_264_p4) + unsigned(ap_const_lv4_1));

    -- indvar_phi_fu_264_p4 assign process. --
    indvar_phi_fu_264_p4_assign_proc : process(indvar_reg_260, ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond1_reg_412, ap_reg_ppiten_pp0_it1, indvar_next_reg_416)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_264_p4 <= indvar_next_reg_416;
        else 
            indvar_phi_fu_264_p4 <= indvar_reg_260;
        end if; 
    end process;

    p_ARADDR <= ap_const_lv32_0;
    p_ARBURST <= ap_const_lv2_0;
    p_ARCACHE <= ap_const_lv4_0;
    p_ARID <= ap_const_lv1_0;
    p_ARLEN <= ap_const_lv32_C;
    p_ARLOCK <= ap_const_lv2_0;
    p_ARPROT <= ap_const_lv3_0;
    p_ARQOS <= ap_const_lv4_0;
    p_ARREGION <= ap_const_lv4_0;
    p_ARSIZE <= ap_const_lv3_0;
    p_ARUSER <= ap_const_lv1_0;

    -- p_ARVALID assign process. --
    p_ARVALID_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ioackin_p_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_p_ARREADY))) then 
            p_ARVALID <= ap_const_logic_1;
        else 
            p_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_AWADDR <= ap_const_lv32_0;
    p_AWBURST <= ap_const_lv2_0;
    p_AWCACHE <= ap_const_lv4_0;
    p_AWID <= ap_const_lv1_0;
    p_AWLEN <= ap_const_lv32_0;
    p_AWLOCK <= ap_const_lv2_0;
    p_AWPROT <= ap_const_lv3_0;
    p_AWQOS <= ap_const_lv4_0;
    p_AWREGION <= ap_const_lv4_0;
    p_AWSIZE <= ap_const_lv3_0;
    p_AWUSER <= ap_const_lv1_0;
    p_AWVALID <= ap_const_logic_0;
    p_BREADY <= ap_const_logic_0;

    -- p_RREADY assign process. --
    p_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond1_reg_412, ap_sig_bdd_321, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond1_reg_412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            p_RREADY <= ap_const_logic_1;
        else 
            p_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_WDATA <= ap_const_lv8_0;
    p_WID <= ap_const_lv1_0;
    p_WLAST <= ap_const_logic_0;
    p_WSTRB <= ap_const_lv1_0;
    p_WUSER <= ap_const_lv1_0;
    p_WVALID <= ap_const_logic_0;

    -- paramBuf_address0 assign process. --
    paramBuf_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st19_fsm_14, ap_sig_cseq_ST_st20_fsm_15, ap_sig_cseq_ST_st21_fsm_16, ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_st23_fsm_18, tmp_fu_324_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            paramBuf_address0 <= tmp_fu_324_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18)) then 
            paramBuf_address0 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            paramBuf_address0 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then 
            paramBuf_address0 <= ap_const_lv64_7(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then 
            paramBuf_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_14)) then 
            paramBuf_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            paramBuf_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- paramBuf_address1 assign process. --
    paramBuf_address1_assign_proc : process(ap_sig_cseq_ST_st20_fsm_15, ap_sig_cseq_ST_st21_fsm_16, ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_st23_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18)) then 
            paramBuf_address1 <= ap_const_lv64_A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            paramBuf_address1 <= ap_const_lv64_8(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then 
            paramBuf_address1 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then 
            paramBuf_address1 <= ap_const_lv64_5(7 - 1 downto 0);
        else 
            paramBuf_address1 <= "XXXXXXX";
        end if; 
    end process;


    -- paramBuf_ce0 assign process. --
    paramBuf_ce0_assign_proc : process(ap_sig_bdd_321, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st19_fsm_14, ap_sig_cseq_ST_st20_fsm_15, ap_sig_cseq_ST_st21_fsm_16, ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_st23_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            paramBuf_ce0 <= ap_const_logic_1;
        else 
            paramBuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- paramBuf_ce1 assign process. --
    paramBuf_ce1_assign_proc : process(ap_sig_cseq_ST_st20_fsm_15, ap_sig_cseq_ST_st21_fsm_16, ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_st23_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18))) then 
            paramBuf_ce1 <= ap_const_logic_1;
        else 
            paramBuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    paramBuf_d0 <= p_read_reg_421;

    -- paramBuf_we0 assign process. --
    paramBuf_we0_assign_proc : process(ap_sig_bdd_321, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_reg_412_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_321 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_412_pp0_it1)))) then 
            paramBuf_we0 <= ap_const_logic_1;
        else 
            paramBuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_346_p1 <= paramBuf_q0(1 - 1 downto 0);
    tmp_2_fu_407_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_295),64));
    tmp_3_fu_385_p1 <= std_logic_vector(resize(unsigned(i_reg_284),64));
    tmp_5_fu_350_p5 <= (((paramBuf_load_4_reg_485 & paramBuf_load_3_reg_480) & paramBuf_load_2_reg_475) & paramBuf_load_1_reg_470);
    tmp_8_fu_390_p2 <= std_logic_vector(unsigned(reg_307) + unsigned(tmp_8_v_reg_530));
    tmp_8_v_fu_366_p3 <= 
        tmp_5_fu_350_p5 when (tmp_1_reg_445(0) = '1') else 
        tmp_9_fu_358_p5;
    tmp_9_fu_358_p5 <= (((paramBuf_load_8_reg_525 & paramBuf_load_7_reg_520) & paramBuf_load_6_reg_515) & paramBuf_load_5_reg_510);
    tmp_fu_324_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_260_pp0_it1),64));
    tmp_s_fu_341_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar8_reg_272_pp1_it1),64));
end behav;
