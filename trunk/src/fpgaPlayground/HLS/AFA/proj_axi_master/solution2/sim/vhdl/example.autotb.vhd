-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;


entity apatb_example_top is
  generic (
	    AUTOTB_CLOCK_PERIOD	:   TIME := 2.500000 ns;
       AUTOTB_TVIN_p : STRING := "../tv/cdatafile/c.example.autotvin_p.dat";
       AUTOTB_TVIN_a : STRING := "../tv/cdatafile/c.example.autotvin_a.dat";
       AUTOTB_TVIN_p_out_wrapc : STRING := "../tv/rtldatafile/rtl.example.autotvin_p.dat";
       AUTOTB_TVIN_a_out_wrapc : STRING := "../tv/rtldatafile/rtl.example.autotvin_a.dat";
       AUTOTB_TVOUT_a : STRING := "../tv/cdatafile/c.example.autotvout_a.dat";
       AUTOTB_TVOUT_a_out_wrapc : STRING := "../tv/rtldatafile/rtl.example.autotvout_a.dat";
      AUTOTB_LAT_RESULT_FILE    : STRING  := "example.result.lat.rb";
      AUTOTB_PER_RESULT_TRANS_FILE    : STRING  := "example.performance.result.transaction.xml";
      LENGTH_p     : INTEGER := 100;
      LENGTH_a     : INTEGER := 50;
	    AUTOTB_TRANSACTION_NUM    : INTEGER := 1
);

end apatb_example_top;

architecture behav of apatb_example_top is 
  signal AESL_clock	:   STD_LOGIC := '0';
  signal rst  :   STD_LOGIC;
  signal start    :   STD_LOGIC := '0';
  signal ce       :   STD_LOGIC;
  signal continue :   STD_LOGIC := '0';
  signal AESL_reset :   STD_LOGIC := '0';
  signal AESL_start :   STD_LOGIC := '0';
  signal AESL_ce :   STD_LOGIC := '0';
  signal AESL_continue :   STD_LOGIC := '0';
  signal AESL_ready :   STD_LOGIC := '0';
  signal AESL_idle :   STD_LOGIC := '0';
  signal AESL_done :   STD_LOGIC := '0';
  signal AESL_done_delay :   STD_LOGIC := '0';
  signal AESL_done_delay2 :   STD_LOGIC := '0';
  signal AESL_ready_delay :   STD_LOGIC := '0';
  signal ready :   STD_LOGIC := '0';
  signal ready_wire :   STD_LOGIC := '0';

  signal ap_clk :  STD_LOGIC;
  signal ap_rst_n :  STD_LOGIC;
  signal ap_start :  STD_LOGIC;
  signal ap_done :  STD_LOGIC;
  signal ap_idle :  STD_LOGIC;
  signal ap_ready :  STD_LOGIC;
  signal m_axi_p_AWVALID :  STD_LOGIC;
  signal m_axi_p_AWREADY :  STD_LOGIC;
  signal m_axi_p_AWADDR :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_p_AWID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_AWLEN :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal m_axi_p_AWSIZE :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_p_AWBURST :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_AWLOCK :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_AWCACHE :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_AWPROT :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_p_AWQOS :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_AWREGION :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_AWUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_WVALID :  STD_LOGIC;
  signal m_axi_p_WREADY :  STD_LOGIC;
  signal m_axi_p_WDATA :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_p_WSTRB :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_WLAST :  STD_LOGIC;
  signal m_axi_p_WID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_WUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_ARVALID :  STD_LOGIC;
  signal m_axi_p_ARREADY :  STD_LOGIC;
  signal m_axi_p_ARADDR :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_p_ARID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_ARLEN :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal m_axi_p_ARSIZE :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_p_ARBURST :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_ARLOCK :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_ARCACHE :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_ARPROT :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_p_ARQOS :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_ARREGION :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_p_ARUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_RVALID :  STD_LOGIC;
  signal m_axi_p_RREADY :  STD_LOGIC;
  signal m_axi_p_RDATA :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_p_RLAST :  STD_LOGIC;
  signal m_axi_p_RID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_RUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_RRESP :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_BVALID :  STD_LOGIC;
  signal m_axi_p_BREADY :  STD_LOGIC;
  signal m_axi_p_BRESP :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_p_BID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_p_BUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_AWVALID :  STD_LOGIC;
  signal m_axi_a_AWREADY :  STD_LOGIC;
  signal m_axi_a_AWADDR :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_a_AWID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_AWLEN :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal m_axi_a_AWSIZE :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_a_AWBURST :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_AWLOCK :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_AWCACHE :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_AWPROT :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_a_AWQOS :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_AWREGION :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_AWUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_WVALID :  STD_LOGIC;
  signal m_axi_a_WREADY :  STD_LOGIC;
  signal m_axi_a_WDATA :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_a_WSTRB :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_WLAST :  STD_LOGIC;
  signal m_axi_a_WID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_WUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_ARVALID :  STD_LOGIC;
  signal m_axi_a_ARREADY :  STD_LOGIC;
  signal m_axi_a_ARADDR :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_a_ARID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_ARLEN :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal m_axi_a_ARSIZE :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_a_ARBURST :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_ARLOCK :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_ARCACHE :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_ARPROT :  STD_LOGIC_VECTOR (2 DOWNTO 0);
  signal m_axi_a_ARQOS :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_ARREGION :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal m_axi_a_ARUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_RVALID :  STD_LOGIC;
  signal m_axi_a_RREADY :  STD_LOGIC;
  signal m_axi_a_RDATA :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal m_axi_a_RLAST :  STD_LOGIC;
  signal m_axi_a_RID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_RUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_RRESP :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_BVALID :  STD_LOGIC;
  signal m_axi_a_BREADY :  STD_LOGIC;
  signal m_axi_a_BRESP :  STD_LOGIC_VECTOR (1 DOWNTO 0);
  signal m_axi_a_BID :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal m_axi_a_BUSER :  STD_LOGIC_VECTOR (0 DOWNTO 0);

  shared variable AESL_ready_cnt	:   INTEGER := 0;
  shared variable ready_cnt	:   INTEGER := 0;
  shared variable done_cnt	:   INTEGER := 0;
  signal ready_initial  :	STD_LOGIC;
  signal ready_initial_n	:   STD_LOGIC;
  signal ready_last_n   :	STD_LOGIC;
  signal ready_delay_last_n	:   STD_LOGIC;
  signal done_delay_last_n	:   STD_LOGIC;
  signal interface_done :	STD_LOGIC := '0';
  -- Subtype for random state number, to prevent confusing it with true integers
  -- Top of range should be (2**31)-1 but this literal calculation causes overflow on 32-bit machines
  subtype T_RANDINT is integer range 1 to integer'high;

  type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
  shared variable AESL_mLatCnterIn : latency_record;
  shared variable AESL_mLatCnterOut : latency_record;
  shared variable AESL_mLatCnterIn_addr : INTEGER;
  shared variable AESL_mLatCnterOut_addr : INTEGER;
  shared variable AESL_clk_counter : INTEGER;
component example is
port (
    ap_clk :  IN STD_LOGIC;
    ap_rst_n :  IN STD_LOGIC;
    ap_start :  IN STD_LOGIC;
    ap_done :  OUT STD_LOGIC;
    ap_idle :  OUT STD_LOGIC;
    ap_ready :  OUT STD_LOGIC;
    m_axi_p_AWVALID :  OUT STD_LOGIC;
    m_axi_p_AWREADY :  IN STD_LOGIC;
    m_axi_p_AWADDR :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_p_AWID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_AWLEN :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    m_axi_p_AWSIZE :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_p_AWBURST :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_AWLOCK :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_AWCACHE :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_AWPROT :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_p_AWQOS :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_AWREGION :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_AWUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_WVALID :  OUT STD_LOGIC;
    m_axi_p_WREADY :  IN STD_LOGIC;
    m_axi_p_WDATA :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_p_WSTRB :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_WLAST :  OUT STD_LOGIC;
    m_axi_p_WID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_WUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_ARVALID :  OUT STD_LOGIC;
    m_axi_p_ARREADY :  IN STD_LOGIC;
    m_axi_p_ARADDR :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_p_ARID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_ARLEN :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    m_axi_p_ARSIZE :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_p_ARBURST :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_ARLOCK :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_ARCACHE :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_ARPROT :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_p_ARQOS :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_ARREGION :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_p_ARUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_RVALID :  IN STD_LOGIC;
    m_axi_p_RREADY :  OUT STD_LOGIC;
    m_axi_p_RDATA :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_p_RLAST :  IN STD_LOGIC;
    m_axi_p_RID :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_RUSER :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_RRESP :  IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_BVALID :  IN STD_LOGIC;
    m_axi_p_BREADY :  OUT STD_LOGIC;
    m_axi_p_BRESP :  IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_p_BID :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_p_BUSER :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_AWVALID :  OUT STD_LOGIC;
    m_axi_a_AWREADY :  IN STD_LOGIC;
    m_axi_a_AWADDR :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_a_AWID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_AWLEN :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    m_axi_a_AWSIZE :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_a_AWBURST :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_AWLOCK :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_AWCACHE :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_AWPROT :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_a_AWQOS :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_AWREGION :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_AWUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_WVALID :  OUT STD_LOGIC;
    m_axi_a_WREADY :  IN STD_LOGIC;
    m_axi_a_WDATA :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_a_WSTRB :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_WLAST :  OUT STD_LOGIC;
    m_axi_a_WID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_WUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_ARVALID :  OUT STD_LOGIC;
    m_axi_a_ARREADY :  IN STD_LOGIC;
    m_axi_a_ARADDR :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_a_ARID :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_ARLEN :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    m_axi_a_ARSIZE :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_a_ARBURST :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_ARLOCK :  OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_ARCACHE :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_ARPROT :  OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    m_axi_a_ARQOS :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_ARREGION :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    m_axi_a_ARUSER :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_RVALID :  IN STD_LOGIC;
    m_axi_a_RREADY :  OUT STD_LOGIC;
    m_axi_a_RDATA :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    m_axi_a_RLAST :  IN STD_LOGIC;
    m_axi_a_RID :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_RUSER :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_RRESP :  IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_BVALID :  IN STD_LOGIC;
    m_axi_a_BREADY :  OUT STD_LOGIC;
    m_axi_a_BRESP :  IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    m_axi_a_BID :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    m_axi_a_BUSER :  IN STD_LOGIC_VECTOR (0 DOWNTO 0));
end component;

-- The signal of port p
shared variable AESL_REG_p : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
-- The signal of port a
shared variable AESL_REG_a : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal	AESL_axi_master_p_ready : STD_LOGIC;
signal	AESL_axi_master_p_done  : STD_LOGIC;
component AESL_axi_master_p is
  port(
    clk   :   IN STD_LOGIC;
    reset :   IN STD_LOGIC;
    TRAN_p_AWVALID : IN STD_LOGIC;
    TRAN_p_AWREADY : OUT STD_LOGIC;
    TRAN_p_AWADDR : IN STD_LOGIC_VECTOR;
    TRAN_p_AWID : IN STD_LOGIC_VECTOR;
    TRAN_p_AWLEN : IN STD_LOGIC_VECTOR;
    TRAN_p_AWSIZE : IN STD_LOGIC_VECTOR;
    TRAN_p_AWBURST : IN STD_LOGIC_VECTOR;
    TRAN_p_AWLOCK : IN STD_LOGIC_VECTOR;
    TRAN_p_AWCACHE : IN STD_LOGIC_VECTOR;
    TRAN_p_AWPROT : IN STD_LOGIC_VECTOR;
    TRAN_p_AWQOS : IN STD_LOGIC_VECTOR;
    TRAN_p_AWREGION : IN STD_LOGIC_VECTOR;
    TRAN_p_AWUSER : IN STD_LOGIC_VECTOR;
    TRAN_p_WVALID : IN STD_LOGIC;
    TRAN_p_WREADY : OUT STD_LOGIC;
    TRAN_p_WDATA : IN STD_LOGIC_VECTOR;
    TRAN_p_WSTRB : IN STD_LOGIC_VECTOR;
    TRAN_p_WLAST : IN STD_LOGIC;
    TRAN_p_WID : IN STD_LOGIC_VECTOR;
    TRAN_p_WUSER : IN STD_LOGIC_VECTOR;
    TRAN_p_ARVALID : IN STD_LOGIC;
    TRAN_p_ARREADY : OUT STD_LOGIC;
    TRAN_p_ARADDR : IN STD_LOGIC_VECTOR;
    TRAN_p_ARID : IN STD_LOGIC_VECTOR;
    TRAN_p_ARLEN : IN STD_LOGIC_VECTOR;
    TRAN_p_ARSIZE : IN STD_LOGIC_VECTOR;
    TRAN_p_ARBURST : IN STD_LOGIC_VECTOR;
    TRAN_p_ARLOCK : IN STD_LOGIC_VECTOR;
    TRAN_p_ARCACHE : IN STD_LOGIC_VECTOR;
    TRAN_p_ARPROT : IN STD_LOGIC_VECTOR;
    TRAN_p_ARQOS : IN STD_LOGIC_VECTOR;
    TRAN_p_ARREGION : IN STD_LOGIC_VECTOR;
    TRAN_p_ARUSER : IN STD_LOGIC_VECTOR;
    TRAN_p_RVALID : OUT STD_LOGIC;
    TRAN_p_RREADY : IN STD_LOGIC;
    TRAN_p_RDATA : OUT STD_LOGIC_VECTOR;
    TRAN_p_RLAST : OUT STD_LOGIC;
    TRAN_p_RID : OUT STD_LOGIC_VECTOR;
    TRAN_p_RUSER : OUT STD_LOGIC_VECTOR;
    TRAN_p_RRESP : OUT STD_LOGIC_VECTOR;
    TRAN_p_BVALID : OUT STD_LOGIC;
    TRAN_p_BREADY : IN STD_LOGIC;
    TRAN_p_BRESP : OUT STD_LOGIC_VECTOR;
    TRAN_p_BID : OUT STD_LOGIC_VECTOR;
    TRAN_p_BUSER : OUT STD_LOGIC_VECTOR;
    ready        :    IN  STD_LOGIC;
    done         :    IN  STD_LOGIC
  );
end component;

signal	AESL_axi_master_a_ready : STD_LOGIC;
signal	AESL_axi_master_a_done  : STD_LOGIC;
component AESL_axi_master_a is
  port(
    clk   :   IN STD_LOGIC;
    reset :   IN STD_LOGIC;
    TRAN_a_AWVALID : IN STD_LOGIC;
    TRAN_a_AWREADY : OUT STD_LOGIC;
    TRAN_a_AWADDR : IN STD_LOGIC_VECTOR;
    TRAN_a_AWID : IN STD_LOGIC_VECTOR;
    TRAN_a_AWLEN : IN STD_LOGIC_VECTOR;
    TRAN_a_AWSIZE : IN STD_LOGIC_VECTOR;
    TRAN_a_AWBURST : IN STD_LOGIC_VECTOR;
    TRAN_a_AWLOCK : IN STD_LOGIC_VECTOR;
    TRAN_a_AWCACHE : IN STD_LOGIC_VECTOR;
    TRAN_a_AWPROT : IN STD_LOGIC_VECTOR;
    TRAN_a_AWQOS : IN STD_LOGIC_VECTOR;
    TRAN_a_AWREGION : IN STD_LOGIC_VECTOR;
    TRAN_a_AWUSER : IN STD_LOGIC_VECTOR;
    TRAN_a_WVALID : IN STD_LOGIC;
    TRAN_a_WREADY : OUT STD_LOGIC;
    TRAN_a_WDATA : IN STD_LOGIC_VECTOR;
    TRAN_a_WSTRB : IN STD_LOGIC_VECTOR;
    TRAN_a_WLAST : IN STD_LOGIC;
    TRAN_a_WID : IN STD_LOGIC_VECTOR;
    TRAN_a_WUSER : IN STD_LOGIC_VECTOR;
    TRAN_a_ARVALID : IN STD_LOGIC;
    TRAN_a_ARREADY : OUT STD_LOGIC;
    TRAN_a_ARADDR : IN STD_LOGIC_VECTOR;
    TRAN_a_ARID : IN STD_LOGIC_VECTOR;
    TRAN_a_ARLEN : IN STD_LOGIC_VECTOR;
    TRAN_a_ARSIZE : IN STD_LOGIC_VECTOR;
    TRAN_a_ARBURST : IN STD_LOGIC_VECTOR;
    TRAN_a_ARLOCK : IN STD_LOGIC_VECTOR;
    TRAN_a_ARCACHE : IN STD_LOGIC_VECTOR;
    TRAN_a_ARPROT : IN STD_LOGIC_VECTOR;
    TRAN_a_ARQOS : IN STD_LOGIC_VECTOR;
    TRAN_a_ARREGION : IN STD_LOGIC_VECTOR;
    TRAN_a_ARUSER : IN STD_LOGIC_VECTOR;
    TRAN_a_RVALID : OUT STD_LOGIC;
    TRAN_a_RREADY : IN STD_LOGIC;
    TRAN_a_RDATA : OUT STD_LOGIC_VECTOR;
    TRAN_a_RLAST : OUT STD_LOGIC;
    TRAN_a_RID : OUT STD_LOGIC_VECTOR;
    TRAN_a_RUSER : OUT STD_LOGIC_VECTOR;
    TRAN_a_RRESP : OUT STD_LOGIC_VECTOR;
    TRAN_a_BVALID : OUT STD_LOGIC;
    TRAN_a_BREADY : IN STD_LOGIC;
    TRAN_a_BRESP : OUT STD_LOGIC_VECTOR;
    TRAN_a_BID : OUT STD_LOGIC_VECTOR;
    TRAN_a_BUSER : OUT STD_LOGIC_VECTOR;
    ready        :    IN  STD_LOGIC;
    done         :    IN  STD_LOGIC
  );
end component;

      procedure esl_read_token (file textfile: TEXT; textline: inout LINE; token: out STRING; token_len: out INTEGER) is
          variable whitespace : CHARACTER;
          variable i : INTEGER;
          variable ok: BOOLEAN;
          variable buff: STRING(1 to token'length);
      begin
          ok := false;
          i := 1;
          loop_main: while not endfile(textfile) loop
              if textline = null or textline'length = 0 then
                  readline(textfile, textline);
              end if;
              loop_remove_whitespace: while textline'length > 0 loop
                  if textline(textline'left) = ' ' or
                      textline(textline'left) = HT or
                      textline(textline'left) = CR or
                      textline(textline'left) = LF then
                      read(textline, whitespace);
                  else
                      exit loop_remove_whitespace;
                  end if;
              end loop;
              loop_aesl_read_token: while textline'length > 0 and i <= buff'length loop
                  if textline(textline'left) = ' ' or
                     textline(textline'left) = HT or
                     textline(textline'left) = CR or
                     textline(textline'left) = LF then
                      exit loop_aesl_read_token;
                  else
                      read(textline, buff(i));
                      i := i + 1;
                  end if;
                  ok := true;
              end loop;
              if ok = true then
                  exit loop_main;
              end if;
          end loop;
          buff(i) := ' ';
          token := buff;
          token_len:= i-1;
      end procedure esl_read_token;

      procedure esl_read_token (file textfile: TEXT;
                                textline: inout LINE;
                                token: out STRING) is
          variable i : INTEGER;
      begin
          esl_read_token (textfile, textline, token, i);
      end procedure esl_read_token;

      function esl_str2lv_hex (RHS : STRING; data_width : INTEGER) return STD_LOGIC_VECTOR is
          variable	ret	:   STD_LOGIC_VECTOR(data_width - 1 downto 0);
          variable	idx	:   integer := 3;
      begin
          ret := (others => '0');
          if(RHS(1) /= '0' and (RHS(2) /= 'x' or RHS(2) /= 'X')) then
     	        report "Error! The format of hex number is not initialed by 0x";
          end if;
          while true loop
              if (data_width > 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := ret(data_width - 5 downto 0) & "0000";
     	                when '1'    =>  ret := ret(data_width - 5 downto 0) & "0001";
                      when '2'    =>  ret := ret(data_width - 5 downto 0) & "0010";
                      when '3'    =>  ret := ret(data_width - 5 downto 0) & "0011";
                      when '4'    =>  ret := ret(data_width - 5 downto 0) & "0100";
                      when '5'    =>  ret := ret(data_width - 5 downto 0) & "0101";
                      when '6'    =>  ret := ret(data_width - 5 downto 0) & "0110";
                      when '7'    =>  ret := ret(data_width - 5 downto 0) & "0111";
                      when '8'    =>  ret := ret(data_width - 5 downto 0) & "1000";
                      when '9'    =>  ret := ret(data_width - 5 downto 0) & "1001";
                      when 'a' | 'A'  =>  ret := ret(data_width - 5 downto 0) & "1010";
                      when 'b' | 'B'  =>  ret := ret(data_width - 5 downto 0) & "1011";
                      when 'c' | 'C'  =>  ret := ret(data_width - 5 downto 0) & "1100";
                      when 'd' | 'D'  =>  ret := ret(data_width - 5 downto 0) & "1101";
                      when 'e' | 'E'  =>  ret := ret(data_width - 5 downto 0) & "1110";
                      when 'f' | 'F'  =>  ret := ret(data_width - 5 downto 0) & "1111";
                      when 'x' | 'X'  =>  ret := ret(data_width - 5 downto 0) & "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0000";
     	                when '1'    =>  ret := "0001";
                      when '2'    =>  ret := "0010";
                      when '3'    =>  ret := "0011";
                      when '4'    =>  ret := "0100";
                      when '5'    =>  ret := "0101";
                      when '6'    =>  ret := "0110";
                      when '7'    =>  ret := "0111";
                      when '8'    =>  ret := "1000";
                      when '9'    =>  ret := "1001";
                      when 'a' | 'A'  =>  ret := "1010";
                      when 'b' | 'B'  =>  ret := "1011";
                      when 'c' | 'C'  =>  ret := "1100";
                      when 'd' | 'D'  =>  ret := "1101";
                      when 'e' | 'E'  =>  ret := "1110";
                      when 'f' | 'F'  =>  ret := "1111";
                      when 'x' | 'X'  =>  ret := "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 3) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "000";
     	                when '1'    =>  ret := "001";
                      when '2'    =>  ret := "010";
                      when '3'    =>  ret := "011";
                      when '4'    =>  ret := "100";
                      when '5'    =>  ret := "101";
                      when '6'    =>  ret := "110";
                      when '7'    =>  ret := "111";
                      when 'x' | 'X'  =>  ret := "XXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 2) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "00";
     	                when '1'    =>  ret := "01";
                      when '2'    =>  ret := "10";
                      when '3'    =>  ret := "11";
                      when 'x' | 'X'  =>  ret := "XX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 1) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0";
     	                when '1'    =>  ret := "1";
                      when 'x' | 'X'  =>  ret := "X";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              else
                  report string'("Wrong data_width.");
                  return ret;
              end if;
              idx := idx + 1;
          end loop;
          return ret;
      end function;

    function esl_str_dec2int (RHS : STRING) return INTEGER is
        variable	ret	:   integer;
        variable	idx	:   integer := 1;
    begin
        ret := 0;
        while true loop
            case RHS(idx)  is
                when '0'    =>  ret := ret * 10 + 0;
                when '1'    =>  ret := ret * 10 + 1;
                when '2'    =>  ret := ret * 10 + 2;
                when '3'    =>  ret := ret * 10 + 3;
                when '4'    =>  ret := ret * 10 + 4;
                when '5'    =>  ret := ret * 10 + 5;
                when '6'    =>  ret := ret * 10 + 6;
                when '7'    =>  ret := ret * 10 + 7;
                when '8'    =>  ret := ret * 10 + 8;
                when '9'    =>  ret := ret * 10 + 9;
                when ' '    =>  return ret;
                when others    =>  report "Wrong dec char " & RHS(idx);	return ret;
            end case;
            idx := idx + 1;
        end loop;
        return ret;
    end esl_str_dec2int;
      function esl_conv_string_hex (lv : STD_LOGIC_VECTOR) return STRING is
          constant str_len : integer := (lv'length + 3)/4;
          variable ret : STRING (1 to str_len);
          variable i, tmp: INTEGER;
          variable normal_lv : STD_LOGIC_VECTOR(lv'length - 1 downto 0);
          variable tmp_lv : STD_LOGIC_VECTOR(3 downto 0);
      begin
          normal_lv := lv;
          for i in 1 to str_len loop
              if(i = 1) then
                  if((lv'length mod 4) = 3) then
                      tmp_lv(2 downto 0) := normal_lv(lv'length - 1 downto lv'length - 3);
                      case tmp_lv(2 downto 0) is
                          when "000" => ret(i) := '0';
                          when "001" => ret(i) := '1';
                          when "010" => ret(i) := '2';
                          when "011" => ret(i) := '3';
                          when "100" => ret(i) := '4';
                          when "101" => ret(i) := '5';
                          when "110" => ret(i) := '6';
                          when "111" => ret(i) := '7';
                          when others  => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 2) then
                      tmp_lv(1 downto 0) := normal_lv(lv'length - 1 downto lv'length - 2);
                      case tmp_lv(1 downto 0) is
                          when "00" => ret(i) := '0';
                          when "01" => ret(i) := '1';
                          when "10" => ret(i) := '2';
                          when "11" => ret(i) := '3';
                          when others => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 1) then
                      tmp_lv(0 downto 0) := normal_lv(lv'length - 1 downto lv'length - 1);
                      case tmp_lv(0 downto 0) is
                          when "0" => ret(i) := '0';
                          when "1" => ret(i) := '1';
                          when others=> ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 0) then
                      tmp_lv(3 downto 0) := normal_lv(lv'length - 1 downto lv'length - 4);
                      case tmp_lv(3 downto 0) is
                          when "0000" => ret(i) := '0';
                          when "0001" => ret(i) := '1';
                          when "0010" => ret(i) := '2';
                          when "0011" => ret(i) := '3';
                          when "0100" => ret(i) := '4';
                          when "0101" => ret(i) := '5';
                          when "0110" => ret(i) := '6';
                          when "0111" => ret(i) := '7';
                          when "1000" => ret(i) := '8';
                          when "1001" => ret(i) := '9';
                          when "1010" => ret(i) := 'a';
                          when "1011" => ret(i) := 'b';
                          when "1100" => ret(i) := 'c';
                          when "1101" => ret(i) := 'd';
                          when "1110" => ret(i) := 'e';
                          when "1111" => ret(i) := 'f';
                          when others   => ret(i) := 'X';
                      end case;
                  end if;
              else
                  tmp_lv(3 downto 0) := normal_lv((str_len - i) * 4 + 3 downto (str_len - i) * 4);
                  case tmp_lv(3 downto 0) is
                      when "0000" => ret(i) := '0';
                      when "0001" => ret(i) := '1';
                      when "0010" => ret(i) := '2';
                      when "0011" => ret(i) := '3';
                      when "0100" => ret(i) := '4';
                      when "0101" => ret(i) := '5';
                      when "0110" => ret(i) := '6';
                      when "0111" => ret(i) := '7';
                      when "1000" => ret(i) := '8';
                      when "1001" => ret(i) := '9';
                      when "1010" => ret(i) := 'a';
                      when "1011" => ret(i) := 'b';
                      when "1100" => ret(i) := 'c';
                      when "1101" => ret(i) := 'd';
                      when "1110" => ret(i) := 'e';
                      when "1111" => ret(i) := 'f';
                      when others   => ret(i) := 'X';
                  end case;
              end if;
          end loop;
          return ret;
      end function;

  -- purpose: initialise the random state variable based on an integer seed
  function init_rand(seed : integer) return T_RANDINT is
    variable result : T_RANDINT;
  begin
    -- If the seed is smaller than the minimum value of the random state variable, use the minimum value
    if seed < T_RANDINT'low then
      result := T_RANDINT'low;
      -- If the seed is larger than the maximum value of the random state variable, use the maximum value
    elsif seed > T_RANDINT'high then
      result := T_RANDINT'high;
      -- If the seed is within the range of the random state variable, just use the seed
    else
      result := seed;
    end if;
    -- Return the result
    return result;
  end init_rand;


  -- purpose: generate a random integer between min and max limits
  procedure rand_int(variable rand   : inout T_RANDINT;
                     constant minval : in    integer;
                     constant maxval : in    integer;
                     variable result : out   integer
                     ) is

    variable k, q      : integer;
    variable real_rand : real;
    variable res       : integer;

  begin
    -- Create a new random integer in the range 1 to 2**31-1 and put it back into rand VARIABLE
    -- Based on an example from Numerical Recipes in C, 2nd Edition, page 279
    k   := rand/127773;
    q   := 16807*(rand-k*127773)-2836*k;
    if q < 0 then
      q := q + 2147483647;
    end if;
    rand := init_rand(q);

    -- Convert this integer to a real number in the range 0 to 1
    real_rand := (real(rand - T_RANDINT'low)) / real(T_RANDINT'high - T_RANDINT'low);
    -- Convert this real number to an integer in the range minval to maxval
    -- The +1 and -0.5 are to get equal probability of minval and maxval as other values
    res    := integer((real_rand * real(maxval+1-minval)) - 0.5) + minval;
    -- VHDL real to integer conversion doesn't define what happens for x.5 so deal with this
    if res < minval then
      res  := minval;
    elsif res > maxval then
      res  := maxval;
    end if;
    -- assign output
    result := res;

  end rand_int;

begin
AESL_inst_example    :   example port map (
   ap_clk  =>  ap_clk,
   ap_rst_n  =>  ap_rst_n,
   ap_start  =>  ap_start,
   ap_done  =>  ap_done,
   ap_idle  =>  ap_idle,
   ap_ready  =>  ap_ready,
   m_axi_p_AWVALID  =>  m_axi_p_AWVALID,
   m_axi_p_AWREADY  =>  m_axi_p_AWREADY,
   m_axi_p_AWADDR  =>  m_axi_p_AWADDR,
   m_axi_p_AWID  =>  m_axi_p_AWID,
   m_axi_p_AWLEN  =>  m_axi_p_AWLEN,
   m_axi_p_AWSIZE  =>  m_axi_p_AWSIZE,
   m_axi_p_AWBURST  =>  m_axi_p_AWBURST,
   m_axi_p_AWLOCK  =>  m_axi_p_AWLOCK,
   m_axi_p_AWCACHE  =>  m_axi_p_AWCACHE,
   m_axi_p_AWPROT  =>  m_axi_p_AWPROT,
   m_axi_p_AWQOS  =>  m_axi_p_AWQOS,
   m_axi_p_AWREGION  =>  m_axi_p_AWREGION,
   m_axi_p_AWUSER  =>  m_axi_p_AWUSER,
   m_axi_p_WVALID  =>  m_axi_p_WVALID,
   m_axi_p_WREADY  =>  m_axi_p_WREADY,
   m_axi_p_WDATA  =>  m_axi_p_WDATA,
   m_axi_p_WSTRB  =>  m_axi_p_WSTRB,
   m_axi_p_WLAST  =>  m_axi_p_WLAST,
   m_axi_p_WID  =>  m_axi_p_WID,
   m_axi_p_WUSER  =>  m_axi_p_WUSER,
   m_axi_p_ARVALID  =>  m_axi_p_ARVALID,
   m_axi_p_ARREADY  =>  m_axi_p_ARREADY,
   m_axi_p_ARADDR  =>  m_axi_p_ARADDR,
   m_axi_p_ARID  =>  m_axi_p_ARID,
   m_axi_p_ARLEN  =>  m_axi_p_ARLEN,
   m_axi_p_ARSIZE  =>  m_axi_p_ARSIZE,
   m_axi_p_ARBURST  =>  m_axi_p_ARBURST,
   m_axi_p_ARLOCK  =>  m_axi_p_ARLOCK,
   m_axi_p_ARCACHE  =>  m_axi_p_ARCACHE,
   m_axi_p_ARPROT  =>  m_axi_p_ARPROT,
   m_axi_p_ARQOS  =>  m_axi_p_ARQOS,
   m_axi_p_ARREGION  =>  m_axi_p_ARREGION,
   m_axi_p_ARUSER  =>  m_axi_p_ARUSER,
   m_axi_p_RVALID  =>  m_axi_p_RVALID,
   m_axi_p_RREADY  =>  m_axi_p_RREADY,
   m_axi_p_RDATA  =>  m_axi_p_RDATA,
   m_axi_p_RLAST  =>  m_axi_p_RLAST,
   m_axi_p_RID  =>  m_axi_p_RID,
   m_axi_p_RUSER  =>  m_axi_p_RUSER,
   m_axi_p_RRESP  =>  m_axi_p_RRESP,
   m_axi_p_BVALID  =>  m_axi_p_BVALID,
   m_axi_p_BREADY  =>  m_axi_p_BREADY,
   m_axi_p_BRESP  =>  m_axi_p_BRESP,
   m_axi_p_BID  =>  m_axi_p_BID,
   m_axi_p_BUSER  =>  m_axi_p_BUSER,
   m_axi_a_AWVALID  =>  m_axi_a_AWVALID,
   m_axi_a_AWREADY  =>  m_axi_a_AWREADY,
   m_axi_a_AWADDR  =>  m_axi_a_AWADDR,
   m_axi_a_AWID  =>  m_axi_a_AWID,
   m_axi_a_AWLEN  =>  m_axi_a_AWLEN,
   m_axi_a_AWSIZE  =>  m_axi_a_AWSIZE,
   m_axi_a_AWBURST  =>  m_axi_a_AWBURST,
   m_axi_a_AWLOCK  =>  m_axi_a_AWLOCK,
   m_axi_a_AWCACHE  =>  m_axi_a_AWCACHE,
   m_axi_a_AWPROT  =>  m_axi_a_AWPROT,
   m_axi_a_AWQOS  =>  m_axi_a_AWQOS,
   m_axi_a_AWREGION  =>  m_axi_a_AWREGION,
   m_axi_a_AWUSER  =>  m_axi_a_AWUSER,
   m_axi_a_WVALID  =>  m_axi_a_WVALID,
   m_axi_a_WREADY  =>  m_axi_a_WREADY,
   m_axi_a_WDATA  =>  m_axi_a_WDATA,
   m_axi_a_WSTRB  =>  m_axi_a_WSTRB,
   m_axi_a_WLAST  =>  m_axi_a_WLAST,
   m_axi_a_WID  =>  m_axi_a_WID,
   m_axi_a_WUSER  =>  m_axi_a_WUSER,
   m_axi_a_ARVALID  =>  m_axi_a_ARVALID,
   m_axi_a_ARREADY  =>  m_axi_a_ARREADY,
   m_axi_a_ARADDR  =>  m_axi_a_ARADDR,
   m_axi_a_ARID  =>  m_axi_a_ARID,
   m_axi_a_ARLEN  =>  m_axi_a_ARLEN,
   m_axi_a_ARSIZE  =>  m_axi_a_ARSIZE,
   m_axi_a_ARBURST  =>  m_axi_a_ARBURST,
   m_axi_a_ARLOCK  =>  m_axi_a_ARLOCK,
   m_axi_a_ARCACHE  =>  m_axi_a_ARCACHE,
   m_axi_a_ARPROT  =>  m_axi_a_ARPROT,
   m_axi_a_ARQOS  =>  m_axi_a_ARQOS,
   m_axi_a_ARREGION  =>  m_axi_a_ARREGION,
   m_axi_a_ARUSER  =>  m_axi_a_ARUSER,
   m_axi_a_RVALID  =>  m_axi_a_RVALID,
   m_axi_a_RREADY  =>  m_axi_a_RREADY,
   m_axi_a_RDATA  =>  m_axi_a_RDATA,
   m_axi_a_RLAST  =>  m_axi_a_RLAST,
   m_axi_a_RID  =>  m_axi_a_RID,
   m_axi_a_RUSER  =>  m_axi_a_RUSER,
   m_axi_a_RRESP  =>  m_axi_a_RRESP,
   m_axi_a_BVALID  =>  m_axi_a_BVALID,
   m_axi_a_BREADY  =>  m_axi_a_BREADY,
   m_axi_a_BRESP  =>  m_axi_a_BRESP,
   m_axi_a_BID  =>  m_axi_a_BID,
   m_axi_a_BUSER  =>  m_axi_a_BUSER
);

-- Assignment for control signal
  ap_clk <= AESL_clock;
  ap_rst_n <= AESL_reset;
  AESL_reset <= rst;
  ap_start <= AESL_start;
  AESL_start <= start;
  AESL_done <= ap_done;
  AESL_idle <= ap_idle;
  AESL_ready <= ap_ready;
  AESL_ce <= ce;
  AESL_continue <= continue;
AESL_axi_master_inst_p : AESL_axi_master_p port map (
    clk   =>   AESL_clock,
    reset =>   AESL_reset,
    TRAN_p_AWVALID => m_axi_p_AWVALID,
    TRAN_p_AWREADY => m_axi_p_AWREADY,
    TRAN_p_AWADDR => m_axi_p_AWADDR,
    TRAN_p_AWID => m_axi_p_AWID,
    TRAN_p_AWLEN => m_axi_p_AWLEN,
    TRAN_p_AWSIZE => m_axi_p_AWSIZE,
    TRAN_p_AWBURST => m_axi_p_AWBURST,
    TRAN_p_AWLOCK => m_axi_p_AWLOCK,
    TRAN_p_AWCACHE => m_axi_p_AWCACHE,
    TRAN_p_AWPROT => m_axi_p_AWPROT,
    TRAN_p_AWQOS => m_axi_p_AWQOS,
    TRAN_p_AWREGION => m_axi_p_AWREGION,
    TRAN_p_AWUSER => m_axi_p_AWUSER,
    TRAN_p_WVALID => m_axi_p_WVALID,
    TRAN_p_WREADY => m_axi_p_WREADY,
    TRAN_p_WDATA => m_axi_p_WDATA,
    TRAN_p_WSTRB => m_axi_p_WSTRB,
    TRAN_p_WLAST => m_axi_p_WLAST,
    TRAN_p_WID => m_axi_p_WID,
    TRAN_p_WUSER => m_axi_p_WUSER,
    TRAN_p_ARVALID => m_axi_p_ARVALID,
    TRAN_p_ARREADY => m_axi_p_ARREADY,
    TRAN_p_ARADDR => m_axi_p_ARADDR,
    TRAN_p_ARID => m_axi_p_ARID,
    TRAN_p_ARLEN => m_axi_p_ARLEN,
    TRAN_p_ARSIZE => m_axi_p_ARSIZE,
    TRAN_p_ARBURST => m_axi_p_ARBURST,
    TRAN_p_ARLOCK => m_axi_p_ARLOCK,
    TRAN_p_ARCACHE => m_axi_p_ARCACHE,
    TRAN_p_ARPROT => m_axi_p_ARPROT,
    TRAN_p_ARQOS => m_axi_p_ARQOS,
    TRAN_p_ARREGION => m_axi_p_ARREGION,
    TRAN_p_ARUSER => m_axi_p_ARUSER,
    TRAN_p_RVALID => m_axi_p_RVALID,
    TRAN_p_RREADY => m_axi_p_RREADY,
    TRAN_p_RDATA => m_axi_p_RDATA,
    TRAN_p_RLAST => m_axi_p_RLAST,
    TRAN_p_RID => m_axi_p_RID,
    TRAN_p_RUSER => m_axi_p_RUSER,
    TRAN_p_RRESP => m_axi_p_RRESP,
    TRAN_p_BVALID => m_axi_p_BVALID,
    TRAN_p_BREADY => m_axi_p_BREADY,
    TRAN_p_BRESP => m_axi_p_BRESP,
    TRAN_p_BID => m_axi_p_BID,
    TRAN_p_BUSER => m_axi_p_BUSER,
    ready => AESL_axi_master_p_ready,
    done  => AESL_axi_master_p_done
);
AESL_axi_master_p_ready	<=   ready;
AESL_axi_master_p_done	<=   AESL_done_delay;
AESL_axi_master_inst_a : AESL_axi_master_a port map (
    clk   =>   AESL_clock,
    reset =>   AESL_reset,
    TRAN_a_AWVALID => m_axi_a_AWVALID,
    TRAN_a_AWREADY => m_axi_a_AWREADY,
    TRAN_a_AWADDR => m_axi_a_AWADDR,
    TRAN_a_AWID => m_axi_a_AWID,
    TRAN_a_AWLEN => m_axi_a_AWLEN,
    TRAN_a_AWSIZE => m_axi_a_AWSIZE,
    TRAN_a_AWBURST => m_axi_a_AWBURST,
    TRAN_a_AWLOCK => m_axi_a_AWLOCK,
    TRAN_a_AWCACHE => m_axi_a_AWCACHE,
    TRAN_a_AWPROT => m_axi_a_AWPROT,
    TRAN_a_AWQOS => m_axi_a_AWQOS,
    TRAN_a_AWREGION => m_axi_a_AWREGION,
    TRAN_a_AWUSER => m_axi_a_AWUSER,
    TRAN_a_WVALID => m_axi_a_WVALID,
    TRAN_a_WREADY => m_axi_a_WREADY,
    TRAN_a_WDATA => m_axi_a_WDATA,
    TRAN_a_WSTRB => m_axi_a_WSTRB,
    TRAN_a_WLAST => m_axi_a_WLAST,
    TRAN_a_WID => m_axi_a_WID,
    TRAN_a_WUSER => m_axi_a_WUSER,
    TRAN_a_ARVALID => m_axi_a_ARVALID,
    TRAN_a_ARREADY => m_axi_a_ARREADY,
    TRAN_a_ARADDR => m_axi_a_ARADDR,
    TRAN_a_ARID => m_axi_a_ARID,
    TRAN_a_ARLEN => m_axi_a_ARLEN,
    TRAN_a_ARSIZE => m_axi_a_ARSIZE,
    TRAN_a_ARBURST => m_axi_a_ARBURST,
    TRAN_a_ARLOCK => m_axi_a_ARLOCK,
    TRAN_a_ARCACHE => m_axi_a_ARCACHE,
    TRAN_a_ARPROT => m_axi_a_ARPROT,
    TRAN_a_ARQOS => m_axi_a_ARQOS,
    TRAN_a_ARREGION => m_axi_a_ARREGION,
    TRAN_a_ARUSER => m_axi_a_ARUSER,
    TRAN_a_RVALID => m_axi_a_RVALID,
    TRAN_a_RREADY => m_axi_a_RREADY,
    TRAN_a_RDATA => m_axi_a_RDATA,
    TRAN_a_RLAST => m_axi_a_RLAST,
    TRAN_a_RID => m_axi_a_RID,
    TRAN_a_RUSER => m_axi_a_RUSER,
    TRAN_a_RRESP => m_axi_a_RRESP,
    TRAN_a_BVALID => m_axi_a_BVALID,
    TRAN_a_BREADY => m_axi_a_BREADY,
    TRAN_a_BRESP => m_axi_a_BRESP,
    TRAN_a_BID => m_axi_a_BID,
    TRAN_a_BUSER => m_axi_a_BUSER,
    ready => AESL_axi_master_a_ready,
    done  => AESL_axi_master_a_done
);
AESL_axi_master_a_ready	<=   ready;
AESL_axi_master_a_done	<=   AESL_done_delay;

generate_AESL_ready_cnt_proc : process
begin
    AESL_ready_cnt := 0;
    wait until AESL_reset = '1';
    while(AESL_ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(AESL_ready /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        AESL_ready_cnt := AESL_ready_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
end process;

generate_ready_cnt_proc   :   process
begin
    ready_cnt := 0;
    wait until AESL_reset = '1';
    while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(ready /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        ready_cnt := ready_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
    wait;
end process;

generate_done_cnt_proc    :   process
begin
    done_cnt := 0;
    wait until AESL_reset = '1';
    while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        done_cnt := done_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait for 0.4 ns;
    assert false report "simulation done!" severity note;
    assert false report "NORMAL EXIT (note: failure is to force the simulator to stop)" severity failure;
    wait;
end process;

gen_clock_proc :   process
begin
    AESL_clock <= '0';
    while(true) loop
        wait for (AUTOTB_CLOCK_PERIOD/2.0);
        AESL_clock <= not AESL_clock;
    end loop;
    wait;
end process;

gen_reset_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    rst <= '0';
    wait for 100 ns;
    for i in 1 to 3 loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    rst <= '1';
    wait;
end process;

gen_start_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
  start <= '0';
  ce <= '1';
    wait until AESL_reset = '1';
  wait until (AESL_clock'event and AESL_clock = '1');
  start <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM + 1) loop
      wait until (AESL_clock'event and AESL_clock = '1');
      if(AESL_ready = '1') then
          start <= '0';
          start <= '1';
      end if;
  end loop;
  start <= '0';
  wait;
end process;


gen_continue_proc : process(AESL_done)
begin
    continue <= AESL_done;
end process;

gen_ready_initial_proc : process
begin
    ready_initial <= '0';
    wait until AESL_start = '1';
    ready_initial <= '1';
    wait until AESL_clock'event and AESL_clock = '1';
    ready_initial <= '0';
    wait;
end process;

gen_AESL_ready_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
          AESL_ready_delay <= '0';
      else
          AESL_ready_delay <= AESL_ready;
      end if;
  end if;
end process;

ready_last_n_proc : process
begin
  ready_last_n <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
    wait until AESL_clock'event and AESL_clock = '1';
  end loop;
  ready_last_n <= '0';
  wait;
end process;

gen_ready_delay_n_last_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
          ready_delay_last_n <= '0';
      else
          ready_delay_last_n <= ready_last_n;
      end if;
  end if;
end process;

ready <= (ready_initial or AESL_ready_delay);
ready_wire <= ready_initial or AESL_ready_delay;
gen_done_delay_last_n_proc : process
begin
  done_delay_last_n <= '1';
  while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
      wait until (AESL_clock'event and AESL_clock = '1');
  end loop;
  done_delay_last_n <= '0';
  wait;
end process;

gen_done_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
          AESL_done_delay <= '0';
          AESL_done_delay2 <= '0';
      else
          AESL_done_delay <= AESL_done and done_delay_last_n;
          AESL_done_delay2 <= AESL_done_delay;
      end if;
  end if;
end process;

gen_interface_done : process(ready, AESL_done_delay)
begin
    if(ready_cnt > 0 and ready_cnt < AUTOTB_TRANSACTION_NUM) then
        interface_done <= ready;
    elsif(ready_cnt = AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_done_delay;
    else
        interface_done <= '0';
    end if;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_a_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_a_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_a_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait for 0.2 ns;
    file_open(fstatus, fp, AUTOTB_TVOUT_a_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_a_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_clock_counter_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
        AESL_clk_counter := 0;
    else
        AESL_clk_counter := AESL_clk_counter + 1;
    end if;
  end if;
end process;

gen_mLatcnterout_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
          AESL_mLatCnterOut_addr := 0;
          AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter + 1 ;
      else
          if (AESL_done = '1' and AESL_mLatCnterOut_addr < AUTOTB_TRANSACTION_NUM + 1) then
              AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter;
              AESL_mLatCnterOut_addr := AESL_mLatCnterOut_addr + 1;
          end if;
      end if;
  end if;
end process;

gen_mLatcnterin_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '0') then
          AESL_mLatCnterIn_addr := 0;
      else
    if (AESL_start = '1' and AESL_mLatCnterIn_addr = 0) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
    if (AESL_ready = '1' and AESL_mLatCnterIn_addr < AUTOTB_TRANSACTION_NUM + 1 ) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
      end if;
  end if;
end process;

gen_performance_check_proc : process
    variable transaction_counter : INTEGER;
    variable i : INTEGER;
    file     fp :   TEXT;
    variable    fstatus         :   FILE_OPEN_STATUS;
    variable    token_line      :   LINE;
    variable    token           :   STRING(1 to 1024);

    variable latthistime : INTEGER;
    variable lattotal : INTEGER;
    variable latmax : INTEGER;
    variable latmin : INTEGER;


    variable thrthistime : INTEGER;
    variable thrtotal : INTEGER;
    variable thrmax : INTEGER;
    variable thrmin : INTEGER;

    variable lataver : INTEGER;
    variable thraver : INTEGER;
    type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
    variable lat_array : latency_record;
    variable thr_array : latency_record;

begin
    i := 0;
    lattotal  := 0;
    latmax    := 0;
    latmin    := 16#7fffffff#;
    lataver   := 0;

    thrtotal  := 0;
    thrmax    := 0;
    thrmin    := 16#7fffffff#;
    thraver   := 0;

    wait until (AESL_clock'event and AESL_clock = '1');
    wait until (AESL_reset = '1'); 
    while (done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until (AESL_clock'event and AESL_clock = '1');
    end loop;
  wait for 0.001 ns;

    if (AESL_mLatCnterIn_addr = 1 or AESL_mLatCnterIn_addr = 0 ) then
        latmax  := 0;
        latmin  := 0;
        lataver := 0;
        thrmax  := 0;
        thrmin  := 0;
        thraver := 0;
        lat_array(0) := 0;
        thr_array(0) := 0;
    elsif (AESL_mLatCnterOut_addr = 1 or AESL_mLatCnterOut_addr = 0 ) then
        latmax  := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        latmin  := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        lataver := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        thrmax  := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        thrmin  := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        thraver := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        lat_array(0) := lataver;
        thr_array(0) := thraver;
    else
    -- LATENCY
    for i in 0 to AESL_mLatCnterOut_addr - 1 loop
        latthistime := AESL_mLatCnterOut(i) - AESL_mLatCnterIn(i) ;
        if ( i > 0 ) then
            if (latthistime - 1 < 0) then
                latthistime := 0;
            else
                latthistime := latthistime - 1;
            end if;
        end if;
        lattotal := lattotal + latthistime;
        lat_array(i) := latthistime;
        if (latthistime > latmax) then
          latmax := latthistime;
        end if;
        if (latthistime < latmin) then
          latmin := latthistime;
        end if;
    end loop;
    -- II
    for i in 0 to AESL_mLatCnterIn_addr - 2 loop
        thrthistime := AESL_mLatCnterIn(i + 1) - AESL_mLatCnterIn(i);
        if ( i = 0 ) then
            thrthistime := thrthistime + 1;
        end if;
        thrtotal := thrtotal + thrthistime;
        thr_array(i) := thrthistime;
        if (thrthistime > thrmax) then
          thrmax := thrthistime;
        end if;
        if (thrthistime < thrmin) then
          thrmin := thrthistime;
        end if;
    end loop;
    
    thr_array(AESL_mLatCnterIn_addr - 1) := 0;
    lataver := lattotal / ( AESL_mLatCnterOut_addr);
    thraver := thrtotal / ( AESL_mLatCnterIn_addr - 1 );
    end if;

    file_open(fstatus, fp, AUTOTB_LAT_RESULT_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_LAT_RESULT_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    
    write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
    writeline(fp, token_line);
    write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
    writeline(fp, token_line);
    write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
    writeline(fp, token_line);
    write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
    writeline(fp, token_line);
    write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
    writeline(fp, token_line);
    write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
    writeline(fp, token_line);
    file_close(fp);
    file_open(fstatus, fp, AUTOTB_PER_RESULT_TRANS_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_PER_RESULT_TRANS_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line,string'("                            latency            interval"));
    writeline(fp, token_line);
    for i in 0 to AESL_mLatCnterOut_addr - 1 loop
        write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
        writeline(fp, token_line);
    end loop;

    file_close(fp);
    wait;
end process;

end behav;
