// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AFAProcessFunction,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=142,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1654,HLS_SYN_LUT=1809}" *)

module AFAProcessFunction (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_p_AWVALID,
        m_axi_p_AWREADY,
        m_axi_p_AWADDR,
        m_axi_p_AWID,
        m_axi_p_AWLEN,
        m_axi_p_AWSIZE,
        m_axi_p_AWBURST,
        m_axi_p_AWLOCK,
        m_axi_p_AWCACHE,
        m_axi_p_AWPROT,
        m_axi_p_AWQOS,
        m_axi_p_AWREGION,
        m_axi_p_AWUSER,
        m_axi_p_WVALID,
        m_axi_p_WREADY,
        m_axi_p_WDATA,
        m_axi_p_WSTRB,
        m_axi_p_WLAST,
        m_axi_p_WID,
        m_axi_p_WUSER,
        m_axi_p_ARVALID,
        m_axi_p_ARREADY,
        m_axi_p_ARADDR,
        m_axi_p_ARID,
        m_axi_p_ARLEN,
        m_axi_p_ARSIZE,
        m_axi_p_ARBURST,
        m_axi_p_ARLOCK,
        m_axi_p_ARCACHE,
        m_axi_p_ARPROT,
        m_axi_p_ARQOS,
        m_axi_p_ARREGION,
        m_axi_p_ARUSER,
        m_axi_p_RVALID,
        m_axi_p_RREADY,
        m_axi_p_RDATA,
        m_axi_p_RLAST,
        m_axi_p_RID,
        m_axi_p_RUSER,
        m_axi_p_RRESP,
        m_axi_p_BVALID,
        m_axi_p_BREADY,
        m_axi_p_BRESP,
        m_axi_p_BID,
        m_axi_p_BUSER,
        m_axi_srcNet_AWVALID,
        m_axi_srcNet_AWREADY,
        m_axi_srcNet_AWADDR,
        m_axi_srcNet_AWID,
        m_axi_srcNet_AWLEN,
        m_axi_srcNet_AWSIZE,
        m_axi_srcNet_AWBURST,
        m_axi_srcNet_AWLOCK,
        m_axi_srcNet_AWCACHE,
        m_axi_srcNet_AWPROT,
        m_axi_srcNet_AWQOS,
        m_axi_srcNet_AWREGION,
        m_axi_srcNet_AWUSER,
        m_axi_srcNet_WVALID,
        m_axi_srcNet_WREADY,
        m_axi_srcNet_WDATA,
        m_axi_srcNet_WSTRB,
        m_axi_srcNet_WLAST,
        m_axi_srcNet_WID,
        m_axi_srcNet_WUSER,
        m_axi_srcNet_ARVALID,
        m_axi_srcNet_ARREADY,
        m_axi_srcNet_ARADDR,
        m_axi_srcNet_ARID,
        m_axi_srcNet_ARLEN,
        m_axi_srcNet_ARSIZE,
        m_axi_srcNet_ARBURST,
        m_axi_srcNet_ARLOCK,
        m_axi_srcNet_ARCACHE,
        m_axi_srcNet_ARPROT,
        m_axi_srcNet_ARQOS,
        m_axi_srcNet_ARREGION,
        m_axi_srcNet_ARUSER,
        m_axi_srcNet_RVALID,
        m_axi_srcNet_RREADY,
        m_axi_srcNet_RDATA,
        m_axi_srcNet_RLAST,
        m_axi_srcNet_RID,
        m_axi_srcNet_RUSER,
        m_axi_srcNet_RRESP,
        m_axi_srcNet_BVALID,
        m_axi_srcNet_BREADY,
        m_axi_srcNet_BRESP,
        m_axi_srcNet_BID,
        m_axi_srcNet_BUSER,
        m_axi_dstNet_AWVALID,
        m_axi_dstNet_AWREADY,
        m_axi_dstNet_AWADDR,
        m_axi_dstNet_AWID,
        m_axi_dstNet_AWLEN,
        m_axi_dstNet_AWSIZE,
        m_axi_dstNet_AWBURST,
        m_axi_dstNet_AWLOCK,
        m_axi_dstNet_AWCACHE,
        m_axi_dstNet_AWPROT,
        m_axi_dstNet_AWQOS,
        m_axi_dstNet_AWREGION,
        m_axi_dstNet_AWUSER,
        m_axi_dstNet_WVALID,
        m_axi_dstNet_WREADY,
        m_axi_dstNet_WDATA,
        m_axi_dstNet_WSTRB,
        m_axi_dstNet_WLAST,
        m_axi_dstNet_WID,
        m_axi_dstNet_WUSER,
        m_axi_dstNet_ARVALID,
        m_axi_dstNet_ARREADY,
        m_axi_dstNet_ARADDR,
        m_axi_dstNet_ARID,
        m_axi_dstNet_ARLEN,
        m_axi_dstNet_ARSIZE,
        m_axi_dstNet_ARBURST,
        m_axi_dstNet_ARLOCK,
        m_axi_dstNet_ARCACHE,
        m_axi_dstNet_ARPROT,
        m_axi_dstNet_ARQOS,
        m_axi_dstNet_ARREGION,
        m_axi_dstNet_ARUSER,
        m_axi_dstNet_RVALID,
        m_axi_dstNet_RREADY,
        m_axi_dstNet_RDATA,
        m_axi_dstNet_RLAST,
        m_axi_dstNet_RID,
        m_axi_dstNet_RUSER,
        m_axi_dstNet_RRESP,
        m_axi_dstNet_BVALID,
        m_axi_dstNet_BREADY,
        m_axi_dstNet_BRESP,
        m_axi_dstNet_BID,
        m_axi_dstNet_BUSER
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 13'b1;
parameter    ap_ST_st2_fsm_1 = 13'b10;
parameter    ap_ST_st3_fsm_2 = 13'b100;
parameter    ap_ST_st4_fsm_3 = 13'b1000;
parameter    ap_ST_st5_fsm_4 = 13'b10000;
parameter    ap_ST_st6_fsm_5 = 13'b100000;
parameter    ap_ST_pp0_stg0_fsm_6 = 13'b1000000;
parameter    ap_ST_st10_fsm_7 = 13'b10000000;
parameter    ap_ST_pp1_stg0_fsm_8 = 13'b100000000;
parameter    ap_ST_st14_fsm_9 = 13'b1000000000;
parameter    ap_ST_st15_fsm_10 = 13'b10000000000;
parameter    ap_ST_st16_fsm_11 = 13'b100000000000;
parameter    ap_ST_st17_fsm_12 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_M_AXI_P_ID_WIDTH = 1;
parameter    C_M_AXI_P_ADDR_WIDTH = 32;
parameter    C_M_AXI_P_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_P_AWUSER_WIDTH = 1;
parameter    C_M_AXI_P_ARUSER_WIDTH = 1;
parameter    C_M_AXI_P_WUSER_WIDTH = 1;
parameter    C_M_AXI_P_RUSER_WIDTH = 1;
parameter    C_M_AXI_P_BUSER_WIDTH = 1;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_P_TARGET_ADDR = 0;
parameter    C_M_AXI_P_USER_VALUE = 0;
parameter    C_M_AXI_P_PROT_VALUE = 0;
parameter    C_M_AXI_P_CACHE_VALUE = 3;
parameter    C_M_AXI_SRCNET_ID_WIDTH = 1;
parameter    C_M_AXI_SRCNET_ADDR_WIDTH = 32;
parameter    C_M_AXI_SRCNET_DATA_WIDTH = 32;
parameter    C_M_AXI_SRCNET_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SRCNET_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SRCNET_WUSER_WIDTH = 1;
parameter    C_M_AXI_SRCNET_RUSER_WIDTH = 1;
parameter    C_M_AXI_SRCNET_BUSER_WIDTH = 1;
parameter    C_M_AXI_SRCNET_TARGET_ADDR = 0;
parameter    C_M_AXI_SRCNET_USER_VALUE = 0;
parameter    C_M_AXI_SRCNET_PROT_VALUE = 0;
parameter    C_M_AXI_SRCNET_CACHE_VALUE = 3;
parameter    C_M_AXI_DSTNET_ID_WIDTH = 1;
parameter    C_M_AXI_DSTNET_ADDR_WIDTH = 32;
parameter    C_M_AXI_DSTNET_DATA_WIDTH = 32;
parameter    C_M_AXI_DSTNET_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DSTNET_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DSTNET_WUSER_WIDTH = 1;
parameter    C_M_AXI_DSTNET_RUSER_WIDTH = 1;
parameter    C_M_AXI_DSTNET_BUSER_WIDTH = 1;
parameter    C_M_AXI_DSTNET_TARGET_ADDR = 0;
parameter    C_M_AXI_DSTNET_USER_VALUE = 0;
parameter    C_M_AXI_DSTNET_PROT_VALUE = 0;
parameter    C_M_AXI_DSTNET_CACHE_VALUE = 3;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;
parameter    C_M_AXI_P_WSTRB_WIDTH = (C_M_AXI_P_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_SRCNET_WSTRB_WIDTH = (C_M_AXI_SRCNET_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_DSTNET_WSTRB_WIDTH = (C_M_AXI_DSTNET_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_p_AWVALID;
input   m_axi_p_AWREADY;
output  [C_M_AXI_P_ADDR_WIDTH - 1 : 0] m_axi_p_AWADDR;
output  [C_M_AXI_P_ID_WIDTH - 1 : 0] m_axi_p_AWID;
output  [7:0] m_axi_p_AWLEN;
output  [2:0] m_axi_p_AWSIZE;
output  [1:0] m_axi_p_AWBURST;
output  [1:0] m_axi_p_AWLOCK;
output  [3:0] m_axi_p_AWCACHE;
output  [2:0] m_axi_p_AWPROT;
output  [3:0] m_axi_p_AWQOS;
output  [3:0] m_axi_p_AWREGION;
output  [C_M_AXI_P_AWUSER_WIDTH - 1 : 0] m_axi_p_AWUSER;
output   m_axi_p_WVALID;
input   m_axi_p_WREADY;
output  [C_M_AXI_P_DATA_WIDTH - 1 : 0] m_axi_p_WDATA;
output  [C_M_AXI_P_WSTRB_WIDTH - 1 : 0] m_axi_p_WSTRB;
output   m_axi_p_WLAST;
output  [C_M_AXI_P_ID_WIDTH - 1 : 0] m_axi_p_WID;
output  [C_M_AXI_P_WUSER_WIDTH - 1 : 0] m_axi_p_WUSER;
output   m_axi_p_ARVALID;
input   m_axi_p_ARREADY;
output  [C_M_AXI_P_ADDR_WIDTH - 1 : 0] m_axi_p_ARADDR;
output  [C_M_AXI_P_ID_WIDTH - 1 : 0] m_axi_p_ARID;
output  [7:0] m_axi_p_ARLEN;
output  [2:0] m_axi_p_ARSIZE;
output  [1:0] m_axi_p_ARBURST;
output  [1:0] m_axi_p_ARLOCK;
output  [3:0] m_axi_p_ARCACHE;
output  [2:0] m_axi_p_ARPROT;
output  [3:0] m_axi_p_ARQOS;
output  [3:0] m_axi_p_ARREGION;
output  [C_M_AXI_P_ARUSER_WIDTH - 1 : 0] m_axi_p_ARUSER;
input   m_axi_p_RVALID;
output   m_axi_p_RREADY;
input  [C_M_AXI_P_DATA_WIDTH - 1 : 0] m_axi_p_RDATA;
input   m_axi_p_RLAST;
input  [C_M_AXI_P_ID_WIDTH - 1 : 0] m_axi_p_RID;
input  [C_M_AXI_P_RUSER_WIDTH - 1 : 0] m_axi_p_RUSER;
input  [1:0] m_axi_p_RRESP;
input   m_axi_p_BVALID;
output   m_axi_p_BREADY;
input  [1:0] m_axi_p_BRESP;
input  [C_M_AXI_P_ID_WIDTH - 1 : 0] m_axi_p_BID;
input  [C_M_AXI_P_BUSER_WIDTH - 1 : 0] m_axi_p_BUSER;
output   m_axi_srcNet_AWVALID;
input   m_axi_srcNet_AWREADY;
output  [C_M_AXI_SRCNET_ADDR_WIDTH - 1 : 0] m_axi_srcNet_AWADDR;
output  [C_M_AXI_SRCNET_ID_WIDTH - 1 : 0] m_axi_srcNet_AWID;
output  [7:0] m_axi_srcNet_AWLEN;
output  [2:0] m_axi_srcNet_AWSIZE;
output  [1:0] m_axi_srcNet_AWBURST;
output  [1:0] m_axi_srcNet_AWLOCK;
output  [3:0] m_axi_srcNet_AWCACHE;
output  [2:0] m_axi_srcNet_AWPROT;
output  [3:0] m_axi_srcNet_AWQOS;
output  [3:0] m_axi_srcNet_AWREGION;
output  [C_M_AXI_SRCNET_AWUSER_WIDTH - 1 : 0] m_axi_srcNet_AWUSER;
output   m_axi_srcNet_WVALID;
input   m_axi_srcNet_WREADY;
output  [C_M_AXI_SRCNET_DATA_WIDTH - 1 : 0] m_axi_srcNet_WDATA;
output  [C_M_AXI_SRCNET_WSTRB_WIDTH - 1 : 0] m_axi_srcNet_WSTRB;
output   m_axi_srcNet_WLAST;
output  [C_M_AXI_SRCNET_ID_WIDTH - 1 : 0] m_axi_srcNet_WID;
output  [C_M_AXI_SRCNET_WUSER_WIDTH - 1 : 0] m_axi_srcNet_WUSER;
output   m_axi_srcNet_ARVALID;
input   m_axi_srcNet_ARREADY;
output  [C_M_AXI_SRCNET_ADDR_WIDTH - 1 : 0] m_axi_srcNet_ARADDR;
output  [C_M_AXI_SRCNET_ID_WIDTH - 1 : 0] m_axi_srcNet_ARID;
output  [7:0] m_axi_srcNet_ARLEN;
output  [2:0] m_axi_srcNet_ARSIZE;
output  [1:0] m_axi_srcNet_ARBURST;
output  [1:0] m_axi_srcNet_ARLOCK;
output  [3:0] m_axi_srcNet_ARCACHE;
output  [2:0] m_axi_srcNet_ARPROT;
output  [3:0] m_axi_srcNet_ARQOS;
output  [3:0] m_axi_srcNet_ARREGION;
output  [C_M_AXI_SRCNET_ARUSER_WIDTH - 1 : 0] m_axi_srcNet_ARUSER;
input   m_axi_srcNet_RVALID;
output   m_axi_srcNet_RREADY;
input  [C_M_AXI_SRCNET_DATA_WIDTH - 1 : 0] m_axi_srcNet_RDATA;
input   m_axi_srcNet_RLAST;
input  [C_M_AXI_SRCNET_ID_WIDTH - 1 : 0] m_axi_srcNet_RID;
input  [C_M_AXI_SRCNET_RUSER_WIDTH - 1 : 0] m_axi_srcNet_RUSER;
input  [1:0] m_axi_srcNet_RRESP;
input   m_axi_srcNet_BVALID;
output   m_axi_srcNet_BREADY;
input  [1:0] m_axi_srcNet_BRESP;
input  [C_M_AXI_SRCNET_ID_WIDTH - 1 : 0] m_axi_srcNet_BID;
input  [C_M_AXI_SRCNET_BUSER_WIDTH - 1 : 0] m_axi_srcNet_BUSER;
output   m_axi_dstNet_AWVALID;
input   m_axi_dstNet_AWREADY;
output  [C_M_AXI_DSTNET_ADDR_WIDTH - 1 : 0] m_axi_dstNet_AWADDR;
output  [C_M_AXI_DSTNET_ID_WIDTH - 1 : 0] m_axi_dstNet_AWID;
output  [7:0] m_axi_dstNet_AWLEN;
output  [2:0] m_axi_dstNet_AWSIZE;
output  [1:0] m_axi_dstNet_AWBURST;
output  [1:0] m_axi_dstNet_AWLOCK;
output  [3:0] m_axi_dstNet_AWCACHE;
output  [2:0] m_axi_dstNet_AWPROT;
output  [3:0] m_axi_dstNet_AWQOS;
output  [3:0] m_axi_dstNet_AWREGION;
output  [C_M_AXI_DSTNET_AWUSER_WIDTH - 1 : 0] m_axi_dstNet_AWUSER;
output   m_axi_dstNet_WVALID;
input   m_axi_dstNet_WREADY;
output  [C_M_AXI_DSTNET_DATA_WIDTH - 1 : 0] m_axi_dstNet_WDATA;
output  [C_M_AXI_DSTNET_WSTRB_WIDTH - 1 : 0] m_axi_dstNet_WSTRB;
output   m_axi_dstNet_WLAST;
output  [C_M_AXI_DSTNET_ID_WIDTH - 1 : 0] m_axi_dstNet_WID;
output  [C_M_AXI_DSTNET_WUSER_WIDTH - 1 : 0] m_axi_dstNet_WUSER;
output   m_axi_dstNet_ARVALID;
input   m_axi_dstNet_ARREADY;
output  [C_M_AXI_DSTNET_ADDR_WIDTH - 1 : 0] m_axi_dstNet_ARADDR;
output  [C_M_AXI_DSTNET_ID_WIDTH - 1 : 0] m_axi_dstNet_ARID;
output  [7:0] m_axi_dstNet_ARLEN;
output  [2:0] m_axi_dstNet_ARSIZE;
output  [1:0] m_axi_dstNet_ARBURST;
output  [1:0] m_axi_dstNet_ARLOCK;
output  [3:0] m_axi_dstNet_ARCACHE;
output  [2:0] m_axi_dstNet_ARPROT;
output  [3:0] m_axi_dstNet_ARQOS;
output  [3:0] m_axi_dstNet_ARREGION;
output  [C_M_AXI_DSTNET_ARUSER_WIDTH - 1 : 0] m_axi_dstNet_ARUSER;
input   m_axi_dstNet_RVALID;
output   m_axi_dstNet_RREADY;
input  [C_M_AXI_DSTNET_DATA_WIDTH - 1 : 0] m_axi_dstNet_RDATA;
input   m_axi_dstNet_RLAST;
input  [C_M_AXI_DSTNET_ID_WIDTH - 1 : 0] m_axi_dstNet_RID;
input  [C_M_AXI_DSTNET_RUSER_WIDTH - 1 : 0] m_axi_dstNet_RUSER;
input  [1:0] m_axi_dstNet_RRESP;
input   m_axi_dstNet_BVALID;
output   m_axi_dstNet_BREADY;
input  [1:0] m_axi_dstNet_BRESP;
input  [C_M_AXI_DSTNET_ID_WIDTH - 1 : 0] m_axi_dstNet_BID;
input  [C_M_AXI_DSTNET_BUSER_WIDTH - 1 : 0] m_axi_dstNet_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm = 13'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_31;
reg    p_AWVALID;
wire    p_AWREADY;
wire   [31:0] p_AWADDR;
wire   [0:0] p_AWID;
wire   [31:0] p_AWLEN;
wire   [2:0] p_AWSIZE;
wire   [1:0] p_AWBURST;
wire   [1:0] p_AWLOCK;
wire   [3:0] p_AWCACHE;
wire   [2:0] p_AWPROT;
wire   [3:0] p_AWQOS;
wire   [3:0] p_AWREGION;
wire   [0:0] p_AWUSER;
reg    p_WVALID;
wire    p_WREADY;
wire   [31:0] p_WDATA;
wire   [3:0] p_WSTRB;
wire    p_WLAST;
wire   [0:0] p_WID;
wire   [0:0] p_WUSER;
reg    p_ARVALID;
wire    p_ARREADY;
wire   [31:0] p_ARADDR;
wire   [0:0] p_ARID;
wire   [31:0] p_ARLEN;
wire   [2:0] p_ARSIZE;
wire   [1:0] p_ARBURST;
wire   [1:0] p_ARLOCK;
wire   [3:0] p_ARCACHE;
wire   [2:0] p_ARPROT;
wire   [3:0] p_ARQOS;
wire   [3:0] p_ARREGION;
wire   [0:0] p_ARUSER;
wire    p_RVALID;
reg    p_RREADY;
wire   [31:0] p_RDATA;
wire    p_RLAST;
wire   [0:0] p_RID;
wire   [0:0] p_RUSER;
wire   [1:0] p_RRESP;
wire    p_BVALID;
reg    p_BREADY;
wire   [1:0] p_BRESP;
wire   [0:0] p_BID;
wire   [0:0] p_BUSER;
wire    AFAProcessFunction_p_m_axi_U_ap_dummy_ce;
wire    srcNet_AWVALID;
wire    srcNet_AWREADY;
wire   [31:0] srcNet_AWADDR;
wire   [0:0] srcNet_AWID;
wire   [31:0] srcNet_AWLEN;
wire   [2:0] srcNet_AWSIZE;
wire   [1:0] srcNet_AWBURST;
wire   [1:0] srcNet_AWLOCK;
wire   [3:0] srcNet_AWCACHE;
wire   [2:0] srcNet_AWPROT;
wire   [3:0] srcNet_AWQOS;
wire   [3:0] srcNet_AWREGION;
wire   [0:0] srcNet_AWUSER;
wire    srcNet_WVALID;
wire    srcNet_WREADY;
wire   [7:0] srcNet_WDATA;
wire   [0:0] srcNet_WSTRB;
wire    srcNet_WLAST;
wire   [0:0] srcNet_WID;
wire   [0:0] srcNet_WUSER;
wire    srcNet_ARVALID;
wire    srcNet_ARREADY;
wire   [31:0] srcNet_ARADDR;
wire   [0:0] srcNet_ARID;
wire   [31:0] srcNet_ARLEN;
wire   [2:0] srcNet_ARSIZE;
wire   [1:0] srcNet_ARBURST;
wire   [1:0] srcNet_ARLOCK;
wire   [3:0] srcNet_ARCACHE;
wire   [2:0] srcNet_ARPROT;
wire   [3:0] srcNet_ARQOS;
wire   [3:0] srcNet_ARREGION;
wire   [0:0] srcNet_ARUSER;
wire    srcNet_RVALID;
wire    srcNet_RREADY;
wire   [7:0] srcNet_RDATA;
wire    srcNet_RLAST;
wire   [0:0] srcNet_RID;
wire   [0:0] srcNet_RUSER;
wire   [1:0] srcNet_RRESP;
wire    srcNet_BVALID;
wire    srcNet_BREADY;
wire   [1:0] srcNet_BRESP;
wire   [0:0] srcNet_BID;
wire   [0:0] srcNet_BUSER;
wire    AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce;
wire    dstNet_AWVALID;
wire    dstNet_AWREADY;
wire   [31:0] dstNet_AWADDR;
wire   [0:0] dstNet_AWID;
wire   [31:0] dstNet_AWLEN;
wire   [2:0] dstNet_AWSIZE;
wire   [1:0] dstNet_AWBURST;
wire   [1:0] dstNet_AWLOCK;
wire   [3:0] dstNet_AWCACHE;
wire   [2:0] dstNet_AWPROT;
wire   [3:0] dstNet_AWQOS;
wire   [3:0] dstNet_AWREGION;
wire   [0:0] dstNet_AWUSER;
wire    dstNet_WVALID;
wire    dstNet_WREADY;
wire   [7:0] dstNet_WDATA;
wire   [0:0] dstNet_WSTRB;
wire    dstNet_WLAST;
wire   [0:0] dstNet_WID;
wire   [0:0] dstNet_WUSER;
wire    dstNet_ARVALID;
wire    dstNet_ARREADY;
wire   [31:0] dstNet_ARADDR;
wire   [0:0] dstNet_ARID;
wire   [31:0] dstNet_ARLEN;
wire   [2:0] dstNet_ARSIZE;
wire   [1:0] dstNet_ARBURST;
wire   [1:0] dstNet_ARLOCK;
wire   [3:0] dstNet_ARCACHE;
wire   [2:0] dstNet_ARPROT;
wire   [3:0] dstNet_ARQOS;
wire   [3:0] dstNet_ARREGION;
wire   [0:0] dstNet_ARUSER;
wire    dstNet_RVALID;
wire    dstNet_RREADY;
wire   [7:0] dstNet_RDATA;
wire    dstNet_RLAST;
wire   [0:0] dstNet_RID;
wire   [0:0] dstNet_RUSER;
wire   [1:0] dstNet_RRESP;
wire    dstNet_BVALID;
wire    dstNet_BREADY;
wire   [1:0] dstNet_BRESP;
wire   [0:0] dstNet_BID;
wire   [0:0] dstNet_BUSER;
wire    AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce;
reg   [6:0] indvar_reg_113;
reg   [6:0] ap_reg_ppstg_indvar_reg_113_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_6;
reg    ap_sig_bdd_414;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg   [0:0] exitcond_reg_171;
reg    ap_sig_bdd_423;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [6:0] indvar4_reg_125;
wire   [0:0] exitcond_fu_137_p2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_171_pp0_it1;
wire   [6:0] indvar_next_fu_143_p2;
reg   [6:0] indvar_next_reg_175;
reg   [31:0] p_read_reg_180;
wire   [0:0] exitcond6_fu_154_p2;
reg   [0:0] exitcond6_reg_185;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_8;
reg    ap_sig_bdd_450;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond6_reg_185_pp1_it1;
reg    ap_sig_ioackin_p_WREADY;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
wire   [6:0] indvar_next5_fu_160_p2;
wire   [31:0] AFAProcessFunctionParamBlock_q0;
reg   [31:0] AFAProcessFunctionParamBlock_l_reg_199;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_484;
reg    ap_sig_cseq_ST_st10_fsm_7;
reg    ap_sig_bdd_496;
reg    ap_sig_ioackin_p_AWREADY;
reg   [5:0] AFAProcessFunctionParamBlock_address0;
reg    AFAProcessFunctionParamBlock_ce0;
reg    AFAProcessFunctionParamBlock_we0;
wire   [31:0] AFAProcessFunctionParamBlock_d0;
reg   [6:0] indvar_phi_fu_117_p4;
wire   [63:0] tmp_fu_149_p1;
wire   [63:0] tmp_1_fu_166_p1;
reg    ap_reg_ioackin_p_ARREADY = 1'b0;
reg    ap_sig_ioackin_p_ARREADY;
reg    ap_reg_ioackin_p_AWREADY = 1'b0;
reg    ap_reg_ioackin_p_WREADY = 1'b0;
reg    ap_sig_cseq_ST_st17_fsm_12;
reg    ap_sig_bdd_567;
reg   [12:0] ap_NS_fsm;
reg    ap_sig_bdd_655;
reg    ap_sig_bdd_555;


AFAProcessFunction_p_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_ID_WIDTH( C_M_AXI_P_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_P_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_P_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_P_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_P_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_P_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_P_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_P_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_P_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_P_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_P_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_P_CACHE_VALUE ))
AFAProcessFunction_p_m_axi_U(
    .AWVALID( m_axi_p_AWVALID ),
    .AWREADY( m_axi_p_AWREADY ),
    .AWADDR( m_axi_p_AWADDR ),
    .AWID( m_axi_p_AWID ),
    .AWLEN( m_axi_p_AWLEN ),
    .AWSIZE( m_axi_p_AWSIZE ),
    .AWBURST( m_axi_p_AWBURST ),
    .AWLOCK( m_axi_p_AWLOCK ),
    .AWCACHE( m_axi_p_AWCACHE ),
    .AWPROT( m_axi_p_AWPROT ),
    .AWQOS( m_axi_p_AWQOS ),
    .AWREGION( m_axi_p_AWREGION ),
    .AWUSER( m_axi_p_AWUSER ),
    .WVALID( m_axi_p_WVALID ),
    .WREADY( m_axi_p_WREADY ),
    .WDATA( m_axi_p_WDATA ),
    .WSTRB( m_axi_p_WSTRB ),
    .WLAST( m_axi_p_WLAST ),
    .WID( m_axi_p_WID ),
    .WUSER( m_axi_p_WUSER ),
    .ARVALID( m_axi_p_ARVALID ),
    .ARREADY( m_axi_p_ARREADY ),
    .ARADDR( m_axi_p_ARADDR ),
    .ARID( m_axi_p_ARID ),
    .ARLEN( m_axi_p_ARLEN ),
    .ARSIZE( m_axi_p_ARSIZE ),
    .ARBURST( m_axi_p_ARBURST ),
    .ARLOCK( m_axi_p_ARLOCK ),
    .ARCACHE( m_axi_p_ARCACHE ),
    .ARPROT( m_axi_p_ARPROT ),
    .ARQOS( m_axi_p_ARQOS ),
    .ARREGION( m_axi_p_ARREGION ),
    .ARUSER( m_axi_p_ARUSER ),
    .RVALID( m_axi_p_RVALID ),
    .RREADY( m_axi_p_RREADY ),
    .RDATA( m_axi_p_RDATA ),
    .RLAST( m_axi_p_RLAST ),
    .RID( m_axi_p_RID ),
    .RUSER( m_axi_p_RUSER ),
    .RRESP( m_axi_p_RRESP ),
    .BVALID( m_axi_p_BVALID ),
    .BREADY( m_axi_p_BREADY ),
    .BRESP( m_axi_p_BRESP ),
    .BID( m_axi_p_BID ),
    .BUSER( m_axi_p_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( AFAProcessFunction_p_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( p_ARVALID ),
    .I_ARREADY( p_ARREADY ),
    .I_ARADDR( p_ARADDR ),
    .I_ARID( p_ARID ),
    .I_ARLEN( p_ARLEN ),
    .I_ARSIZE( p_ARSIZE ),
    .I_ARLOCK( p_ARLOCK ),
    .I_ARCACHE( p_ARCACHE ),
    .I_ARQOS( p_ARQOS ),
    .I_ARPROT( p_ARPROT ),
    .I_ARUSER( p_ARUSER ),
    .I_ARBURST( p_ARBURST ),
    .I_ARREGION( p_ARREGION ),
    .I_RVALID( p_RVALID ),
    .I_RREADY( p_RREADY ),
    .I_RDATA( p_RDATA ),
    .I_RID( p_RID ),
    .I_RUSER( p_RUSER ),
    .I_RRESP( p_RRESP ),
    .I_RLAST( p_RLAST ),
    .I_AWVALID( p_AWVALID ),
    .I_AWREADY( p_AWREADY ),
    .I_AWADDR( p_AWADDR ),
    .I_AWID( p_AWID ),
    .I_AWLEN( p_AWLEN ),
    .I_AWSIZE( p_AWSIZE ),
    .I_AWLOCK( p_AWLOCK ),
    .I_AWCACHE( p_AWCACHE ),
    .I_AWQOS( p_AWQOS ),
    .I_AWPROT( p_AWPROT ),
    .I_AWUSER( p_AWUSER ),
    .I_AWBURST( p_AWBURST ),
    .I_AWREGION( p_AWREGION ),
    .I_WVALID( p_WVALID ),
    .I_WREADY( p_WREADY ),
    .I_WDATA( p_WDATA ),
    .I_WID( p_WID ),
    .I_WUSER( p_WUSER ),
    .I_WLAST( p_WLAST ),
    .I_WSTRB( p_WSTRB ),
    .I_BVALID( p_BVALID ),
    .I_BREADY( p_BREADY ),
    .I_BRESP( p_BRESP ),
    .I_BID( p_BID ),
    .I_BUSER( p_BUSER )
);

AFAProcessFunction_srcNet_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_ID_WIDTH( C_M_AXI_SRCNET_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_SRCNET_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_SRCNET_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_SRCNET_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_SRCNET_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_SRCNET_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_SRCNET_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_SRCNET_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_SRCNET_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_SRCNET_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SRCNET_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SRCNET_CACHE_VALUE ))
AFAProcessFunction_srcNet_m_axi_U(
    .AWVALID( m_axi_srcNet_AWVALID ),
    .AWREADY( m_axi_srcNet_AWREADY ),
    .AWADDR( m_axi_srcNet_AWADDR ),
    .AWID( m_axi_srcNet_AWID ),
    .AWLEN( m_axi_srcNet_AWLEN ),
    .AWSIZE( m_axi_srcNet_AWSIZE ),
    .AWBURST( m_axi_srcNet_AWBURST ),
    .AWLOCK( m_axi_srcNet_AWLOCK ),
    .AWCACHE( m_axi_srcNet_AWCACHE ),
    .AWPROT( m_axi_srcNet_AWPROT ),
    .AWQOS( m_axi_srcNet_AWQOS ),
    .AWREGION( m_axi_srcNet_AWREGION ),
    .AWUSER( m_axi_srcNet_AWUSER ),
    .WVALID( m_axi_srcNet_WVALID ),
    .WREADY( m_axi_srcNet_WREADY ),
    .WDATA( m_axi_srcNet_WDATA ),
    .WSTRB( m_axi_srcNet_WSTRB ),
    .WLAST( m_axi_srcNet_WLAST ),
    .WID( m_axi_srcNet_WID ),
    .WUSER( m_axi_srcNet_WUSER ),
    .ARVALID( m_axi_srcNet_ARVALID ),
    .ARREADY( m_axi_srcNet_ARREADY ),
    .ARADDR( m_axi_srcNet_ARADDR ),
    .ARID( m_axi_srcNet_ARID ),
    .ARLEN( m_axi_srcNet_ARLEN ),
    .ARSIZE( m_axi_srcNet_ARSIZE ),
    .ARBURST( m_axi_srcNet_ARBURST ),
    .ARLOCK( m_axi_srcNet_ARLOCK ),
    .ARCACHE( m_axi_srcNet_ARCACHE ),
    .ARPROT( m_axi_srcNet_ARPROT ),
    .ARQOS( m_axi_srcNet_ARQOS ),
    .ARREGION( m_axi_srcNet_ARREGION ),
    .ARUSER( m_axi_srcNet_ARUSER ),
    .RVALID( m_axi_srcNet_RVALID ),
    .RREADY( m_axi_srcNet_RREADY ),
    .RDATA( m_axi_srcNet_RDATA ),
    .RLAST( m_axi_srcNet_RLAST ),
    .RID( m_axi_srcNet_RID ),
    .RUSER( m_axi_srcNet_RUSER ),
    .RRESP( m_axi_srcNet_RRESP ),
    .BVALID( m_axi_srcNet_BVALID ),
    .BREADY( m_axi_srcNet_BREADY ),
    .BRESP( m_axi_srcNet_BRESP ),
    .BID( m_axi_srcNet_BID ),
    .BUSER( m_axi_srcNet_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( srcNet_ARVALID ),
    .I_ARREADY( srcNet_ARREADY ),
    .I_ARADDR( srcNet_ARADDR ),
    .I_ARID( srcNet_ARID ),
    .I_ARLEN( srcNet_ARLEN ),
    .I_ARSIZE( srcNet_ARSIZE ),
    .I_ARLOCK( srcNet_ARLOCK ),
    .I_ARCACHE( srcNet_ARCACHE ),
    .I_ARQOS( srcNet_ARQOS ),
    .I_ARPROT( srcNet_ARPROT ),
    .I_ARUSER( srcNet_ARUSER ),
    .I_ARBURST( srcNet_ARBURST ),
    .I_ARREGION( srcNet_ARREGION ),
    .I_RVALID( srcNet_RVALID ),
    .I_RREADY( srcNet_RREADY ),
    .I_RDATA( srcNet_RDATA ),
    .I_RID( srcNet_RID ),
    .I_RUSER( srcNet_RUSER ),
    .I_RRESP( srcNet_RRESP ),
    .I_RLAST( srcNet_RLAST ),
    .I_AWVALID( srcNet_AWVALID ),
    .I_AWREADY( srcNet_AWREADY ),
    .I_AWADDR( srcNet_AWADDR ),
    .I_AWID( srcNet_AWID ),
    .I_AWLEN( srcNet_AWLEN ),
    .I_AWSIZE( srcNet_AWSIZE ),
    .I_AWLOCK( srcNet_AWLOCK ),
    .I_AWCACHE( srcNet_AWCACHE ),
    .I_AWQOS( srcNet_AWQOS ),
    .I_AWPROT( srcNet_AWPROT ),
    .I_AWUSER( srcNet_AWUSER ),
    .I_AWBURST( srcNet_AWBURST ),
    .I_AWREGION( srcNet_AWREGION ),
    .I_WVALID( srcNet_WVALID ),
    .I_WREADY( srcNet_WREADY ),
    .I_WDATA( srcNet_WDATA ),
    .I_WID( srcNet_WID ),
    .I_WUSER( srcNet_WUSER ),
    .I_WLAST( srcNet_WLAST ),
    .I_WSTRB( srcNet_WSTRB ),
    .I_BVALID( srcNet_BVALID ),
    .I_BREADY( srcNet_BREADY ),
    .I_BRESP( srcNet_BRESP ),
    .I_BID( srcNet_BID ),
    .I_BUSER( srcNet_BUSER )
);

AFAProcessFunction_dstNet_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_ID_WIDTH( C_M_AXI_DSTNET_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_DSTNET_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_DSTNET_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_DSTNET_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_DSTNET_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_DSTNET_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_DSTNET_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_DSTNET_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DSTNET_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DSTNET_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DSTNET_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DSTNET_CACHE_VALUE ))
AFAProcessFunction_dstNet_m_axi_U(
    .AWVALID( m_axi_dstNet_AWVALID ),
    .AWREADY( m_axi_dstNet_AWREADY ),
    .AWADDR( m_axi_dstNet_AWADDR ),
    .AWID( m_axi_dstNet_AWID ),
    .AWLEN( m_axi_dstNet_AWLEN ),
    .AWSIZE( m_axi_dstNet_AWSIZE ),
    .AWBURST( m_axi_dstNet_AWBURST ),
    .AWLOCK( m_axi_dstNet_AWLOCK ),
    .AWCACHE( m_axi_dstNet_AWCACHE ),
    .AWPROT( m_axi_dstNet_AWPROT ),
    .AWQOS( m_axi_dstNet_AWQOS ),
    .AWREGION( m_axi_dstNet_AWREGION ),
    .AWUSER( m_axi_dstNet_AWUSER ),
    .WVALID( m_axi_dstNet_WVALID ),
    .WREADY( m_axi_dstNet_WREADY ),
    .WDATA( m_axi_dstNet_WDATA ),
    .WSTRB( m_axi_dstNet_WSTRB ),
    .WLAST( m_axi_dstNet_WLAST ),
    .WID( m_axi_dstNet_WID ),
    .WUSER( m_axi_dstNet_WUSER ),
    .ARVALID( m_axi_dstNet_ARVALID ),
    .ARREADY( m_axi_dstNet_ARREADY ),
    .ARADDR( m_axi_dstNet_ARADDR ),
    .ARID( m_axi_dstNet_ARID ),
    .ARLEN( m_axi_dstNet_ARLEN ),
    .ARSIZE( m_axi_dstNet_ARSIZE ),
    .ARBURST( m_axi_dstNet_ARBURST ),
    .ARLOCK( m_axi_dstNet_ARLOCK ),
    .ARCACHE( m_axi_dstNet_ARCACHE ),
    .ARPROT( m_axi_dstNet_ARPROT ),
    .ARQOS( m_axi_dstNet_ARQOS ),
    .ARREGION( m_axi_dstNet_ARREGION ),
    .ARUSER( m_axi_dstNet_ARUSER ),
    .RVALID( m_axi_dstNet_RVALID ),
    .RREADY( m_axi_dstNet_RREADY ),
    .RDATA( m_axi_dstNet_RDATA ),
    .RLAST( m_axi_dstNet_RLAST ),
    .RID( m_axi_dstNet_RID ),
    .RUSER( m_axi_dstNet_RUSER ),
    .RRESP( m_axi_dstNet_RRESP ),
    .BVALID( m_axi_dstNet_BVALID ),
    .BREADY( m_axi_dstNet_BREADY ),
    .BRESP( m_axi_dstNet_BRESP ),
    .BID( m_axi_dstNet_BID ),
    .BUSER( m_axi_dstNet_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( dstNet_ARVALID ),
    .I_ARREADY( dstNet_ARREADY ),
    .I_ARADDR( dstNet_ARADDR ),
    .I_ARID( dstNet_ARID ),
    .I_ARLEN( dstNet_ARLEN ),
    .I_ARSIZE( dstNet_ARSIZE ),
    .I_ARLOCK( dstNet_ARLOCK ),
    .I_ARCACHE( dstNet_ARCACHE ),
    .I_ARQOS( dstNet_ARQOS ),
    .I_ARPROT( dstNet_ARPROT ),
    .I_ARUSER( dstNet_ARUSER ),
    .I_ARBURST( dstNet_ARBURST ),
    .I_ARREGION( dstNet_ARREGION ),
    .I_RVALID( dstNet_RVALID ),
    .I_RREADY( dstNet_RREADY ),
    .I_RDATA( dstNet_RDATA ),
    .I_RID( dstNet_RID ),
    .I_RUSER( dstNet_RUSER ),
    .I_RRESP( dstNet_RRESP ),
    .I_RLAST( dstNet_RLAST ),
    .I_AWVALID( dstNet_AWVALID ),
    .I_AWREADY( dstNet_AWREADY ),
    .I_AWADDR( dstNet_AWADDR ),
    .I_AWID( dstNet_AWID ),
    .I_AWLEN( dstNet_AWLEN ),
    .I_AWSIZE( dstNet_AWSIZE ),
    .I_AWLOCK( dstNet_AWLOCK ),
    .I_AWCACHE( dstNet_AWCACHE ),
    .I_AWQOS( dstNet_AWQOS ),
    .I_AWPROT( dstNet_AWPROT ),
    .I_AWUSER( dstNet_AWUSER ),
    .I_AWBURST( dstNet_AWBURST ),
    .I_AWREGION( dstNet_AWREGION ),
    .I_WVALID( dstNet_WVALID ),
    .I_WREADY( dstNet_WREADY ),
    .I_WDATA( dstNet_WDATA ),
    .I_WID( dstNet_WID ),
    .I_WUSER( dstNet_WUSER ),
    .I_WLAST( dstNet_WLAST ),
    .I_WSTRB( dstNet_WSTRB ),
    .I_BVALID( dstNet_BVALID ),
    .I_BREADY( dstNet_BREADY ),
    .I_BRESP( dstNet_BRESP ),
    .I_BID( dstNet_BID ),
    .I_BUSER( dstNet_BUSER )
);

AFAProcessFunction_AFAProcessFunctionParamBlock #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
AFAProcessFunctionParamBlock_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( AFAProcessFunctionParamBlock_address0 ),
    .ce0( AFAProcessFunctionParamBlock_ce0 ),
    .we0( AFAProcessFunctionParamBlock_we0 ),
    .d0( AFAProcessFunctionParamBlock_d0 ),
    .q0( AFAProcessFunctionParamBlock_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_p_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_p_ARREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_p_ARREADY))) begin
                ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_655) begin
                ap_reg_ioackin_p_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_p_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_p_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_p_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY)) begin
                ap_reg_ioackin_p_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == p_AWREADY)) begin
                ap_reg_ioackin_p_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_p_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_p_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_p_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_555) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
                ap_reg_ioackin_p_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == p_WREADY)) begin
                ap_reg_ioackin_p_WREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_fu_137_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond_fu_137_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_fu_137_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond6_fu_154_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond6_fu_154_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond6_fu_154_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY))) begin
            ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY))) begin
        indvar4_reg_125 <= ap_const_lv7_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond6_fu_154_p2))) begin
        indvar4_reg_125 <= indvar_next5_fu_160_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond_reg_171 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_reg_113 <= indvar_next_reg_175;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        indvar_reg_113 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond6_reg_185))) begin
        AFAProcessFunctionParamBlock_l_reg_199 <= AFAProcessFunctionParamBlock_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        ap_reg_ppstg_exitcond6_reg_185_pp1_it1 <= exitcond6_reg_185;
        exitcond6_reg_185 <= exitcond6_fu_154_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_reg_ppstg_exitcond_reg_171_pp0_it1 <= exitcond_reg_171;
        ap_reg_ppstg_indvar_reg_113_pp0_it1 <= indvar_reg_113;
        exitcond_reg_171 <= exitcond_fu_137_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_next_reg_175 <= indvar_next_fu_143_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond_reg_171 == ap_const_lv1_0) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        p_read_reg_180 <= p_RDATA;
    end
end

/// AFAProcessFunctionParamBlock_address0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2 or ap_sig_cseq_ST_pp1_stg0_fsm_8 or ap_reg_ppiten_pp1_it0 or tmp_fu_149_p1 or tmp_1_fu_166_p1)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        AFAProcessFunctionParamBlock_address0 = tmp_fu_149_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        AFAProcessFunctionParamBlock_address0 = tmp_1_fu_166_p1;
    end else begin
        AFAProcessFunctionParamBlock_address0 = 'bx;
    end
end

/// AFAProcessFunctionParamBlock_ce0 assign process. ///
always @ (ap_sig_bdd_423 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_cseq_ST_pp1_stg0_fsm_8 or ap_reg_ppiten_pp1_it0 or ap_reg_ppstg_exitcond6_reg_185_pp1_it1 or ap_sig_ioackin_p_WREADY or ap_reg_ppiten_pp1_it2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        AFAProcessFunctionParamBlock_ce0 = ap_const_logic_1;
    end else begin
        AFAProcessFunctionParamBlock_ce0 = ap_const_logic_0;
    end
end

/// AFAProcessFunctionParamBlock_we0 assign process. ///
always @ (ap_sig_bdd_423 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond_reg_171_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_171_pp0_it1))) begin
        AFAProcessFunctionParamBlock_we0 = ap_const_logic_1;
    end else begin
        AFAProcessFunctionParamBlock_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (p_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(p_BVALID == ap_const_logic_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (p_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(p_BVALID == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. ///
always @ (ap_sig_bdd_414)
begin
    if (ap_sig_bdd_414) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp1_stg0_fsm_8 assign process. ///
always @ (ap_sig_bdd_450)
begin
    if (ap_sig_bdd_450) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_7 assign process. ///
always @ (ap_sig_bdd_496)
begin
    if (ap_sig_bdd_496) begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_12 assign process. ///
always @ (ap_sig_bdd_567)
begin
    if (ap_sig_bdd_567) begin
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_31)
begin
    if (ap_sig_bdd_31) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_484)
begin
    if (ap_sig_bdd_484) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_p_ARREADY assign process. ///
always @ (p_ARREADY or ap_reg_ioackin_p_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_p_ARREADY)) begin
        ap_sig_ioackin_p_ARREADY = p_ARREADY;
    end else begin
        ap_sig_ioackin_p_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_p_AWREADY assign process. ///
always @ (p_AWREADY or ap_reg_ioackin_p_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_p_AWREADY)) begin
        ap_sig_ioackin_p_AWREADY = p_AWREADY;
    end else begin
        ap_sig_ioackin_p_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_p_WREADY assign process. ///
always @ (p_WREADY or ap_reg_ioackin_p_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_p_WREADY)) begin
        ap_sig_ioackin_p_WREADY = p_WREADY;
    end else begin
        ap_sig_ioackin_p_WREADY = ap_const_logic_1;
    end
end

/// indvar_phi_fu_117_p4 assign process. ///
always @ (indvar_reg_113 or ap_sig_cseq_ST_pp0_stg0_fsm_6 or exitcond_reg_171 or ap_reg_ppiten_pp0_it1 or indvar_next_reg_175)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond_reg_171 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        indvar_phi_fu_117_p4 = indvar_next_reg_175;
    end else begin
        indvar_phi_fu_117_p4 = indvar_reg_113;
    end
end

/// p_ARVALID assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_reg_ioackin_p_ARREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_p_ARREADY))) begin
        p_ARVALID = ap_const_logic_1;
    end else begin
        p_ARVALID = ap_const_logic_0;
    end
end

/// p_AWVALID assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_7 or ap_reg_ioackin_p_AWREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & (ap_const_logic_0 == ap_reg_ioackin_p_AWREADY))) begin
        p_AWVALID = ap_const_logic_1;
    end else begin
        p_AWVALID = ap_const_logic_0;
    end
end

/// p_BREADY assign process. ///
always @ (p_BVALID or ap_sig_cseq_ST_st17_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_12) & ~(p_BVALID == ap_const_logic_0))) begin
        p_BREADY = ap_const_logic_1;
    end else begin
        p_BREADY = ap_const_logic_0;
    end
end

/// p_RREADY assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_6 or exitcond_reg_171 or ap_sig_bdd_423 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_6) & (exitcond_reg_171 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        p_RREADY = ap_const_logic_1;
    end else begin
        p_RREADY = ap_const_logic_0;
    end
end

/// p_WVALID assign process. ///
always @ (ap_reg_ppstg_exitcond6_reg_185_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ioackin_p_WREADY)
begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & (ap_const_logic_0 == ap_reg_ioackin_p_WREADY))) begin
        p_WVALID = ap_const_logic_1;
    end else begin
        p_WVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or p_BVALID or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_423 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or exitcond_fu_137_p2 or exitcond6_fu_154_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppstg_exitcond6_reg_185_pp1_it1 or ap_sig_ioackin_p_WREADY or ap_reg_ppiten_pp1_it2 or ap_sig_ioackin_p_AWREADY or ap_sig_ioackin_p_ARREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_p_ARREADY))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
        end
        ap_ST_pp0_stg0_fsm_6 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_fu_137_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_423 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_fu_137_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_6;
            end
        end
        ap_ST_st10_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_p_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end
        end
        ap_ST_pp1_stg0_fsm_8 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond6_fu_154_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_p_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond6_fu_154_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st14_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end
        end
        ap_ST_st14_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_10;
        end
        ap_ST_st15_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_11;
        end
        ap_ST_st16_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_12;
        end
        ap_ST_st17_fsm_12 : 
        begin
            if (~(p_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_12;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AFAProcessFunctionParamBlock_d0 = p_read_reg_180;
assign AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce = ap_const_logic_1;
assign AFAProcessFunction_p_m_axi_U_ap_dummy_ce = ap_const_logic_1;
assign AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce = ap_const_logic_1;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_31 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_31 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_414 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_414 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_423 assign process. ///
always @ (p_RVALID or exitcond_reg_171)
begin
    ap_sig_bdd_423 = ((p_RVALID == ap_const_logic_0) & (exitcond_reg_171 == ap_const_lv1_0));
end

/// ap_sig_bdd_450 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_450 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_484 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_484 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_496 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_496 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_555 assign process. ///
always @ (ap_reg_ppstg_exitcond6_reg_185_pp1_it1 or ap_reg_ppiten_pp1_it2)
begin
    ap_sig_bdd_555 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond6_reg_185_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2));
end

/// ap_sig_bdd_567 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_567 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_655 assign process. ///
always @ (ap_start or p_ARREADY)
begin
    ap_sig_bdd_655 = ((ap_const_logic_1 == p_ARREADY) & ~(ap_start == ap_const_logic_0));
end
assign dstNet_ARADDR = ap_const_lv32_0;
assign dstNet_ARBURST = ap_const_lv2_0;
assign dstNet_ARCACHE = ap_const_lv4_0;
assign dstNet_ARID = ap_const_lv1_0;
assign dstNet_ARLEN = ap_const_lv32_0;
assign dstNet_ARLOCK = ap_const_lv2_0;
assign dstNet_ARPROT = ap_const_lv3_0;
assign dstNet_ARQOS = ap_const_lv4_0;
assign dstNet_ARREGION = ap_const_lv4_0;
assign dstNet_ARSIZE = ap_const_lv3_0;
assign dstNet_ARUSER = ap_const_lv1_0;
assign dstNet_ARVALID = ap_const_logic_0;
assign dstNet_AWADDR = ap_const_lv32_0;
assign dstNet_AWBURST = ap_const_lv2_0;
assign dstNet_AWCACHE = ap_const_lv4_0;
assign dstNet_AWID = ap_const_lv1_0;
assign dstNet_AWLEN = ap_const_lv32_0;
assign dstNet_AWLOCK = ap_const_lv2_0;
assign dstNet_AWPROT = ap_const_lv3_0;
assign dstNet_AWQOS = ap_const_lv4_0;
assign dstNet_AWREGION = ap_const_lv4_0;
assign dstNet_AWSIZE = ap_const_lv3_0;
assign dstNet_AWUSER = ap_const_lv1_0;
assign dstNet_AWVALID = ap_const_logic_0;
assign dstNet_BREADY = ap_const_logic_0;
assign dstNet_RREADY = ap_const_logic_0;
assign dstNet_WDATA = ap_const_lv8_0;
assign dstNet_WID = ap_const_lv1_0;
assign dstNet_WLAST = ap_const_logic_0;
assign dstNet_WSTRB = ap_const_lv1_0;
assign dstNet_WUSER = ap_const_lv1_0;
assign dstNet_WVALID = ap_const_logic_0;
assign exitcond6_fu_154_p2 = (indvar4_reg_125 == ap_const_lv7_40? 1'b1: 1'b0);
assign exitcond_fu_137_p2 = (indvar_phi_fu_117_p4 == ap_const_lv7_40? 1'b1: 1'b0);
assign indvar_next5_fu_160_p2 = (indvar4_reg_125 + ap_const_lv7_1);
assign indvar_next_fu_143_p2 = (indvar_phi_fu_117_p4 + ap_const_lv7_1);
assign p_ARADDR = ap_const_lv32_0;
assign p_ARBURST = ap_const_lv2_0;
assign p_ARCACHE = ap_const_lv4_0;
assign p_ARID = ap_const_lv1_0;
assign p_ARLEN = ap_const_lv32_40;
assign p_ARLOCK = ap_const_lv2_0;
assign p_ARPROT = ap_const_lv3_0;
assign p_ARQOS = ap_const_lv4_0;
assign p_ARREGION = ap_const_lv4_0;
assign p_ARSIZE = ap_const_lv3_0;
assign p_ARUSER = ap_const_lv1_0;
assign p_AWADDR = ap_const_lv32_0;
assign p_AWBURST = ap_const_lv2_0;
assign p_AWCACHE = ap_const_lv4_0;
assign p_AWID = ap_const_lv1_0;
assign p_AWLEN = ap_const_lv32_40;
assign p_AWLOCK = ap_const_lv2_0;
assign p_AWPROT = ap_const_lv3_0;
assign p_AWQOS = ap_const_lv4_0;
assign p_AWREGION = ap_const_lv4_0;
assign p_AWSIZE = ap_const_lv3_0;
assign p_AWUSER = ap_const_lv1_0;
assign p_WDATA = AFAProcessFunctionParamBlock_l_reg_199;
assign p_WID = ap_const_lv1_0;
assign p_WLAST = ap_const_logic_0;
assign p_WSTRB = ap_const_lv4_F;
assign p_WUSER = ap_const_lv1_0;
assign srcNet_ARADDR = ap_const_lv32_0;
assign srcNet_ARBURST = ap_const_lv2_0;
assign srcNet_ARCACHE = ap_const_lv4_0;
assign srcNet_ARID = ap_const_lv1_0;
assign srcNet_ARLEN = ap_const_lv32_0;
assign srcNet_ARLOCK = ap_const_lv2_0;
assign srcNet_ARPROT = ap_const_lv3_0;
assign srcNet_ARQOS = ap_const_lv4_0;
assign srcNet_ARREGION = ap_const_lv4_0;
assign srcNet_ARSIZE = ap_const_lv3_0;
assign srcNet_ARUSER = ap_const_lv1_0;
assign srcNet_ARVALID = ap_const_logic_0;
assign srcNet_AWADDR = ap_const_lv32_0;
assign srcNet_AWBURST = ap_const_lv2_0;
assign srcNet_AWCACHE = ap_const_lv4_0;
assign srcNet_AWID = ap_const_lv1_0;
assign srcNet_AWLEN = ap_const_lv32_0;
assign srcNet_AWLOCK = ap_const_lv2_0;
assign srcNet_AWPROT = ap_const_lv3_0;
assign srcNet_AWQOS = ap_const_lv4_0;
assign srcNet_AWREGION = ap_const_lv4_0;
assign srcNet_AWSIZE = ap_const_lv3_0;
assign srcNet_AWUSER = ap_const_lv1_0;
assign srcNet_AWVALID = ap_const_logic_0;
assign srcNet_BREADY = ap_const_logic_0;
assign srcNet_RREADY = ap_const_logic_0;
assign srcNet_WDATA = ap_const_lv8_0;
assign srcNet_WID = ap_const_lv1_0;
assign srcNet_WLAST = ap_const_logic_0;
assign srcNet_WSTRB = ap_const_lv1_0;
assign srcNet_WUSER = ap_const_lv1_0;
assign srcNet_WVALID = ap_const_logic_0;
assign tmp_1_fu_166_p1 = indvar4_reg_125;
assign tmp_fu_149_p1 = ap_reg_ppstg_indvar_reg_113_pp0_it1;


endmodule //AFAProcessFunction

