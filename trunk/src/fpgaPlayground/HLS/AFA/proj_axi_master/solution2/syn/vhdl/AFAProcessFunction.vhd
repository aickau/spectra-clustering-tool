-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AFAProcessFunction is
generic (
    C_M_AXI_P_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_P_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_SRCNET_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SRCNET_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DSTNET_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DSTNET_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DSTNET_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRCNET_USER_VALUE : INTEGER := 0;
    C_M_AXI_P_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SRCNET_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DSTNET_USER_VALUE : INTEGER := 0;
    C_M_AXI_P_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DSTNET_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P_USER_VALUE : INTEGER := 0;
    C_M_AXI_DSTNET_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_SRCNET_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DSTNET_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SRCNET_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_p_AWVALID : OUT STD_LOGIC;
    m_axi_p_AWREADY : IN STD_LOGIC;
    m_axi_p_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ADDR_WIDTH-1 downto 0);
    m_axi_p_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_AWUSER_WIDTH-1 downto 0);
    m_axi_p_WVALID : OUT STD_LOGIC;
    m_axi_p_WREADY : IN STD_LOGIC;
    m_axi_p_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH-1 downto 0);
    m_axi_p_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH/8-1 downto 0);
    m_axi_p_WLAST : OUT STD_LOGIC;
    m_axi_p_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_WUSER_WIDTH-1 downto 0);
    m_axi_p_ARVALID : OUT STD_LOGIC;
    m_axi_p_ARREADY : IN STD_LOGIC;
    m_axi_p_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ADDR_WIDTH-1 downto 0);
    m_axi_p_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P_ARUSER_WIDTH-1 downto 0);
    m_axi_p_RVALID : IN STD_LOGIC;
    m_axi_p_RREADY : OUT STD_LOGIC;
    m_axi_p_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P_DATA_WIDTH-1 downto 0);
    m_axi_p_RLAST : IN STD_LOGIC;
    m_axi_p_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P_RUSER_WIDTH-1 downto 0);
    m_axi_p_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_BVALID : IN STD_LOGIC;
    m_axi_p_BREADY : OUT STD_LOGIC;
    m_axi_p_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P_ID_WIDTH-1 downto 0);
    m_axi_p_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P_BUSER_WIDTH-1 downto 0);
    m_axi_srcNet_AWVALID : OUT STD_LOGIC;
    m_axi_srcNet_AWREADY : IN STD_LOGIC;
    m_axi_srcNet_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ADDR_WIDTH-1 downto 0);
    m_axi_srcNet_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ID_WIDTH-1 downto 0);
    m_axi_srcNet_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_srcNet_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_srcNet_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_srcNet_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_AWUSER_WIDTH-1 downto 0);
    m_axi_srcNet_WVALID : OUT STD_LOGIC;
    m_axi_srcNet_WREADY : IN STD_LOGIC;
    m_axi_srcNet_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_DATA_WIDTH-1 downto 0);
    m_axi_srcNet_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_DATA_WIDTH/8-1 downto 0);
    m_axi_srcNet_WLAST : OUT STD_LOGIC;
    m_axi_srcNet_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ID_WIDTH-1 downto 0);
    m_axi_srcNet_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_WUSER_WIDTH-1 downto 0);
    m_axi_srcNet_ARVALID : OUT STD_LOGIC;
    m_axi_srcNet_ARREADY : IN STD_LOGIC;
    m_axi_srcNet_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ADDR_WIDTH-1 downto 0);
    m_axi_srcNet_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ID_WIDTH-1 downto 0);
    m_axi_srcNet_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_srcNet_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_srcNet_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_srcNet_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_srcNet_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ARUSER_WIDTH-1 downto 0);
    m_axi_srcNet_RVALID : IN STD_LOGIC;
    m_axi_srcNet_RREADY : OUT STD_LOGIC;
    m_axi_srcNet_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SRCNET_DATA_WIDTH-1 downto 0);
    m_axi_srcNet_RLAST : IN STD_LOGIC;
    m_axi_srcNet_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ID_WIDTH-1 downto 0);
    m_axi_srcNet_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRCNET_RUSER_WIDTH-1 downto 0);
    m_axi_srcNet_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_BVALID : IN STD_LOGIC;
    m_axi_srcNet_BREADY : OUT STD_LOGIC;
    m_axi_srcNet_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_srcNet_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SRCNET_ID_WIDTH-1 downto 0);
    m_axi_srcNet_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRCNET_BUSER_WIDTH-1 downto 0);
    m_axi_dstNet_AWVALID : OUT STD_LOGIC;
    m_axi_dstNet_AWREADY : IN STD_LOGIC;
    m_axi_dstNet_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ADDR_WIDTH-1 downto 0);
    m_axi_dstNet_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ID_WIDTH-1 downto 0);
    m_axi_dstNet_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dstNet_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dstNet_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dstNet_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_AWUSER_WIDTH-1 downto 0);
    m_axi_dstNet_WVALID : OUT STD_LOGIC;
    m_axi_dstNet_WREADY : IN STD_LOGIC;
    m_axi_dstNet_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_DATA_WIDTH-1 downto 0);
    m_axi_dstNet_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_DATA_WIDTH/8-1 downto 0);
    m_axi_dstNet_WLAST : OUT STD_LOGIC;
    m_axi_dstNet_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ID_WIDTH-1 downto 0);
    m_axi_dstNet_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_WUSER_WIDTH-1 downto 0);
    m_axi_dstNet_ARVALID : OUT STD_LOGIC;
    m_axi_dstNet_ARREADY : IN STD_LOGIC;
    m_axi_dstNet_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ADDR_WIDTH-1 downto 0);
    m_axi_dstNet_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ID_WIDTH-1 downto 0);
    m_axi_dstNet_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dstNet_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dstNet_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dstNet_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dstNet_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ARUSER_WIDTH-1 downto 0);
    m_axi_dstNet_RVALID : IN STD_LOGIC;
    m_axi_dstNet_RREADY : OUT STD_LOGIC;
    m_axi_dstNet_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DSTNET_DATA_WIDTH-1 downto 0);
    m_axi_dstNet_RLAST : IN STD_LOGIC;
    m_axi_dstNet_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ID_WIDTH-1 downto 0);
    m_axi_dstNet_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DSTNET_RUSER_WIDTH-1 downto 0);
    m_axi_dstNet_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_BVALID : IN STD_LOGIC;
    m_axi_dstNet_BREADY : OUT STD_LOGIC;
    m_axi_dstNet_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dstNet_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DSTNET_ID_WIDTH-1 downto 0);
    m_axi_dstNet_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DSTNET_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of AFAProcessFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AFAProcessFunction,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=142,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1654,HLS_SYN_LUT=1809}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_pp0_stg0_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_pp1_stg0_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st14_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st15_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_st16_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st17_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal p_AWVALID : STD_LOGIC;
    signal p_AWREADY : STD_LOGIC;
    signal p_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal p_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_WVALID : STD_LOGIC;
    signal p_WREADY : STD_LOGIC;
    signal p_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal p_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal p_WLAST : STD_LOGIC;
    signal p_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ARVALID : STD_LOGIC;
    signal p_ARREADY : STD_LOGIC;
    signal p_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RVALID : STD_LOGIC;
    signal p_RREADY : STD_LOGIC;
    signal p_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal p_RLAST : STD_LOGIC;
    signal p_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p_BVALID : STD_LOGIC;
    signal p_BREADY : STD_LOGIC;
    signal p_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AFAProcessFunction_p_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal srcNet_AWVALID : STD_LOGIC;
    signal srcNet_AWREADY : STD_LOGIC;
    signal srcNet_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal srcNet_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal srcNet_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal srcNet_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal srcNet_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_WVALID : STD_LOGIC;
    signal srcNet_WREADY : STD_LOGIC;
    signal srcNet_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal srcNet_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_WLAST : STD_LOGIC;
    signal srcNet_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_ARVALID : STD_LOGIC;
    signal srcNet_ARREADY : STD_LOGIC;
    signal srcNet_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal srcNet_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal srcNet_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal srcNet_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal srcNet_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal srcNet_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_RVALID : STD_LOGIC;
    signal srcNet_RREADY : STD_LOGIC;
    signal srcNet_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal srcNet_RLAST : STD_LOGIC;
    signal srcNet_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_BVALID : STD_LOGIC;
    signal srcNet_BREADY : STD_LOGIC;
    signal srcNet_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal srcNet_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal srcNet_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal dstNet_AWVALID : STD_LOGIC;
    signal dstNet_AWREADY : STD_LOGIC;
    signal dstNet_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dstNet_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dstNet_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dstNet_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dstNet_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_WVALID : STD_LOGIC;
    signal dstNet_WREADY : STD_LOGIC;
    signal dstNet_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal dstNet_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_WLAST : STD_LOGIC;
    signal dstNet_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_ARVALID : STD_LOGIC;
    signal dstNet_ARREADY : STD_LOGIC;
    signal dstNet_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dstNet_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dstNet_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dstNet_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dstNet_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dstNet_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_RVALID : STD_LOGIC;
    signal dstNet_RREADY : STD_LOGIC;
    signal dstNet_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal dstNet_RLAST : STD_LOGIC;
    signal dstNet_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_BVALID : STD_LOGIC;
    signal dstNet_BREADY : STD_LOGIC;
    signal dstNet_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dstNet_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal dstNet_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_113 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_indvar_reg_113_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_414 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_reg_171 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_423 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar4_reg_125 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_171_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_143_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_next_reg_175 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_read_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond6_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_450 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond6_reg_185_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_p_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar_next5_fu_160_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal AFAProcessFunctionParamBlock_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AFAProcessFunctionParamBlock_l_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_484 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_496 : BOOLEAN;
    signal ap_sig_ioackin_p_AWREADY : STD_LOGIC;
    signal AFAProcessFunctionParamBlock_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal AFAProcessFunctionParamBlock_ce0 : STD_LOGIC;
    signal AFAProcessFunctionParamBlock_we0 : STD_LOGIC;
    signal AFAProcessFunctionParamBlock_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_117_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_p_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_p_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_p_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_p_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st17_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_567 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_bdd_655 : BOOLEAN;
    signal ap_sig_bdd_555 : BOOLEAN;

    component AFAProcessFunction_AFAProcessFunctionParamBlock IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcessFunction_p_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AFAProcessFunction_srcNet_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AFAProcessFunction_dstNet_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AFAProcessFunction_p_m_axi_U : component AFAProcessFunction_p_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_P_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_P_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_P_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_P_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_P_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_P_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_P_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_P_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_P_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_P_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p_AWVALID,
        AWREADY => m_axi_p_AWREADY,
        AWADDR => m_axi_p_AWADDR,
        AWID => m_axi_p_AWID,
        AWLEN => m_axi_p_AWLEN,
        AWSIZE => m_axi_p_AWSIZE,
        AWBURST => m_axi_p_AWBURST,
        AWLOCK => m_axi_p_AWLOCK,
        AWCACHE => m_axi_p_AWCACHE,
        AWPROT => m_axi_p_AWPROT,
        AWQOS => m_axi_p_AWQOS,
        AWREGION => m_axi_p_AWREGION,
        AWUSER => m_axi_p_AWUSER,
        WVALID => m_axi_p_WVALID,
        WREADY => m_axi_p_WREADY,
        WDATA => m_axi_p_WDATA,
        WSTRB => m_axi_p_WSTRB,
        WLAST => m_axi_p_WLAST,
        WID => m_axi_p_WID,
        WUSER => m_axi_p_WUSER,
        ARVALID => m_axi_p_ARVALID,
        ARREADY => m_axi_p_ARREADY,
        ARADDR => m_axi_p_ARADDR,
        ARID => m_axi_p_ARID,
        ARLEN => m_axi_p_ARLEN,
        ARSIZE => m_axi_p_ARSIZE,
        ARBURST => m_axi_p_ARBURST,
        ARLOCK => m_axi_p_ARLOCK,
        ARCACHE => m_axi_p_ARCACHE,
        ARPROT => m_axi_p_ARPROT,
        ARQOS => m_axi_p_ARQOS,
        ARREGION => m_axi_p_ARREGION,
        ARUSER => m_axi_p_ARUSER,
        RVALID => m_axi_p_RVALID,
        RREADY => m_axi_p_RREADY,
        RDATA => m_axi_p_RDATA,
        RLAST => m_axi_p_RLAST,
        RID => m_axi_p_RID,
        RUSER => m_axi_p_RUSER,
        RRESP => m_axi_p_RRESP,
        BVALID => m_axi_p_BVALID,
        BREADY => m_axi_p_BREADY,
        BRESP => m_axi_p_BRESP,
        BID => m_axi_p_BID,
        BUSER => m_axi_p_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => AFAProcessFunction_p_m_axi_U_ap_dummy_ce,
        I_ARVALID => p_ARVALID,
        I_ARREADY => p_ARREADY,
        I_ARADDR => p_ARADDR,
        I_ARID => p_ARID,
        I_ARLEN => p_ARLEN,
        I_ARSIZE => p_ARSIZE,
        I_ARLOCK => p_ARLOCK,
        I_ARCACHE => p_ARCACHE,
        I_ARQOS => p_ARQOS,
        I_ARPROT => p_ARPROT,
        I_ARUSER => p_ARUSER,
        I_ARBURST => p_ARBURST,
        I_ARREGION => p_ARREGION,
        I_RVALID => p_RVALID,
        I_RREADY => p_RREADY,
        I_RDATA => p_RDATA,
        I_RID => p_RID,
        I_RUSER => p_RUSER,
        I_RRESP => p_RRESP,
        I_RLAST => p_RLAST,
        I_AWVALID => p_AWVALID,
        I_AWREADY => p_AWREADY,
        I_AWADDR => p_AWADDR,
        I_AWID => p_AWID,
        I_AWLEN => p_AWLEN,
        I_AWSIZE => p_AWSIZE,
        I_AWLOCK => p_AWLOCK,
        I_AWCACHE => p_AWCACHE,
        I_AWQOS => p_AWQOS,
        I_AWPROT => p_AWPROT,
        I_AWUSER => p_AWUSER,
        I_AWBURST => p_AWBURST,
        I_AWREGION => p_AWREGION,
        I_WVALID => p_WVALID,
        I_WREADY => p_WREADY,
        I_WDATA => p_WDATA,
        I_WID => p_WID,
        I_WUSER => p_WUSER,
        I_WLAST => p_WLAST,
        I_WSTRB => p_WSTRB,
        I_BVALID => p_BVALID,
        I_BREADY => p_BREADY,
        I_BRESP => p_BRESP,
        I_BID => p_BID,
        I_BUSER => p_BUSER);

    AFAProcessFunction_srcNet_m_axi_U : component AFAProcessFunction_srcNet_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_SRCNET_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_SRCNET_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_SRCNET_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_SRCNET_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_SRCNET_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_SRCNET_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_SRCNET_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_SRCNET_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_SRCNET_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_SRCNET_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SRCNET_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SRCNET_CACHE_VALUE)
    port map (
        AWVALID => m_axi_srcNet_AWVALID,
        AWREADY => m_axi_srcNet_AWREADY,
        AWADDR => m_axi_srcNet_AWADDR,
        AWID => m_axi_srcNet_AWID,
        AWLEN => m_axi_srcNet_AWLEN,
        AWSIZE => m_axi_srcNet_AWSIZE,
        AWBURST => m_axi_srcNet_AWBURST,
        AWLOCK => m_axi_srcNet_AWLOCK,
        AWCACHE => m_axi_srcNet_AWCACHE,
        AWPROT => m_axi_srcNet_AWPROT,
        AWQOS => m_axi_srcNet_AWQOS,
        AWREGION => m_axi_srcNet_AWREGION,
        AWUSER => m_axi_srcNet_AWUSER,
        WVALID => m_axi_srcNet_WVALID,
        WREADY => m_axi_srcNet_WREADY,
        WDATA => m_axi_srcNet_WDATA,
        WSTRB => m_axi_srcNet_WSTRB,
        WLAST => m_axi_srcNet_WLAST,
        WID => m_axi_srcNet_WID,
        WUSER => m_axi_srcNet_WUSER,
        ARVALID => m_axi_srcNet_ARVALID,
        ARREADY => m_axi_srcNet_ARREADY,
        ARADDR => m_axi_srcNet_ARADDR,
        ARID => m_axi_srcNet_ARID,
        ARLEN => m_axi_srcNet_ARLEN,
        ARSIZE => m_axi_srcNet_ARSIZE,
        ARBURST => m_axi_srcNet_ARBURST,
        ARLOCK => m_axi_srcNet_ARLOCK,
        ARCACHE => m_axi_srcNet_ARCACHE,
        ARPROT => m_axi_srcNet_ARPROT,
        ARQOS => m_axi_srcNet_ARQOS,
        ARREGION => m_axi_srcNet_ARREGION,
        ARUSER => m_axi_srcNet_ARUSER,
        RVALID => m_axi_srcNet_RVALID,
        RREADY => m_axi_srcNet_RREADY,
        RDATA => m_axi_srcNet_RDATA,
        RLAST => m_axi_srcNet_RLAST,
        RID => m_axi_srcNet_RID,
        RUSER => m_axi_srcNet_RUSER,
        RRESP => m_axi_srcNet_RRESP,
        BVALID => m_axi_srcNet_BVALID,
        BREADY => m_axi_srcNet_BREADY,
        BRESP => m_axi_srcNet_BRESP,
        BID => m_axi_srcNet_BID,
        BUSER => m_axi_srcNet_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce,
        I_ARVALID => srcNet_ARVALID,
        I_ARREADY => srcNet_ARREADY,
        I_ARADDR => srcNet_ARADDR,
        I_ARID => srcNet_ARID,
        I_ARLEN => srcNet_ARLEN,
        I_ARSIZE => srcNet_ARSIZE,
        I_ARLOCK => srcNet_ARLOCK,
        I_ARCACHE => srcNet_ARCACHE,
        I_ARQOS => srcNet_ARQOS,
        I_ARPROT => srcNet_ARPROT,
        I_ARUSER => srcNet_ARUSER,
        I_ARBURST => srcNet_ARBURST,
        I_ARREGION => srcNet_ARREGION,
        I_RVALID => srcNet_RVALID,
        I_RREADY => srcNet_RREADY,
        I_RDATA => srcNet_RDATA,
        I_RID => srcNet_RID,
        I_RUSER => srcNet_RUSER,
        I_RRESP => srcNet_RRESP,
        I_RLAST => srcNet_RLAST,
        I_AWVALID => srcNet_AWVALID,
        I_AWREADY => srcNet_AWREADY,
        I_AWADDR => srcNet_AWADDR,
        I_AWID => srcNet_AWID,
        I_AWLEN => srcNet_AWLEN,
        I_AWSIZE => srcNet_AWSIZE,
        I_AWLOCK => srcNet_AWLOCK,
        I_AWCACHE => srcNet_AWCACHE,
        I_AWQOS => srcNet_AWQOS,
        I_AWPROT => srcNet_AWPROT,
        I_AWUSER => srcNet_AWUSER,
        I_AWBURST => srcNet_AWBURST,
        I_AWREGION => srcNet_AWREGION,
        I_WVALID => srcNet_WVALID,
        I_WREADY => srcNet_WREADY,
        I_WDATA => srcNet_WDATA,
        I_WID => srcNet_WID,
        I_WUSER => srcNet_WUSER,
        I_WLAST => srcNet_WLAST,
        I_WSTRB => srcNet_WSTRB,
        I_BVALID => srcNet_BVALID,
        I_BREADY => srcNet_BREADY,
        I_BRESP => srcNet_BRESP,
        I_BID => srcNet_BID,
        I_BUSER => srcNet_BUSER);

    AFAProcessFunction_dstNet_m_axi_U : component AFAProcessFunction_dstNet_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_DSTNET_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_DSTNET_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_DSTNET_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_DSTNET_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_DSTNET_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_DSTNET_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_DSTNET_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_DSTNET_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DSTNET_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DSTNET_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DSTNET_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DSTNET_CACHE_VALUE)
    port map (
        AWVALID => m_axi_dstNet_AWVALID,
        AWREADY => m_axi_dstNet_AWREADY,
        AWADDR => m_axi_dstNet_AWADDR,
        AWID => m_axi_dstNet_AWID,
        AWLEN => m_axi_dstNet_AWLEN,
        AWSIZE => m_axi_dstNet_AWSIZE,
        AWBURST => m_axi_dstNet_AWBURST,
        AWLOCK => m_axi_dstNet_AWLOCK,
        AWCACHE => m_axi_dstNet_AWCACHE,
        AWPROT => m_axi_dstNet_AWPROT,
        AWQOS => m_axi_dstNet_AWQOS,
        AWREGION => m_axi_dstNet_AWREGION,
        AWUSER => m_axi_dstNet_AWUSER,
        WVALID => m_axi_dstNet_WVALID,
        WREADY => m_axi_dstNet_WREADY,
        WDATA => m_axi_dstNet_WDATA,
        WSTRB => m_axi_dstNet_WSTRB,
        WLAST => m_axi_dstNet_WLAST,
        WID => m_axi_dstNet_WID,
        WUSER => m_axi_dstNet_WUSER,
        ARVALID => m_axi_dstNet_ARVALID,
        ARREADY => m_axi_dstNet_ARREADY,
        ARADDR => m_axi_dstNet_ARADDR,
        ARID => m_axi_dstNet_ARID,
        ARLEN => m_axi_dstNet_ARLEN,
        ARSIZE => m_axi_dstNet_ARSIZE,
        ARBURST => m_axi_dstNet_ARBURST,
        ARLOCK => m_axi_dstNet_ARLOCK,
        ARCACHE => m_axi_dstNet_ARCACHE,
        ARPROT => m_axi_dstNet_ARPROT,
        ARQOS => m_axi_dstNet_ARQOS,
        ARREGION => m_axi_dstNet_ARREGION,
        ARUSER => m_axi_dstNet_ARUSER,
        RVALID => m_axi_dstNet_RVALID,
        RREADY => m_axi_dstNet_RREADY,
        RDATA => m_axi_dstNet_RDATA,
        RLAST => m_axi_dstNet_RLAST,
        RID => m_axi_dstNet_RID,
        RUSER => m_axi_dstNet_RUSER,
        RRESP => m_axi_dstNet_RRESP,
        BVALID => m_axi_dstNet_BVALID,
        BREADY => m_axi_dstNet_BREADY,
        BRESP => m_axi_dstNet_BRESP,
        BID => m_axi_dstNet_BID,
        BUSER => m_axi_dstNet_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce,
        I_ARVALID => dstNet_ARVALID,
        I_ARREADY => dstNet_ARREADY,
        I_ARADDR => dstNet_ARADDR,
        I_ARID => dstNet_ARID,
        I_ARLEN => dstNet_ARLEN,
        I_ARSIZE => dstNet_ARSIZE,
        I_ARLOCK => dstNet_ARLOCK,
        I_ARCACHE => dstNet_ARCACHE,
        I_ARQOS => dstNet_ARQOS,
        I_ARPROT => dstNet_ARPROT,
        I_ARUSER => dstNet_ARUSER,
        I_ARBURST => dstNet_ARBURST,
        I_ARREGION => dstNet_ARREGION,
        I_RVALID => dstNet_RVALID,
        I_RREADY => dstNet_RREADY,
        I_RDATA => dstNet_RDATA,
        I_RID => dstNet_RID,
        I_RUSER => dstNet_RUSER,
        I_RRESP => dstNet_RRESP,
        I_RLAST => dstNet_RLAST,
        I_AWVALID => dstNet_AWVALID,
        I_AWREADY => dstNet_AWREADY,
        I_AWADDR => dstNet_AWADDR,
        I_AWID => dstNet_AWID,
        I_AWLEN => dstNet_AWLEN,
        I_AWSIZE => dstNet_AWSIZE,
        I_AWLOCK => dstNet_AWLOCK,
        I_AWCACHE => dstNet_AWCACHE,
        I_AWQOS => dstNet_AWQOS,
        I_AWPROT => dstNet_AWPROT,
        I_AWUSER => dstNet_AWUSER,
        I_AWBURST => dstNet_AWBURST,
        I_AWREGION => dstNet_AWREGION,
        I_WVALID => dstNet_WVALID,
        I_WREADY => dstNet_WREADY,
        I_WDATA => dstNet_WDATA,
        I_WID => dstNet_WID,
        I_WUSER => dstNet_WUSER,
        I_WLAST => dstNet_WLAST,
        I_WSTRB => dstNet_WSTRB,
        I_BVALID => dstNet_BVALID,
        I_BREADY => dstNet_BREADY,
        I_BRESP => dstNet_BRESP,
        I_BID => dstNet_BID,
        I_BUSER => dstNet_BUSER);

    AFAProcessFunctionParamBlock_U : component AFAProcessFunction_AFAProcessFunctionParamBlock
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AFAProcessFunctionParamBlock_address0,
        ce0 => AFAProcessFunctionParamBlock_ce0,
        we0 => AFAProcessFunctionParamBlock_we0,
        d0 => AFAProcessFunctionParamBlock_d0,
        q0 => AFAProcessFunctionParamBlock_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_p_ARREADY assign process. --
    ap_reg_ioackin_p_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_p_ARREADY)))) then 
                        ap_reg_ioackin_p_ARREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_655) then 
                        ap_reg_ioackin_p_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_p_AWREADY assign process. --
    ap_reg_ioackin_p_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_p_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY))) then 
                        ap_reg_ioackin_p_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = p_AWREADY)) then 
                        ap_reg_ioackin_p_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_p_WREADY assign process. --
    ap_reg_ioackin_p_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_p_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_555) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                        ap_reg_ioackin_p_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = p_WREADY)) then 
                        ap_reg_ioackin_p_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_137_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_fu_137_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_137_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond6_fu_154_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond6_fu_154_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond6_fu_154_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar4_reg_125 assign process. --
    indvar4_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY)))) then 
                indvar4_reg_125 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond6_fu_154_p2))) then 
                indvar4_reg_125 <= indvar_next5_fu_160_p2;
            end if; 
        end if;
    end process;

    -- indvar_reg_113 assign process. --
    indvar_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond_reg_171 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_113 <= indvar_next_reg_175;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                indvar_reg_113 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond6_reg_185))) then
                AFAProcessFunctionParamBlock_l_reg_199 <= AFAProcessFunctionParamBlock_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond6_reg_185_pp1_it1 <= exitcond6_reg_185;
                exitcond6_reg_185 <= exitcond6_fu_154_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond_reg_171_pp0_it1 <= exitcond_reg_171;
                ap_reg_ppstg_indvar_reg_113_pp0_it1 <= indvar_reg_113;
                exitcond_reg_171 <= exitcond_fu_137_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_175 <= indvar_next_fu_143_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond_reg_171 = ap_const_lv1_0) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                p_read_reg_180 <= p_RDATA;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, p_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_423, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_fu_137_p2, exitcond6_fu_154_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond6_reg_185_pp1_it1, ap_sig_ioackin_p_WREADY, ap_reg_ppiten_pp1_it2, ap_sig_ioackin_p_AWREADY, ap_sig_ioackin_p_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_p_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
            when ap_ST_pp0_stg0_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_137_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_137_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                end if;
            when ap_ST_st10_fsm_7 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_p_AWREADY))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when ap_ST_pp1_stg0_fsm_8 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond6_fu_154_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_8;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond6_fu_154_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_8;
                end if;
            when ap_ST_st14_fsm_9 => 
                ap_NS_fsm <= ap_ST_st15_fsm_10;
            when ap_ST_st15_fsm_10 => 
                ap_NS_fsm <= ap_ST_st16_fsm_11;
            when ap_ST_st16_fsm_11 => 
                ap_NS_fsm <= ap_ST_st17_fsm_12;
            when ap_ST_st17_fsm_12 => 
                if (not((p_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    -- AFAProcessFunctionParamBlock_address0 assign process. --
    AFAProcessFunctionParamBlock_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_8, ap_reg_ppiten_pp1_it0, tmp_fu_149_p1, tmp_1_fu_166_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            AFAProcessFunctionParamBlock_address0 <= tmp_fu_149_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            AFAProcessFunctionParamBlock_address0 <= tmp_1_fu_166_p1(6 - 1 downto 0);
        else 
            AFAProcessFunctionParamBlock_address0 <= "XXXXXX";
        end if; 
    end process;


    -- AFAProcessFunctionParamBlock_ce0 assign process. --
    AFAProcessFunctionParamBlock_ce0_assign_proc : process(ap_sig_bdd_423, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_8, ap_reg_ppiten_pp1_it0, ap_reg_ppstg_exitcond6_reg_185_pp1_it1, ap_sig_ioackin_p_WREADY, ap_reg_ppiten_pp1_it2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_p_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            AFAProcessFunctionParamBlock_ce0 <= ap_const_logic_1;
        else 
            AFAProcessFunctionParamBlock_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AFAProcessFunctionParamBlock_d0 <= p_read_reg_180;

    -- AFAProcessFunctionParamBlock_we0 assign process. --
    AFAProcessFunctionParamBlock_we0_assign_proc : process(ap_sig_bdd_423, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_reg_171_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_171_pp0_it1)))) then 
            AFAProcessFunctionParamBlock_we0 <= ap_const_logic_1;
        else 
            AFAProcessFunctionParamBlock_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AFAProcessFunction_dstNet_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    AFAProcessFunction_p_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    AFAProcessFunction_srcNet_m_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(p_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((p_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(p_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((p_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_414 assign process. --
    ap_sig_bdd_414_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_414 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_423 assign process. --
    ap_sig_bdd_423_assign_proc : process(p_RVALID, exitcond_reg_171)
    begin
                ap_sig_bdd_423 <= ((p_RVALID = ap_const_logic_0) and (exitcond_reg_171 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_450 assign process. --
    ap_sig_bdd_450_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_450 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_484 assign process. --
    ap_sig_bdd_484_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_484 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_496 assign process. --
    ap_sig_bdd_496_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_496 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_555 assign process. --
    ap_sig_bdd_555_assign_proc : process(ap_reg_ppstg_exitcond6_reg_185_pp1_it1, ap_reg_ppiten_pp1_it2)
    begin
                ap_sig_bdd_555 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2));
    end process;


    -- ap_sig_bdd_567 assign process. --
    ap_sig_bdd_567_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_567 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_655 assign process. --
    ap_sig_bdd_655_assign_proc : process(ap_start, p_ARREADY)
    begin
                ap_sig_bdd_655 <= ((ap_const_logic_1 = p_ARREADY) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_6_assign_proc : process(ap_sig_bdd_414)
    begin
        if (ap_sig_bdd_414) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_8 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_8_assign_proc : process(ap_sig_bdd_450)
    begin
        if (ap_sig_bdd_450) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_496)
    begin
        if (ap_sig_bdd_496) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_12 assign process. --
    ap_sig_cseq_ST_st17_fsm_12_assign_proc : process(ap_sig_bdd_567)
    begin
        if (ap_sig_bdd_567) then 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_484)
    begin
        if (ap_sig_bdd_484) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_p_ARREADY assign process. --
    ap_sig_ioackin_p_ARREADY_assign_proc : process(p_ARREADY, ap_reg_ioackin_p_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_p_ARREADY)) then 
            ap_sig_ioackin_p_ARREADY <= p_ARREADY;
        else 
            ap_sig_ioackin_p_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_p_AWREADY assign process. --
    ap_sig_ioackin_p_AWREADY_assign_proc : process(p_AWREADY, ap_reg_ioackin_p_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_p_AWREADY)) then 
            ap_sig_ioackin_p_AWREADY <= p_AWREADY;
        else 
            ap_sig_ioackin_p_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_p_WREADY assign process. --
    ap_sig_ioackin_p_WREADY_assign_proc : process(p_WREADY, ap_reg_ioackin_p_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_p_WREADY)) then 
            ap_sig_ioackin_p_WREADY <= p_WREADY;
        else 
            ap_sig_ioackin_p_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    dstNet_ARADDR <= ap_const_lv32_0;
    dstNet_ARBURST <= ap_const_lv2_0;
    dstNet_ARCACHE <= ap_const_lv4_0;
    dstNet_ARID <= ap_const_lv1_0;
    dstNet_ARLEN <= ap_const_lv32_0;
    dstNet_ARLOCK <= ap_const_lv2_0;
    dstNet_ARPROT <= ap_const_lv3_0;
    dstNet_ARQOS <= ap_const_lv4_0;
    dstNet_ARREGION <= ap_const_lv4_0;
    dstNet_ARSIZE <= ap_const_lv3_0;
    dstNet_ARUSER <= ap_const_lv1_0;
    dstNet_ARVALID <= ap_const_logic_0;
    dstNet_AWADDR <= ap_const_lv32_0;
    dstNet_AWBURST <= ap_const_lv2_0;
    dstNet_AWCACHE <= ap_const_lv4_0;
    dstNet_AWID <= ap_const_lv1_0;
    dstNet_AWLEN <= ap_const_lv32_0;
    dstNet_AWLOCK <= ap_const_lv2_0;
    dstNet_AWPROT <= ap_const_lv3_0;
    dstNet_AWQOS <= ap_const_lv4_0;
    dstNet_AWREGION <= ap_const_lv4_0;
    dstNet_AWSIZE <= ap_const_lv3_0;
    dstNet_AWUSER <= ap_const_lv1_0;
    dstNet_AWVALID <= ap_const_logic_0;
    dstNet_BREADY <= ap_const_logic_0;
    dstNet_RREADY <= ap_const_logic_0;
    dstNet_WDATA <= ap_const_lv8_0;
    dstNet_WID <= ap_const_lv1_0;
    dstNet_WLAST <= ap_const_logic_0;
    dstNet_WSTRB <= ap_const_lv1_0;
    dstNet_WUSER <= ap_const_lv1_0;
    dstNet_WVALID <= ap_const_logic_0;
    exitcond6_fu_154_p2 <= "1" when (indvar4_reg_125 = ap_const_lv7_40) else "0";
    exitcond_fu_137_p2 <= "1" when (indvar_phi_fu_117_p4 = ap_const_lv7_40) else "0";
    indvar_next5_fu_160_p2 <= std_logic_vector(unsigned(indvar4_reg_125) + unsigned(ap_const_lv7_1));
    indvar_next_fu_143_p2 <= std_logic_vector(unsigned(indvar_phi_fu_117_p4) + unsigned(ap_const_lv7_1));

    -- indvar_phi_fu_117_p4 assign process. --
    indvar_phi_fu_117_p4_assign_proc : process(indvar_reg_113, ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond_reg_171, ap_reg_ppiten_pp0_it1, indvar_next_reg_175)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond_reg_171 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_117_p4 <= indvar_next_reg_175;
        else 
            indvar_phi_fu_117_p4 <= indvar_reg_113;
        end if; 
    end process;

    p_ARADDR <= ap_const_lv32_0;
    p_ARBURST <= ap_const_lv2_0;
    p_ARCACHE <= ap_const_lv4_0;
    p_ARID <= ap_const_lv1_0;
    p_ARLEN <= ap_const_lv32_40;
    p_ARLOCK <= ap_const_lv2_0;
    p_ARPROT <= ap_const_lv3_0;
    p_ARQOS <= ap_const_lv4_0;
    p_ARREGION <= ap_const_lv4_0;
    p_ARSIZE <= ap_const_lv3_0;
    p_ARUSER <= ap_const_lv1_0;

    -- p_ARVALID assign process. --
    p_ARVALID_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ioackin_p_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_p_ARREADY))) then 
            p_ARVALID <= ap_const_logic_1;
        else 
            p_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_AWADDR <= ap_const_lv32_0;
    p_AWBURST <= ap_const_lv2_0;
    p_AWCACHE <= ap_const_lv4_0;
    p_AWID <= ap_const_lv1_0;
    p_AWLEN <= ap_const_lv32_40;
    p_AWLOCK <= ap_const_lv2_0;
    p_AWPROT <= ap_const_lv3_0;
    p_AWQOS <= ap_const_lv4_0;
    p_AWREGION <= ap_const_lv4_0;
    p_AWSIZE <= ap_const_lv3_0;
    p_AWUSER <= ap_const_lv1_0;

    -- p_AWVALID assign process. --
    p_AWVALID_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7, ap_reg_ioackin_p_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_logic_0 = ap_reg_ioackin_p_AWREADY))) then 
            p_AWVALID <= ap_const_logic_1;
        else 
            p_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- p_BREADY assign process. --
    p_BREADY_assign_proc : process(p_BVALID, ap_sig_cseq_ST_st17_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12) and not((p_BVALID = ap_const_logic_0)))) then 
            p_BREADY <= ap_const_logic_1;
        else 
            p_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- p_RREADY assign process. --
    p_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, exitcond_reg_171, ap_sig_bdd_423, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (exitcond_reg_171 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_423 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            p_RREADY <= ap_const_logic_1;
        else 
            p_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_WDATA <= AFAProcessFunctionParamBlock_l_reg_199;
    p_WID <= ap_const_lv1_0;
    p_WLAST <= ap_const_logic_0;
    p_WSTRB <= ap_const_lv4_F;
    p_WUSER <= ap_const_lv1_0;

    -- p_WVALID assign process. --
    p_WVALID_assign_proc : process(ap_reg_ppstg_exitcond6_reg_185_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ioackin_p_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_185_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_0 = ap_reg_ioackin_p_WREADY))) then 
            p_WVALID <= ap_const_logic_1;
        else 
            p_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    srcNet_ARADDR <= ap_const_lv32_0;
    srcNet_ARBURST <= ap_const_lv2_0;
    srcNet_ARCACHE <= ap_const_lv4_0;
    srcNet_ARID <= ap_const_lv1_0;
    srcNet_ARLEN <= ap_const_lv32_0;
    srcNet_ARLOCK <= ap_const_lv2_0;
    srcNet_ARPROT <= ap_const_lv3_0;
    srcNet_ARQOS <= ap_const_lv4_0;
    srcNet_ARREGION <= ap_const_lv4_0;
    srcNet_ARSIZE <= ap_const_lv3_0;
    srcNet_ARUSER <= ap_const_lv1_0;
    srcNet_ARVALID <= ap_const_logic_0;
    srcNet_AWADDR <= ap_const_lv32_0;
    srcNet_AWBURST <= ap_const_lv2_0;
    srcNet_AWCACHE <= ap_const_lv4_0;
    srcNet_AWID <= ap_const_lv1_0;
    srcNet_AWLEN <= ap_const_lv32_0;
    srcNet_AWLOCK <= ap_const_lv2_0;
    srcNet_AWPROT <= ap_const_lv3_0;
    srcNet_AWQOS <= ap_const_lv4_0;
    srcNet_AWREGION <= ap_const_lv4_0;
    srcNet_AWSIZE <= ap_const_lv3_0;
    srcNet_AWUSER <= ap_const_lv1_0;
    srcNet_AWVALID <= ap_const_logic_0;
    srcNet_BREADY <= ap_const_logic_0;
    srcNet_RREADY <= ap_const_logic_0;
    srcNet_WDATA <= ap_const_lv8_0;
    srcNet_WID <= ap_const_lv1_0;
    srcNet_WLAST <= ap_const_logic_0;
    srcNet_WSTRB <= ap_const_lv1_0;
    srcNet_WUSER <= ap_const_lv1_0;
    srcNet_WVALID <= ap_const_logic_0;
    tmp_1_fu_166_p1 <= std_logic_vector(resize(unsigned(indvar4_reg_125),64));
    tmp_fu_149_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_113_pp0_it1),64));
end behav;
